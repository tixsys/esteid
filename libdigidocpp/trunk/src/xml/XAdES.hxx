// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from XAdES.xsd.
 */

#ifndef XAD_ES_HXX
#define XAD_ES_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< Type, char, Ncname > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info < char > NamespaceInfo;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > NamespaceInfomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream < char > ListStream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double < Double > AsDouble;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal < Decimal > AsDecimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace digidoc
{
  namespace xades
  {
    class AnyType;
    class ObjectIdentifierType;
    class IdentifierType;
    class QualifierType;
    class DocumentationReferencesType;
    class EncapsulatedPKIDataType;
    class IncludeType;
    class ReferenceInfoType;
    class GenericTimeStampType;
    class XAdESTimeStampType;
    class OtherTimeStampType;
    class QualifyingPropertiesType;
    class SignedPropertiesType;
    class UnsignedPropertiesType;
    class SignedSignaturePropertiesType;
    class SignedDataObjectPropertiesType;
    class UnsignedSignaturePropertiesType;
    class UnsignedDataObjectPropertiesType;
    class QualifyingPropertiesReferenceType;
    class CertIDListType;
    class CertIDType;
    class DigestAlgAndValueType;
    class SignaturePolicyIdentifierType;
    class SignaturePolicyIdType;
    class SigPolicyQualifiersListType;
    class SPUserNoticeType;
    class NoticeReferenceType;
    class IntegerListType;
    class CounterSignatureType;
    class DataObjectFormatType;
    class CommitmentTypeIndicationType;
    class CommitmentTypeQualifiersListType;
    class SignatureProductionPlaceType;
    class SignerRoleType;
    class ClaimedRolesListType;
    class CertifiedRolesListType;
    class CompleteCertificateRefsType;
    class CompleteRevocationRefsType;
    class CRLRefsType;
    class CRLRefType;
    class CRLIdentifierType;
    class OCSPRefsType;
    class OCSPRefType;
    class ResponderIDType;
    class OCSPIdentifierType;
    class OtherCertStatusRefsType;
    class CertificateValuesType;
    class RevocationValuesType;
    class CRLValuesType;
    class OCSPValuesType;
    class OtherCertStatusValuesType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "xmldsig-core-schema.hxx"

namespace digidoc
{
  /**
   * @brief C++ namespace for the %http://uri.etsi.org/01903/v1.3.2#
   * schema namespace.
   */
  namespace xades
  {
    /**
     * @brief Class corresponding to the %AnyType schema type.
     *
     * @nosubgrouping
     */
    class AnyType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      AnyType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      AnyType (const xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      AnyType (const AnyType& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual AnyType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~AnyType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ObjectIdentifierType schema type.
     *
     * @nosubgrouping
     */
    class ObjectIdentifierType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Identifier
       *
       * @brief Accessor and modifier functions for the %Identifier
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::IdentifierType IdentifierType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdentifierType, char > IdentifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdentifierType&
      identifier () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdentifierType&
      identifier ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      identifier (const IdentifierType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      identifier (::std::auto_ptr< IdentifierType > p);

      //@}

      /**
       * @name Description
       *
       * @brief Accessor and modifier functions for the %Description
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String DescriptionType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const DescriptionOptional&
      description () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      DescriptionOptional&
      description ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      description (const DescriptionType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      description (const DescriptionOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      description (::std::auto_ptr< DescriptionType > p);

      //@}

      /**
       * @name DocumentationReferences
       *
       * @brief Accessor and modifier functions for the %DocumentationReferences
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::DocumentationReferencesType DocumentationReferencesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< DocumentationReferencesType > DocumentationReferencesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DocumentationReferencesType, char > DocumentationReferencesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const DocumentationReferencesOptional&
      documentationReferences () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      DocumentationReferencesOptional&
      documentationReferences ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      documentationReferences (const DocumentationReferencesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      documentationReferences (const DocumentationReferencesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      documentationReferences (::std::auto_ptr< DocumentationReferencesType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ObjectIdentifierType (const IdentifierType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      ObjectIdentifierType (::std::auto_ptr< IdentifierType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ObjectIdentifierType (const xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ObjectIdentifierType (const ObjectIdentifierType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ObjectIdentifierType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ObjectIdentifierType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdentifierType > Identifier_;
      DescriptionOptional Description_;
      DocumentationReferencesOptional DocumentationReferences_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %IdentifierType schema type.
     *
     * @nosubgrouping
     */
    class IdentifierType: public ::xml_schema::Uri
    {
      public:
      /**
       * @name Qualifier
       *
       * @brief Accessor and modifier functions for the %Qualifier
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::digidoc::xades::QualifierType QualifierType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< QualifierType > QualifierOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< QualifierType, char > QualifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const QualifierOptional&
      qualifier () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      QualifierOptional&
      qualifier ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      qualifier (const QualifierType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      qualifier (const QualifierOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      qualifier (::std::auto_ptr< QualifierType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IdentifierType (const ::xml_schema::Uri&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IdentifierType (const xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IdentifierType (const IdentifierType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IdentifierType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IdentifierType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      QualifierOptional Qualifier_;

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %QualifierType
     * schema type.
     */
    class QualifierType: public ::xml_schema::String
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum Value
      {
        OIDAsURI,
        OIDAsURN
      };

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      QualifierType (Value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      QualifierType (const char* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      QualifierType (const ::std::string& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      QualifierType (const ::xml_schema::String& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      QualifierType (const xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      QualifierType (const xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      QualifierType (const ::std::string& s,
                     const xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      QualifierType (const QualifierType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual QualifierType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      QualifierType&
      operator= (Value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator Value () const
      {
        return _xsd_QualifierType_convert ();
      }

      //@cond

      protected:
      Value
      _xsd_QualifierType_convert () const;

      public:
      static const char* const _xsd_QualifierType_literals_[2];
      static const Value _xsd_QualifierType_indexes_[2];

      //@endcond
    };

    /**
     * @brief Class corresponding to the %DocumentationReferencesType schema type.
     *
     * @nosubgrouping
     */
    class DocumentationReferencesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name DocumentationReference
       *
       * @brief Accessor and modifier functions for the %DocumentationReference
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Uri DocumentationReferenceType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< DocumentationReferenceType > DocumentationReferenceSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< DocumentationReferenceType >::iterator DocumentationReferenceIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< DocumentationReferenceType >::const_iterator DocumentationReferenceConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DocumentationReferenceType, char > DocumentationReferenceTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const DocumentationReferenceSequence&
      documentationReference () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      DocumentationReferenceSequence&
      documentationReference ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      documentationReference (const DocumentationReferenceSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      DocumentationReferencesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DocumentationReferencesType (const xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DocumentationReferencesType (const DocumentationReferencesType& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual DocumentationReferencesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~DocumentationReferencesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      DocumentationReferenceSequence DocumentationReference_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %EncapsulatedPKIDataType schema type.
     *
     * @nosubgrouping
     */
    class EncapsulatedPKIDataType: public ::xml_schema::Base64Binary
    {
      public:
      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Encoding
       *
       * @brief Accessor and modifier functions for the %Encoding
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri EncodingType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< EncodingType > EncodingOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< EncodingType, char > EncodingTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const EncodingOptional&
      encoding () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      EncodingOptional&
      encoding ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      encoding (const EncodingType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      encoding (const EncodingOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      encoding (::std::auto_ptr< EncodingType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from initializers for required 
       * elements and attributes.
       */
      EncapsulatedPKIDataType ();

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      EncapsulatedPKIDataType (const ::xml_schema::Base64Binary&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      EncapsulatedPKIDataType (const xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EncapsulatedPKIDataType (const EncapsulatedPKIDataType& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual EncapsulatedPKIDataType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~EncapsulatedPKIDataType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IdOptional Id_;
      EncodingOptional Encoding_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %IncludeType schema type.
     *
     * @nosubgrouping
     */
    class IncludeType: public ::xml_schema::Type
    {
      public:
      /**
       * @name URI
       *
       * @brief Accessor and modifier functions for the %URI
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri URIType;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const URIType&
      uRI () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      URIType&
      uRI ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      uRI (const URIType& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      uRI (::std::auto_ptr< URIType > p);

      //@}

      /**
       * @name referencedData
       *
       * @brief Accessor and modifier functions for the %referencedData
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Boolean ReferencedDataType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ReferencedDataType > ReferencedDataOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< ReferencedDataType, char > ReferencedDataTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ReferencedDataOptional&
      referencedData () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      ReferencedDataOptional&
      referencedData ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      referencedData (const ReferencedDataType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      referencedData (const ReferencedDataOptional& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IncludeType (const URIType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IncludeType (const xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IncludeType (const IncludeType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IncludeType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IncludeType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< URIType > URI_;
      ReferencedDataOptional referencedData_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ReferenceInfoType schema type.
     *
     * @nosubgrouping
     */
    class ReferenceInfoType: public ::xml_schema::Type
    {
      public:
      /**
       * @name DigestMethod
       *
       * @brief Accessor and modifier functions for the %DigestMethod
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::DigestMethodType DigestMethodType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DigestMethodType, char > DigestMethodTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const DigestMethodType&
      digestMethod () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      DigestMethodType&
      digestMethod ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      digestMethod (const DigestMethodType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      digestMethod (::std::auto_ptr< DigestMethodType > p);

      //@}

      /**
       * @name DigestValue
       *
       * @brief Accessor and modifier functions for the %DigestValue
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::DigestValueType DigestValueType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DigestValueType, char > DigestValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const DigestValueType&
      digestValue () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      DigestValueType&
      digestValue ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      digestValue (const DigestValueType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      digestValue (::std::auto_ptr< DigestValueType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name URI
       *
       * @brief Accessor and modifier functions for the %URI
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri URIType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< URIType > URIOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const URIOptional&
      uRI () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      URIOptional&
      uRI ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      uRI (const URIType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      uRI (const URIOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      uRI (::std::auto_ptr< URIType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ReferenceInfoType (const DigestMethodType&,
                         const DigestValueType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      ReferenceInfoType (::std::auto_ptr< DigestMethodType >&,
                         const DigestValueType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ReferenceInfoType (const xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ReferenceInfoType (const ReferenceInfoType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ReferenceInfoType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ReferenceInfoType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< DigestMethodType > DigestMethod_;
      ::xsd::cxx::tree::one< DigestValueType > DigestValue_;
      IdOptional Id_;
      URIOptional URI_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %GenericTimeStampType schema type.
     *
     * @nosubgrouping
     */
    class GenericTimeStampType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Include
       *
       * @brief Accessor and modifier functions for the %Include
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::IncludeType IncludeType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< IncludeType > IncludeSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< IncludeType >::iterator IncludeIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< IncludeType >::const_iterator IncludeConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IncludeType, char > IncludeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const IncludeSequence&
      include () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      IncludeSequence&
      include ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      include (const IncludeSequence& s);

      //@}

      /**
       * @name ReferenceInfo
       *
       * @brief Accessor and modifier functions for the %ReferenceInfo
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::ReferenceInfoType ReferenceInfoType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ReferenceInfoType > ReferenceInfoSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< ReferenceInfoType >::iterator ReferenceInfoIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< ReferenceInfoType >::const_iterator ReferenceInfoConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ReferenceInfoType, char > ReferenceInfoTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ReferenceInfoSequence&
      referenceInfo () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ReferenceInfoSequence&
      referenceInfo ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      referenceInfo (const ReferenceInfoSequence& s);

      //@}

      /**
       * @name CanonicalizationMethod
       *
       * @brief Accessor and modifier functions for the %CanonicalizationMethod
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::CanonicalizationMethodType CanonicalizationMethodType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CanonicalizationMethodType > CanonicalizationMethodOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CanonicalizationMethodType, char > CanonicalizationMethodTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CanonicalizationMethodOptional&
      canonicalizationMethod () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CanonicalizationMethodOptional&
      canonicalizationMethod ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      canonicalizationMethod (const CanonicalizationMethodType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      canonicalizationMethod (const CanonicalizationMethodOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      canonicalizationMethod (::std::auto_ptr< CanonicalizationMethodType > p);

      //@}

      /**
       * @name EncapsulatedTimeStamp
       *
       * @brief Accessor and modifier functions for the %EncapsulatedTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::EncapsulatedPKIDataType EncapsulatedTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< EncapsulatedTimeStampType > EncapsulatedTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedTimeStampType >::iterator EncapsulatedTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedTimeStampType >::const_iterator EncapsulatedTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EncapsulatedTimeStampType, char > EncapsulatedTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const EncapsulatedTimeStampSequence&
      encapsulatedTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      EncapsulatedTimeStampSequence&
      encapsulatedTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      encapsulatedTimeStamp (const EncapsulatedTimeStampSequence& s);

      //@}

      /**
       * @name XMLTimeStamp
       *
       * @brief Accessor and modifier functions for the %XMLTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::AnyType XMLTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< XMLTimeStampType > XMLTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< XMLTimeStampType >::iterator XMLTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< XMLTimeStampType >::const_iterator XMLTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< XMLTimeStampType, char > XMLTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const XMLTimeStampSequence&
      xMLTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      XMLTimeStampSequence&
      xMLTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      xMLTimeStamp (const XMLTimeStampSequence& s);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      GenericTimeStampType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      GenericTimeStampType (const xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      GenericTimeStampType (const GenericTimeStampType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual GenericTimeStampType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~GenericTimeStampType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IncludeSequence Include_;
      ReferenceInfoSequence ReferenceInfo_;
      CanonicalizationMethodOptional CanonicalizationMethod_;
      EncapsulatedTimeStampSequence EncapsulatedTimeStamp_;
      XMLTimeStampSequence XMLTimeStamp_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %XAdESTimeStampType schema type.
     *
     * @nosubgrouping
     */
    class XAdESTimeStampType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Include
       *
       * @brief Accessor and modifier functions for the %Include
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::IncludeType IncludeType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< IncludeType > IncludeSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< IncludeType >::iterator IncludeIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< IncludeType >::const_iterator IncludeConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IncludeType, char > IncludeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const IncludeSequence&
      include () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      IncludeSequence&
      include ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      include (const IncludeSequence& s);

      //@}

      /**
       * @name CanonicalizationMethod
       *
       * @brief Accessor and modifier functions for the %CanonicalizationMethod
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::CanonicalizationMethodType CanonicalizationMethodType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CanonicalizationMethodType > CanonicalizationMethodOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CanonicalizationMethodType, char > CanonicalizationMethodTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CanonicalizationMethodOptional&
      canonicalizationMethod () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CanonicalizationMethodOptional&
      canonicalizationMethod ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      canonicalizationMethod (const CanonicalizationMethodType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      canonicalizationMethod (const CanonicalizationMethodOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      canonicalizationMethod (::std::auto_ptr< CanonicalizationMethodType > p);

      //@}

      /**
       * @name EncapsulatedTimeStamp
       *
       * @brief Accessor and modifier functions for the %EncapsulatedTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::EncapsulatedPKIDataType EncapsulatedTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< EncapsulatedTimeStampType > EncapsulatedTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedTimeStampType >::iterator EncapsulatedTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedTimeStampType >::const_iterator EncapsulatedTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EncapsulatedTimeStampType, char > EncapsulatedTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const EncapsulatedTimeStampSequence&
      encapsulatedTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      EncapsulatedTimeStampSequence&
      encapsulatedTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      encapsulatedTimeStamp (const EncapsulatedTimeStampSequence& s);

      //@}

      /**
       * @name XMLTimeStamp
       *
       * @brief Accessor and modifier functions for the %XMLTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::AnyType XMLTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< XMLTimeStampType > XMLTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< XMLTimeStampType >::iterator XMLTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< XMLTimeStampType >::const_iterator XMLTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< XMLTimeStampType, char > XMLTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const XMLTimeStampSequence&
      xMLTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      XMLTimeStampSequence&
      xMLTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      xMLTimeStamp (const XMLTimeStampSequence& s);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      XAdESTimeStampType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      XAdESTimeStampType (const xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      XAdESTimeStampType (const XAdESTimeStampType& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual XAdESTimeStampType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~XAdESTimeStampType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IncludeSequence Include_;
      CanonicalizationMethodOptional CanonicalizationMethod_;
      EncapsulatedTimeStampSequence EncapsulatedTimeStamp_;
      XMLTimeStampSequence XMLTimeStamp_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %OtherTimeStampType schema type.
     *
     * @nosubgrouping
     */
    class OtherTimeStampType: public ::digidoc::xades::GenericTimeStampType
    {
      public:
      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      OtherTimeStampType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      OtherTimeStampType (const xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      OtherTimeStampType (const OtherTimeStampType& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual OtherTimeStampType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~OtherTimeStampType ();
    };

    /**
     * @brief Class corresponding to the %QualifyingPropertiesType schema type.
     *
     * @nosubgrouping
     */
    class QualifyingPropertiesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name SignedProperties
       *
       * @brief Accessor and modifier functions for the %SignedProperties
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::SignedPropertiesType SignedPropertiesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SignedPropertiesType > SignedPropertiesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignedPropertiesType, char > SignedPropertiesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SignedPropertiesOptional&
      signedProperties () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SignedPropertiesOptional&
      signedProperties ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signedProperties (const SignedPropertiesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signedProperties (const SignedPropertiesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signedProperties (::std::auto_ptr< SignedPropertiesType > p);

      //@}

      /**
       * @name UnsignedProperties
       *
       * @brief Accessor and modifier functions for the %UnsignedProperties
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::UnsignedPropertiesType UnsignedPropertiesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< UnsignedPropertiesType > UnsignedPropertiesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< UnsignedPropertiesType, char > UnsignedPropertiesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const UnsignedPropertiesOptional&
      unsignedProperties () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      UnsignedPropertiesOptional&
      unsignedProperties ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      unsignedProperties (const UnsignedPropertiesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      unsignedProperties (const UnsignedPropertiesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      unsignedProperties (::std::auto_ptr< UnsignedPropertiesType > p);

      //@}

      /**
       * @name Target
       *
       * @brief Accessor and modifier functions for the %Target
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri TargetType;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< TargetType, char > TargetTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const TargetType&
      target () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      TargetType&
      target ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      target (const TargetType& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      target (::std::auto_ptr< TargetType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      QualifyingPropertiesType (const TargetType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      QualifyingPropertiesType (const xercesc::DOMElement& e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      QualifyingPropertiesType (const QualifyingPropertiesType& x,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual QualifyingPropertiesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~QualifyingPropertiesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      SignedPropertiesOptional SignedProperties_;
      UnsignedPropertiesOptional UnsignedProperties_;
      ::xsd::cxx::tree::one< TargetType > Target_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SignedPropertiesType schema type.
     *
     * @nosubgrouping
     */
    class SignedPropertiesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name SignedSignatureProperties
       *
       * @brief Accessor and modifier functions for the %SignedSignatureProperties
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::SignedSignaturePropertiesType SignedSignaturePropertiesType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignedSignaturePropertiesType, char > SignedSignaturePropertiesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const SignedSignaturePropertiesType&
      signedSignatureProperties () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      SignedSignaturePropertiesType&
      signedSignatureProperties ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signedSignatureProperties (const SignedSignaturePropertiesType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signedSignatureProperties (::std::auto_ptr< SignedSignaturePropertiesType > p);

      //@}

      /**
       * @name SignedDataObjectProperties
       *
       * @brief Accessor and modifier functions for the %SignedDataObjectProperties
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::SignedDataObjectPropertiesType SignedDataObjectPropertiesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SignedDataObjectPropertiesType > SignedDataObjectPropertiesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignedDataObjectPropertiesType, char > SignedDataObjectPropertiesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SignedDataObjectPropertiesOptional&
      signedDataObjectProperties () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SignedDataObjectPropertiesOptional&
      signedDataObjectProperties ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signedDataObjectProperties (const SignedDataObjectPropertiesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signedDataObjectProperties (const SignedDataObjectPropertiesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signedDataObjectProperties (::std::auto_ptr< SignedDataObjectPropertiesType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SignedPropertiesType (const SignedSignaturePropertiesType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      SignedPropertiesType (::std::auto_ptr< SignedSignaturePropertiesType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SignedPropertiesType (const xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SignedPropertiesType (const SignedPropertiesType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SignedPropertiesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SignedPropertiesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< SignedSignaturePropertiesType > SignedSignatureProperties_;
      SignedDataObjectPropertiesOptional SignedDataObjectProperties_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %UnsignedPropertiesType schema type.
     *
     * @nosubgrouping
     */
    class UnsignedPropertiesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name UnsignedSignatureProperties
       *
       * @brief Accessor and modifier functions for the %UnsignedSignatureProperties
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::UnsignedSignaturePropertiesType UnsignedSignaturePropertiesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< UnsignedSignaturePropertiesType > UnsignedSignaturePropertiesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< UnsignedSignaturePropertiesType, char > UnsignedSignaturePropertiesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const UnsignedSignaturePropertiesOptional&
      unsignedSignatureProperties () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      UnsignedSignaturePropertiesOptional&
      unsignedSignatureProperties ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      unsignedSignatureProperties (const UnsignedSignaturePropertiesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      unsignedSignatureProperties (const UnsignedSignaturePropertiesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      unsignedSignatureProperties (::std::auto_ptr< UnsignedSignaturePropertiesType > p);

      //@}

      /**
       * @name UnsignedDataObjectProperties
       *
       * @brief Accessor and modifier functions for the %UnsignedDataObjectProperties
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::UnsignedDataObjectPropertiesType UnsignedDataObjectPropertiesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< UnsignedDataObjectPropertiesType > UnsignedDataObjectPropertiesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< UnsignedDataObjectPropertiesType, char > UnsignedDataObjectPropertiesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const UnsignedDataObjectPropertiesOptional&
      unsignedDataObjectProperties () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      UnsignedDataObjectPropertiesOptional&
      unsignedDataObjectProperties ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      unsignedDataObjectProperties (const UnsignedDataObjectPropertiesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      unsignedDataObjectProperties (const UnsignedDataObjectPropertiesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      unsignedDataObjectProperties (::std::auto_ptr< UnsignedDataObjectPropertiesType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      UnsignedPropertiesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      UnsignedPropertiesType (const xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      UnsignedPropertiesType (const UnsignedPropertiesType& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual UnsignedPropertiesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~UnsignedPropertiesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      UnsignedSignaturePropertiesOptional UnsignedSignatureProperties_;
      UnsignedDataObjectPropertiesOptional UnsignedDataObjectProperties_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SignedSignaturePropertiesType schema type.
     *
     * @nosubgrouping
     */
    class SignedSignaturePropertiesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name SigningTime
       *
       * @brief Accessor and modifier functions for the %SigningTime
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::DateTime SigningTimeType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SigningTimeType > SigningTimeOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SigningTimeType, char > SigningTimeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SigningTimeOptional&
      signingTime () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SigningTimeOptional&
      signingTime ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signingTime (const SigningTimeType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signingTime (const SigningTimeOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signingTime (::std::auto_ptr< SigningTimeType > p);

      //@}

      /**
       * @name SigningCertificate
       *
       * @brief Accessor and modifier functions for the %SigningCertificate
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CertIDListType SigningCertificateType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SigningCertificateType > SigningCertificateOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SigningCertificateType, char > SigningCertificateTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SigningCertificateOptional&
      signingCertificate () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SigningCertificateOptional&
      signingCertificate ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signingCertificate (const SigningCertificateType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signingCertificate (const SigningCertificateOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signingCertificate (::std::auto_ptr< SigningCertificateType > p);

      //@}

      /**
       * @name SignaturePolicyIdentifier
       *
       * @brief Accessor and modifier functions for the %SignaturePolicyIdentifier
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::SignaturePolicyIdentifierType SignaturePolicyIdentifierType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SignaturePolicyIdentifierType > SignaturePolicyIdentifierOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignaturePolicyIdentifierType, char > SignaturePolicyIdentifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SignaturePolicyIdentifierOptional&
      signaturePolicyIdentifier () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SignaturePolicyIdentifierOptional&
      signaturePolicyIdentifier ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signaturePolicyIdentifier (const SignaturePolicyIdentifierType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signaturePolicyIdentifier (const SignaturePolicyIdentifierOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signaturePolicyIdentifier (::std::auto_ptr< SignaturePolicyIdentifierType > p);

      //@}

      /**
       * @name SignatureProductionPlace
       *
       * @brief Accessor and modifier functions for the %SignatureProductionPlace
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::SignatureProductionPlaceType SignatureProductionPlaceType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SignatureProductionPlaceType > SignatureProductionPlaceOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignatureProductionPlaceType, char > SignatureProductionPlaceTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SignatureProductionPlaceOptional&
      signatureProductionPlace () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SignatureProductionPlaceOptional&
      signatureProductionPlace ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signatureProductionPlace (const SignatureProductionPlaceType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signatureProductionPlace (const SignatureProductionPlaceOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signatureProductionPlace (::std::auto_ptr< SignatureProductionPlaceType > p);

      //@}

      /**
       * @name SignerRole
       *
       * @brief Accessor and modifier functions for the %SignerRole
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::SignerRoleType SignerRoleType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SignerRoleType > SignerRoleOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignerRoleType, char > SignerRoleTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SignerRoleOptional&
      signerRole () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SignerRoleOptional&
      signerRole ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signerRole (const SignerRoleType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signerRole (const SignerRoleOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signerRole (::std::auto_ptr< SignerRoleType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SignedSignaturePropertiesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SignedSignaturePropertiesType (const xercesc::DOMElement& e,
                                     ::xml_schema::Flags f = 0,
                                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SignedSignaturePropertiesType (const SignedSignaturePropertiesType& x,
                                     ::xml_schema::Flags f = 0,
                                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SignedSignaturePropertiesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SignedSignaturePropertiesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      SigningTimeOptional SigningTime_;
      SigningCertificateOptional SigningCertificate_;
      SignaturePolicyIdentifierOptional SignaturePolicyIdentifier_;
      SignatureProductionPlaceOptional SignatureProductionPlace_;
      SignerRoleOptional SignerRole_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SignedDataObjectPropertiesType schema type.
     *
     * @nosubgrouping
     */
    class SignedDataObjectPropertiesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name DataObjectFormat
       *
       * @brief Accessor and modifier functions for the %DataObjectFormat
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::DataObjectFormatType DataObjectFormatType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< DataObjectFormatType > DataObjectFormatSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< DataObjectFormatType >::iterator DataObjectFormatIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< DataObjectFormatType >::const_iterator DataObjectFormatConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DataObjectFormatType, char > DataObjectFormatTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const DataObjectFormatSequence&
      dataObjectFormat () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      DataObjectFormatSequence&
      dataObjectFormat ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      dataObjectFormat (const DataObjectFormatSequence& s);

      //@}

      /**
       * @name CommitmentTypeIndication
       *
       * @brief Accessor and modifier functions for the %CommitmentTypeIndication
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CommitmentTypeIndicationType CommitmentTypeIndicationType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CommitmentTypeIndicationType > CommitmentTypeIndicationSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CommitmentTypeIndicationType >::iterator CommitmentTypeIndicationIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CommitmentTypeIndicationType >::const_iterator CommitmentTypeIndicationConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CommitmentTypeIndicationType, char > CommitmentTypeIndicationTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CommitmentTypeIndicationSequence&
      commitmentTypeIndication () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CommitmentTypeIndicationSequence&
      commitmentTypeIndication ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      commitmentTypeIndication (const CommitmentTypeIndicationSequence& s);

      //@}

      /**
       * @name AllDataObjectsTimeStamp
       *
       * @brief Accessor and modifier functions for the %AllDataObjectsTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::XAdESTimeStampType AllDataObjectsTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< AllDataObjectsTimeStampType > AllDataObjectsTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< AllDataObjectsTimeStampType >::iterator AllDataObjectsTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< AllDataObjectsTimeStampType >::const_iterator AllDataObjectsTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AllDataObjectsTimeStampType, char > AllDataObjectsTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const AllDataObjectsTimeStampSequence&
      allDataObjectsTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      AllDataObjectsTimeStampSequence&
      allDataObjectsTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      allDataObjectsTimeStamp (const AllDataObjectsTimeStampSequence& s);

      //@}

      /**
       * @name IndividualDataObjectsTimeStamp
       *
       * @brief Accessor and modifier functions for the %IndividualDataObjectsTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::XAdESTimeStampType IndividualDataObjectsTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< IndividualDataObjectsTimeStampType > IndividualDataObjectsTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< IndividualDataObjectsTimeStampType >::iterator IndividualDataObjectsTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< IndividualDataObjectsTimeStampType >::const_iterator IndividualDataObjectsTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IndividualDataObjectsTimeStampType, char > IndividualDataObjectsTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const IndividualDataObjectsTimeStampSequence&
      individualDataObjectsTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      IndividualDataObjectsTimeStampSequence&
      individualDataObjectsTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      individualDataObjectsTimeStamp (const IndividualDataObjectsTimeStampSequence& s);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SignedDataObjectPropertiesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SignedDataObjectPropertiesType (const xercesc::DOMElement& e,
                                      ::xml_schema::Flags f = 0,
                                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SignedDataObjectPropertiesType (const SignedDataObjectPropertiesType& x,
                                      ::xml_schema::Flags f = 0,
                                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SignedDataObjectPropertiesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SignedDataObjectPropertiesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      DataObjectFormatSequence DataObjectFormat_;
      CommitmentTypeIndicationSequence CommitmentTypeIndication_;
      AllDataObjectsTimeStampSequence AllDataObjectsTimeStamp_;
      IndividualDataObjectsTimeStampSequence IndividualDataObjectsTimeStamp_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %UnsignedSignaturePropertiesType schema type.
     *
     * @nosubgrouping
     */
    class UnsignedSignaturePropertiesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CounterSignature
       *
       * @brief Accessor and modifier functions for the %CounterSignature
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CounterSignatureType CounterSignatureType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CounterSignatureType > CounterSignatureSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CounterSignatureType >::iterator CounterSignatureIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CounterSignatureType >::const_iterator CounterSignatureConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CounterSignatureType, char > CounterSignatureTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CounterSignatureSequence&
      counterSignature () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CounterSignatureSequence&
      counterSignature ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      counterSignature (const CounterSignatureSequence& s);

      //@}

      /**
       * @name SignatureTimeStamp
       *
       * @brief Accessor and modifier functions for the %SignatureTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::XAdESTimeStampType SignatureTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< SignatureTimeStampType > SignatureTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< SignatureTimeStampType >::iterator SignatureTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< SignatureTimeStampType >::const_iterator SignatureTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignatureTimeStampType, char > SignatureTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const SignatureTimeStampSequence&
      signatureTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      SignatureTimeStampSequence&
      signatureTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      signatureTimeStamp (const SignatureTimeStampSequence& s);

      //@}

      /**
       * @name CompleteCertificateRefs
       *
       * @brief Accessor and modifier functions for the %CompleteCertificateRefs
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CompleteCertificateRefsType CompleteCertificateRefsType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CompleteCertificateRefsType > CompleteCertificateRefsSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CompleteCertificateRefsType >::iterator CompleteCertificateRefsIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CompleteCertificateRefsType >::const_iterator CompleteCertificateRefsConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CompleteCertificateRefsType, char > CompleteCertificateRefsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CompleteCertificateRefsSequence&
      completeCertificateRefs () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CompleteCertificateRefsSequence&
      completeCertificateRefs ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      completeCertificateRefs (const CompleteCertificateRefsSequence& s);

      //@}

      /**
       * @name CompleteRevocationRefs
       *
       * @brief Accessor and modifier functions for the %CompleteRevocationRefs
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CompleteRevocationRefsType CompleteRevocationRefsType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CompleteRevocationRefsType > CompleteRevocationRefsSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CompleteRevocationRefsType >::iterator CompleteRevocationRefsIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CompleteRevocationRefsType >::const_iterator CompleteRevocationRefsConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CompleteRevocationRefsType, char > CompleteRevocationRefsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CompleteRevocationRefsSequence&
      completeRevocationRefs () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CompleteRevocationRefsSequence&
      completeRevocationRefs ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      completeRevocationRefs (const CompleteRevocationRefsSequence& s);

      //@}

      /**
       * @name AttributeCertificateRefs
       *
       * @brief Accessor and modifier functions for the %AttributeCertificateRefs
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CompleteCertificateRefsType AttributeCertificateRefsType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< AttributeCertificateRefsType > AttributeCertificateRefsSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< AttributeCertificateRefsType >::iterator AttributeCertificateRefsIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< AttributeCertificateRefsType >::const_iterator AttributeCertificateRefsConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AttributeCertificateRefsType, char > AttributeCertificateRefsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const AttributeCertificateRefsSequence&
      attributeCertificateRefs () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      AttributeCertificateRefsSequence&
      attributeCertificateRefs ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      attributeCertificateRefs (const AttributeCertificateRefsSequence& s);

      //@}

      /**
       * @name AttributeRevocationRefs
       *
       * @brief Accessor and modifier functions for the %AttributeRevocationRefs
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CompleteRevocationRefsType AttributeRevocationRefsType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< AttributeRevocationRefsType > AttributeRevocationRefsSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< AttributeRevocationRefsType >::iterator AttributeRevocationRefsIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< AttributeRevocationRefsType >::const_iterator AttributeRevocationRefsConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AttributeRevocationRefsType, char > AttributeRevocationRefsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const AttributeRevocationRefsSequence&
      attributeRevocationRefs () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      AttributeRevocationRefsSequence&
      attributeRevocationRefs ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      attributeRevocationRefs (const AttributeRevocationRefsSequence& s);

      //@}

      /**
       * @name SigAndRefsTimeStamp
       *
       * @brief Accessor and modifier functions for the %SigAndRefsTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::XAdESTimeStampType SigAndRefsTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< SigAndRefsTimeStampType > SigAndRefsTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< SigAndRefsTimeStampType >::iterator SigAndRefsTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< SigAndRefsTimeStampType >::const_iterator SigAndRefsTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SigAndRefsTimeStampType, char > SigAndRefsTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const SigAndRefsTimeStampSequence&
      sigAndRefsTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      SigAndRefsTimeStampSequence&
      sigAndRefsTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      sigAndRefsTimeStamp (const SigAndRefsTimeStampSequence& s);

      //@}

      /**
       * @name RefsOnlyTimeStamp
       *
       * @brief Accessor and modifier functions for the %RefsOnlyTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::XAdESTimeStampType RefsOnlyTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< RefsOnlyTimeStampType > RefsOnlyTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< RefsOnlyTimeStampType >::iterator RefsOnlyTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< RefsOnlyTimeStampType >::const_iterator RefsOnlyTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< RefsOnlyTimeStampType, char > RefsOnlyTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const RefsOnlyTimeStampSequence&
      refsOnlyTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      RefsOnlyTimeStampSequence&
      refsOnlyTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      refsOnlyTimeStamp (const RefsOnlyTimeStampSequence& s);

      //@}

      /**
       * @name CertificateValues
       *
       * @brief Accessor and modifier functions for the %CertificateValues
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CertificateValuesType CertificateValuesType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CertificateValuesType > CertificateValuesSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CertificateValuesType >::iterator CertificateValuesIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CertificateValuesType >::const_iterator CertificateValuesConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CertificateValuesType, char > CertificateValuesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CertificateValuesSequence&
      certificateValues () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CertificateValuesSequence&
      certificateValues ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      certificateValues (const CertificateValuesSequence& s);

      //@}

      /**
       * @name RevocationValues
       *
       * @brief Accessor and modifier functions for the %RevocationValues
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::RevocationValuesType RevocationValuesType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< RevocationValuesType > RevocationValuesSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< RevocationValuesType >::iterator RevocationValuesIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< RevocationValuesType >::const_iterator RevocationValuesConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< RevocationValuesType, char > RevocationValuesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const RevocationValuesSequence&
      revocationValues () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      RevocationValuesSequence&
      revocationValues ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      revocationValues (const RevocationValuesSequence& s);

      //@}

      /**
       * @name AttrAuthoritiesCertValues
       *
       * @brief Accessor and modifier functions for the %AttrAuthoritiesCertValues
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CertificateValuesType AttrAuthoritiesCertValuesType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< AttrAuthoritiesCertValuesType > AttrAuthoritiesCertValuesSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< AttrAuthoritiesCertValuesType >::iterator AttrAuthoritiesCertValuesIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< AttrAuthoritiesCertValuesType >::const_iterator AttrAuthoritiesCertValuesConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AttrAuthoritiesCertValuesType, char > AttrAuthoritiesCertValuesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const AttrAuthoritiesCertValuesSequence&
      attrAuthoritiesCertValues () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      AttrAuthoritiesCertValuesSequence&
      attrAuthoritiesCertValues ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      attrAuthoritiesCertValues (const AttrAuthoritiesCertValuesSequence& s);

      //@}

      /**
       * @name AttributeRevocationValues
       *
       * @brief Accessor and modifier functions for the %AttributeRevocationValues
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::RevocationValuesType AttributeRevocationValuesType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< AttributeRevocationValuesType > AttributeRevocationValuesSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< AttributeRevocationValuesType >::iterator AttributeRevocationValuesIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< AttributeRevocationValuesType >::const_iterator AttributeRevocationValuesConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AttributeRevocationValuesType, char > AttributeRevocationValuesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const AttributeRevocationValuesSequence&
      attributeRevocationValues () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      AttributeRevocationValuesSequence&
      attributeRevocationValues ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      attributeRevocationValues (const AttributeRevocationValuesSequence& s);

      //@}

      /**
       * @name ArchiveTimeStamp
       *
       * @brief Accessor and modifier functions for the %ArchiveTimeStamp
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::XAdESTimeStampType ArchiveTimeStampType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ArchiveTimeStampType > ArchiveTimeStampSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< ArchiveTimeStampType >::iterator ArchiveTimeStampIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< ArchiveTimeStampType >::const_iterator ArchiveTimeStampConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ArchiveTimeStampType, char > ArchiveTimeStampTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ArchiveTimeStampSequence&
      archiveTimeStamp () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ArchiveTimeStampSequence&
      archiveTimeStamp ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      archiveTimeStamp (const ArchiveTimeStampSequence& s);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      UnsignedSignaturePropertiesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      UnsignedSignaturePropertiesType (const xercesc::DOMElement& e,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      UnsignedSignaturePropertiesType (const UnsignedSignaturePropertiesType& x,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual UnsignedSignaturePropertiesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~UnsignedSignaturePropertiesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      CounterSignatureSequence CounterSignature_;
      SignatureTimeStampSequence SignatureTimeStamp_;
      CompleteCertificateRefsSequence CompleteCertificateRefs_;
      CompleteRevocationRefsSequence CompleteRevocationRefs_;
      AttributeCertificateRefsSequence AttributeCertificateRefs_;
      AttributeRevocationRefsSequence AttributeRevocationRefs_;
      SigAndRefsTimeStampSequence SigAndRefsTimeStamp_;
      RefsOnlyTimeStampSequence RefsOnlyTimeStamp_;
      CertificateValuesSequence CertificateValues_;
      RevocationValuesSequence RevocationValues_;
      AttrAuthoritiesCertValuesSequence AttrAuthoritiesCertValues_;
      AttributeRevocationValuesSequence AttributeRevocationValues_;
      ArchiveTimeStampSequence ArchiveTimeStamp_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %UnsignedDataObjectPropertiesType schema type.
     *
     * @nosubgrouping
     */
    class UnsignedDataObjectPropertiesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name UnsignedDataObjectProperty
       *
       * @brief Accessor and modifier functions for the %UnsignedDataObjectProperty
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::AnyType UnsignedDataObjectPropertyType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< UnsignedDataObjectPropertyType > UnsignedDataObjectPropertySequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< UnsignedDataObjectPropertyType >::iterator UnsignedDataObjectPropertyIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< UnsignedDataObjectPropertyType >::const_iterator UnsignedDataObjectPropertyConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< UnsignedDataObjectPropertyType, char > UnsignedDataObjectPropertyTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const UnsignedDataObjectPropertySequence&
      unsignedDataObjectProperty () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      UnsignedDataObjectPropertySequence&
      unsignedDataObjectProperty ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      unsignedDataObjectProperty (const UnsignedDataObjectPropertySequence& s);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      UnsignedDataObjectPropertiesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      UnsignedDataObjectPropertiesType (const xercesc::DOMElement& e,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      UnsignedDataObjectPropertiesType (const UnsignedDataObjectPropertiesType& x,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual UnsignedDataObjectPropertiesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~UnsignedDataObjectPropertiesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      UnsignedDataObjectPropertySequence UnsignedDataObjectProperty_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %QualifyingPropertiesReferenceType schema type.
     *
     * @nosubgrouping
     */
    class QualifyingPropertiesReferenceType: public ::xml_schema::Type
    {
      public:
      /**
       * @name URI
       *
       * @brief Accessor and modifier functions for the %URI
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri URIType;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const URIType&
      uRI () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      URIType&
      uRI ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      uRI (const URIType& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      uRI (::std::auto_ptr< URIType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      QualifyingPropertiesReferenceType (const URIType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      QualifyingPropertiesReferenceType (const xercesc::DOMElement& e,
                                         ::xml_schema::Flags f = 0,
                                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      QualifyingPropertiesReferenceType (const QualifyingPropertiesReferenceType& x,
                                         ::xml_schema::Flags f = 0,
                                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual QualifyingPropertiesReferenceType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~QualifyingPropertiesReferenceType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< URIType > URI_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CertIDListType schema type.
     *
     * @nosubgrouping
     */
    class CertIDListType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Cert
       *
       * @brief Accessor and modifier functions for the %Cert
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CertIDType CertType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CertType > CertSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CertType >::iterator CertIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CertType >::const_iterator CertConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CertType, char > CertTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CertSequence&
      cert () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CertSequence&
      cert ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      cert (const CertSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CertIDListType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CertIDListType (const xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CertIDListType (const CertIDListType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CertIDListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CertIDListType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      CertSequence Cert_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CertIDType schema type.
     *
     * @nosubgrouping
     */
    class CertIDType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CertDigest
       *
       * @brief Accessor and modifier functions for the %CertDigest
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::DigestAlgAndValueType CertDigestType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CertDigestType, char > CertDigestTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const CertDigestType&
      certDigest () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      CertDigestType&
      certDigest ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      certDigest (const CertDigestType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      certDigest (::std::auto_ptr< CertDigestType > p);

      //@}

      /**
       * @name IssuerSerial
       *
       * @brief Accessor and modifier functions for the %IssuerSerial
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::X509IssuerSerialType IssuerSerialType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IssuerSerialType, char > IssuerSerialTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IssuerSerialType&
      issuerSerial () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IssuerSerialType&
      issuerSerial ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      issuerSerial (const IssuerSerialType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      issuerSerial (::std::auto_ptr< IssuerSerialType > p);

      //@}

      /**
       * @name URI
       *
       * @brief Accessor and modifier functions for the %URI
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri URIType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< URIType > URIOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const URIOptional&
      uRI () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      URIOptional&
      uRI ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      uRI (const URIType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      uRI (const URIOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      uRI (::std::auto_ptr< URIType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CertIDType (const CertDigestType&,
                  const IssuerSerialType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      CertIDType (::std::auto_ptr< CertDigestType >&,
                  ::std::auto_ptr< IssuerSerialType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CertIDType (const xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CertIDType (const CertIDType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CertIDType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CertIDType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< CertDigestType > CertDigest_;
      ::xsd::cxx::tree::one< IssuerSerialType > IssuerSerial_;
      URIOptional URI_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %DigestAlgAndValueType schema type.
     *
     * @nosubgrouping
     */
    class DigestAlgAndValueType: public ::xml_schema::Type
    {
      public:
      /**
       * @name DigestMethod
       *
       * @brief Accessor and modifier functions for the %DigestMethod
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::DigestMethodType DigestMethodType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DigestMethodType, char > DigestMethodTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const DigestMethodType&
      digestMethod () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      DigestMethodType&
      digestMethod ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      digestMethod (const DigestMethodType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      digestMethod (::std::auto_ptr< DigestMethodType > p);

      //@}

      /**
       * @name DigestValue
       *
       * @brief Accessor and modifier functions for the %DigestValue
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::DigestValueType DigestValueType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DigestValueType, char > DigestValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const DigestValueType&
      digestValue () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      DigestValueType&
      digestValue ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      digestValue (const DigestValueType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      digestValue (::std::auto_ptr< DigestValueType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      DigestAlgAndValueType (const DigestMethodType&,
                             const DigestValueType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      DigestAlgAndValueType (::std::auto_ptr< DigestMethodType >&,
                             const DigestValueType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DigestAlgAndValueType (const xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DigestAlgAndValueType (const DigestAlgAndValueType& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual DigestAlgAndValueType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~DigestAlgAndValueType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< DigestMethodType > DigestMethod_;
      ::xsd::cxx::tree::one< DigestValueType > DigestValue_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SignaturePolicyIdentifierType schema type.
     *
     * @nosubgrouping
     */
    class SignaturePolicyIdentifierType: public ::xml_schema::Type
    {
      public:
      /**
       * @name SignaturePolicyId
       *
       * @brief Accessor and modifier functions for the %SignaturePolicyId
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::SignaturePolicyIdType SignaturePolicyIdType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SignaturePolicyIdType > SignaturePolicyIdOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignaturePolicyIdType, char > SignaturePolicyIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SignaturePolicyIdOptional&
      signaturePolicyId () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SignaturePolicyIdOptional&
      signaturePolicyId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signaturePolicyId (const SignaturePolicyIdType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signaturePolicyId (const SignaturePolicyIdOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signaturePolicyId (::std::auto_ptr< SignaturePolicyIdType > p);

      //@}

      /**
       * @name SignaturePolicyImplied
       *
       * @brief Accessor and modifier functions for the %SignaturePolicyImplied
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Type SignaturePolicyImpliedType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SignaturePolicyImpliedType > SignaturePolicyImpliedOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignaturePolicyImpliedType, char > SignaturePolicyImpliedTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SignaturePolicyImpliedOptional&
      signaturePolicyImplied () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SignaturePolicyImpliedOptional&
      signaturePolicyImplied ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signaturePolicyImplied (const SignaturePolicyImpliedType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      signaturePolicyImplied (const SignaturePolicyImpliedOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signaturePolicyImplied (::std::auto_ptr< SignaturePolicyImpliedType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SignaturePolicyIdentifierType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SignaturePolicyIdentifierType (const xercesc::DOMElement& e,
                                     ::xml_schema::Flags f = 0,
                                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SignaturePolicyIdentifierType (const SignaturePolicyIdentifierType& x,
                                     ::xml_schema::Flags f = 0,
                                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SignaturePolicyIdentifierType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SignaturePolicyIdentifierType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      SignaturePolicyIdOptional SignaturePolicyId_;
      SignaturePolicyImpliedOptional SignaturePolicyImplied_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SignaturePolicyIdType schema type.
     *
     * @nosubgrouping
     */
    class SignaturePolicyIdType: public ::xml_schema::Type
    {
      public:
      /**
       * @name SigPolicyId
       *
       * @brief Accessor and modifier functions for the %SigPolicyId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::ObjectIdentifierType SigPolicyIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SigPolicyIdType, char > SigPolicyIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const SigPolicyIdType&
      sigPolicyId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      SigPolicyIdType&
      sigPolicyId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      sigPolicyId (const SigPolicyIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      sigPolicyId (::std::auto_ptr< SigPolicyIdType > p);

      //@}

      /**
       * @name Transforms
       *
       * @brief Accessor and modifier functions for the %Transforms
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::TransformsType TransformsType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< TransformsType > TransformsOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< TransformsType, char > TransformsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const TransformsOptional&
      transforms () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      TransformsOptional&
      transforms ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      transforms (const TransformsType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      transforms (const TransformsOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      transforms (::std::auto_ptr< TransformsType > p);

      //@}

      /**
       * @name SigPolicyHash
       *
       * @brief Accessor and modifier functions for the %SigPolicyHash
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::DigestAlgAndValueType SigPolicyHashType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SigPolicyHashType, char > SigPolicyHashTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const SigPolicyHashType&
      sigPolicyHash () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      SigPolicyHashType&
      sigPolicyHash ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      sigPolicyHash (const SigPolicyHashType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      sigPolicyHash (::std::auto_ptr< SigPolicyHashType > p);

      //@}

      /**
       * @name SigPolicyQualifiers
       *
       * @brief Accessor and modifier functions for the %SigPolicyQualifiers
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::SigPolicyQualifiersListType SigPolicyQualifiersType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SigPolicyQualifiersType > SigPolicyQualifiersOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SigPolicyQualifiersType, char > SigPolicyQualifiersTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SigPolicyQualifiersOptional&
      sigPolicyQualifiers () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SigPolicyQualifiersOptional&
      sigPolicyQualifiers ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      sigPolicyQualifiers (const SigPolicyQualifiersType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      sigPolicyQualifiers (const SigPolicyQualifiersOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      sigPolicyQualifiers (::std::auto_ptr< SigPolicyQualifiersType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SignaturePolicyIdType (const SigPolicyIdType&,
                             const SigPolicyHashType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      SignaturePolicyIdType (::std::auto_ptr< SigPolicyIdType >&,
                             ::std::auto_ptr< SigPolicyHashType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SignaturePolicyIdType (const xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SignaturePolicyIdType (const SignaturePolicyIdType& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SignaturePolicyIdType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SignaturePolicyIdType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< SigPolicyIdType > SigPolicyId_;
      TransformsOptional Transforms_;
      ::xsd::cxx::tree::one< SigPolicyHashType > SigPolicyHash_;
      SigPolicyQualifiersOptional SigPolicyQualifiers_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SigPolicyQualifiersListType schema type.
     *
     * @nosubgrouping
     */
    class SigPolicyQualifiersListType: public ::xml_schema::Type
    {
      public:
      /**
       * @name SigPolicyQualifier
       *
       * @brief Accessor and modifier functions for the %SigPolicyQualifier
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::AnyType SigPolicyQualifierType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< SigPolicyQualifierType > SigPolicyQualifierSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< SigPolicyQualifierType >::iterator SigPolicyQualifierIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< SigPolicyQualifierType >::const_iterator SigPolicyQualifierConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SigPolicyQualifierType, char > SigPolicyQualifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const SigPolicyQualifierSequence&
      sigPolicyQualifier () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      SigPolicyQualifierSequence&
      sigPolicyQualifier ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      sigPolicyQualifier (const SigPolicyQualifierSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SigPolicyQualifiersListType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SigPolicyQualifiersListType (const xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SigPolicyQualifiersListType (const SigPolicyQualifiersListType& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SigPolicyQualifiersListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SigPolicyQualifiersListType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      SigPolicyQualifierSequence SigPolicyQualifier_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SPUserNoticeType schema type.
     *
     * @nosubgrouping
     */
    class SPUserNoticeType: public ::xml_schema::Type
    {
      public:
      /**
       * @name NoticeRef
       *
       * @brief Accessor and modifier functions for the %NoticeRef
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::NoticeReferenceType NoticeRefType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< NoticeRefType > NoticeRefOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< NoticeRefType, char > NoticeRefTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const NoticeRefOptional&
      noticeRef () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      NoticeRefOptional&
      noticeRef ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      noticeRef (const NoticeRefType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      noticeRef (const NoticeRefOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      noticeRef (::std::auto_ptr< NoticeRefType > p);

      //@}

      /**
       * @name ExplicitText
       *
       * @brief Accessor and modifier functions for the %ExplicitText
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String ExplicitTextType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ExplicitTextType > ExplicitTextOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ExplicitTextType, char > ExplicitTextTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ExplicitTextOptional&
      explicitText () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ExplicitTextOptional&
      explicitText ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      explicitText (const ExplicitTextType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      explicitText (const ExplicitTextOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      explicitText (::std::auto_ptr< ExplicitTextType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SPUserNoticeType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SPUserNoticeType (const xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SPUserNoticeType (const SPUserNoticeType& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SPUserNoticeType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SPUserNoticeType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      NoticeRefOptional NoticeRef_;
      ExplicitTextOptional ExplicitText_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %NoticeReferenceType schema type.
     *
     * @nosubgrouping
     */
    class NoticeReferenceType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Organization
       *
       * @brief Accessor and modifier functions for the %Organization
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String OrganizationType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OrganizationType, char > OrganizationTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const OrganizationType&
      organization () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      OrganizationType&
      organization ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      organization (const OrganizationType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      organization (::std::auto_ptr< OrganizationType > p);

      //@}

      /**
       * @name NoticeNumbers
       *
       * @brief Accessor and modifier functions for the %NoticeNumbers
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::IntegerListType NoticeNumbersType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< NoticeNumbersType, char > NoticeNumbersTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const NoticeNumbersType&
      noticeNumbers () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      NoticeNumbersType&
      noticeNumbers ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      noticeNumbers (const NoticeNumbersType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      noticeNumbers (::std::auto_ptr< NoticeNumbersType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      NoticeReferenceType (const OrganizationType&,
                           const NoticeNumbersType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      NoticeReferenceType (const OrganizationType&,
                           ::std::auto_ptr< NoticeNumbersType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      NoticeReferenceType (const xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      NoticeReferenceType (const NoticeReferenceType& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual NoticeReferenceType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~NoticeReferenceType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< OrganizationType > Organization_;
      ::xsd::cxx::tree::one< NoticeNumbersType > NoticeNumbers_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %IntegerListType schema type.
     *
     * @nosubgrouping
     */
    class IntegerListType: public ::xml_schema::Type
    {
      public:
      /**
       * @name int
       *
       * @brief Accessor and modifier functions for the %int
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Integer IntType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< IntType > IntSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< IntType >::iterator IntIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< IntType >::const_iterator IntConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IntType, char > IntTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const IntSequence&
      int_ () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      IntSequence&
      int_ ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      int_ (const IntSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IntegerListType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IntegerListType (const xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IntegerListType (const IntegerListType& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IntegerListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IntegerListType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IntSequence int__;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CounterSignatureType schema type.
     *
     * @nosubgrouping
     */
    class CounterSignatureType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Signature
       *
       * @brief Accessor and modifier functions for the %Signature
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::dsig::SignatureType SignatureType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SignatureType, char > SignatureTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const SignatureType&
      signature () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      SignatureType&
      signature ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      signature (const SignatureType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      signature (::std::auto_ptr< SignatureType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CounterSignatureType (const SignatureType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      CounterSignatureType (::std::auto_ptr< SignatureType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CounterSignatureType (const xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CounterSignatureType (const CounterSignatureType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CounterSignatureType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CounterSignatureType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< SignatureType > Signature_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %DataObjectFormatType schema type.
     *
     * @nosubgrouping
     */
    class DataObjectFormatType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Description
       *
       * @brief Accessor and modifier functions for the %Description
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String DescriptionType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const DescriptionOptional&
      description () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      DescriptionOptional&
      description ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      description (const DescriptionType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      description (const DescriptionOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      description (::std::auto_ptr< DescriptionType > p);

      //@}

      /**
       * @name ObjectIdentifier
       *
       * @brief Accessor and modifier functions for the %ObjectIdentifier
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::ObjectIdentifierType ObjectIdentifierType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ObjectIdentifierType > ObjectIdentifierOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ObjectIdentifierType, char > ObjectIdentifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ObjectIdentifierOptional&
      objectIdentifier () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ObjectIdentifierOptional&
      objectIdentifier ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      objectIdentifier (const ObjectIdentifierType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      objectIdentifier (const ObjectIdentifierOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      objectIdentifier (::std::auto_ptr< ObjectIdentifierType > p);

      //@}

      /**
       * @name MimeType
       *
       * @brief Accessor and modifier functions for the %MimeType
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String MimeTypeType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< MimeTypeType > MimeTypeOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< MimeTypeType, char > MimeTypeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const MimeTypeOptional&
      mimeType () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      MimeTypeOptional&
      mimeType ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      mimeType (const MimeTypeType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      mimeType (const MimeTypeOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      mimeType (::std::auto_ptr< MimeTypeType > p);

      //@}

      /**
       * @name Encoding
       *
       * @brief Accessor and modifier functions for the %Encoding
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Uri EncodingType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< EncodingType > EncodingOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EncodingType, char > EncodingTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const EncodingOptional&
      encoding () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      EncodingOptional&
      encoding ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      encoding (const EncodingType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      encoding (const EncodingOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      encoding (::std::auto_ptr< EncodingType > p);

      //@}

      /**
       * @name ObjectReference
       *
       * @brief Accessor and modifier functions for the %ObjectReference
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri ObjectReferenceType;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< ObjectReferenceType, char > ObjectReferenceTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const ObjectReferenceType&
      objectReference () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      ObjectReferenceType&
      objectReference ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      objectReference (const ObjectReferenceType& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      objectReference (::std::auto_ptr< ObjectReferenceType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      DataObjectFormatType (const ObjectReferenceType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DataObjectFormatType (const xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DataObjectFormatType (const DataObjectFormatType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual DataObjectFormatType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~DataObjectFormatType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      DescriptionOptional Description_;
      ObjectIdentifierOptional ObjectIdentifier_;
      MimeTypeOptional MimeType_;
      EncodingOptional Encoding_;
      ::xsd::cxx::tree::one< ObjectReferenceType > ObjectReference_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CommitmentTypeIndicationType schema type.
     *
     * @nosubgrouping
     */
    class CommitmentTypeIndicationType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CommitmentTypeId
       *
       * @brief Accessor and modifier functions for the %CommitmentTypeId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::ObjectIdentifierType CommitmentTypeIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CommitmentTypeIdType, char > CommitmentTypeIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const CommitmentTypeIdType&
      commitmentTypeId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      CommitmentTypeIdType&
      commitmentTypeId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      commitmentTypeId (const CommitmentTypeIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      commitmentTypeId (::std::auto_ptr< CommitmentTypeIdType > p);

      //@}

      /**
       * @name ObjectReference
       *
       * @brief Accessor and modifier functions for the %ObjectReference
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Uri ObjectReferenceType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ObjectReferenceType > ObjectReferenceSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< ObjectReferenceType >::iterator ObjectReferenceIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< ObjectReferenceType >::const_iterator ObjectReferenceConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ObjectReferenceType, char > ObjectReferenceTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ObjectReferenceSequence&
      objectReference () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ObjectReferenceSequence&
      objectReference ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      objectReference (const ObjectReferenceSequence& s);

      //@}

      /**
       * @name AllSignedDataObjects
       *
       * @brief Accessor and modifier functions for the %AllSignedDataObjects
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Type AllSignedDataObjectsType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< AllSignedDataObjectsType > AllSignedDataObjectsOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AllSignedDataObjectsType, char > AllSignedDataObjectsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const AllSignedDataObjectsOptional&
      allSignedDataObjects () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      AllSignedDataObjectsOptional&
      allSignedDataObjects ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      allSignedDataObjects (const AllSignedDataObjectsType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      allSignedDataObjects (const AllSignedDataObjectsOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      allSignedDataObjects (::std::auto_ptr< AllSignedDataObjectsType > p);

      //@}

      /**
       * @name CommitmentTypeQualifiers
       *
       * @brief Accessor and modifier functions for the %CommitmentTypeQualifiers
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CommitmentTypeQualifiersListType CommitmentTypeQualifiersType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CommitmentTypeQualifiersType > CommitmentTypeQualifiersOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CommitmentTypeQualifiersType, char > CommitmentTypeQualifiersTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CommitmentTypeQualifiersOptional&
      commitmentTypeQualifiers () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CommitmentTypeQualifiersOptional&
      commitmentTypeQualifiers ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      commitmentTypeQualifiers (const CommitmentTypeQualifiersType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      commitmentTypeQualifiers (const CommitmentTypeQualifiersOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      commitmentTypeQualifiers (::std::auto_ptr< CommitmentTypeQualifiersType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CommitmentTypeIndicationType (const CommitmentTypeIdType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      CommitmentTypeIndicationType (::std::auto_ptr< CommitmentTypeIdType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CommitmentTypeIndicationType (const xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CommitmentTypeIndicationType (const CommitmentTypeIndicationType& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CommitmentTypeIndicationType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CommitmentTypeIndicationType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< CommitmentTypeIdType > CommitmentTypeId_;
      ObjectReferenceSequence ObjectReference_;
      AllSignedDataObjectsOptional AllSignedDataObjects_;
      CommitmentTypeQualifiersOptional CommitmentTypeQualifiers_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CommitmentTypeQualifiersListType schema type.
     *
     * @nosubgrouping
     */
    class CommitmentTypeQualifiersListType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CommitmentTypeQualifier
       *
       * @brief Accessor and modifier functions for the %CommitmentTypeQualifier
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::AnyType CommitmentTypeQualifierType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CommitmentTypeQualifierType > CommitmentTypeQualifierSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CommitmentTypeQualifierType >::iterator CommitmentTypeQualifierIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CommitmentTypeQualifierType >::const_iterator CommitmentTypeQualifierConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CommitmentTypeQualifierType, char > CommitmentTypeQualifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CommitmentTypeQualifierSequence&
      commitmentTypeQualifier () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CommitmentTypeQualifierSequence&
      commitmentTypeQualifier ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      commitmentTypeQualifier (const CommitmentTypeQualifierSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CommitmentTypeQualifiersListType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CommitmentTypeQualifiersListType (const xercesc::DOMElement& e,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CommitmentTypeQualifiersListType (const CommitmentTypeQualifiersListType& x,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CommitmentTypeQualifiersListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CommitmentTypeQualifiersListType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      CommitmentTypeQualifierSequence CommitmentTypeQualifier_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SignatureProductionPlaceType schema type.
     *
     * @nosubgrouping
     */
    class SignatureProductionPlaceType: public ::xml_schema::Type
    {
      public:
      /**
       * @name City
       *
       * @brief Accessor and modifier functions for the %City
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String CityType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CityType > CityOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CityType, char > CityTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CityOptional&
      city () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CityOptional&
      city ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      city (const CityType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      city (const CityOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      city (::std::auto_ptr< CityType > p);

      //@}

      /**
       * @name StateOrProvince
       *
       * @brief Accessor and modifier functions for the %StateOrProvince
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String StateOrProvinceType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< StateOrProvinceType > StateOrProvinceOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< StateOrProvinceType, char > StateOrProvinceTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const StateOrProvinceOptional&
      stateOrProvince () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      StateOrProvinceOptional&
      stateOrProvince ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      stateOrProvince (const StateOrProvinceType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      stateOrProvince (const StateOrProvinceOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      stateOrProvince (::std::auto_ptr< StateOrProvinceType > p);

      //@}

      /**
       * @name PostalCode
       *
       * @brief Accessor and modifier functions for the %PostalCode
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String PostalCodeType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< PostalCodeType > PostalCodeOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< PostalCodeType, char > PostalCodeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const PostalCodeOptional&
      postalCode () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      PostalCodeOptional&
      postalCode ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      postalCode (const PostalCodeType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      postalCode (const PostalCodeOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      postalCode (::std::auto_ptr< PostalCodeType > p);

      //@}

      /**
       * @name CountryName
       *
       * @brief Accessor and modifier functions for the %CountryName
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String CountryNameType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CountryNameType > CountryNameOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CountryNameType, char > CountryNameTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CountryNameOptional&
      countryName () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CountryNameOptional&
      countryName ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      countryName (const CountryNameType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      countryName (const CountryNameOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      countryName (::std::auto_ptr< CountryNameType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SignatureProductionPlaceType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SignatureProductionPlaceType (const xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SignatureProductionPlaceType (const SignatureProductionPlaceType& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SignatureProductionPlaceType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SignatureProductionPlaceType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      CityOptional City_;
      StateOrProvinceOptional StateOrProvince_;
      PostalCodeOptional PostalCode_;
      CountryNameOptional CountryName_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SignerRoleType schema type.
     *
     * @nosubgrouping
     */
    class SignerRoleType: public ::xml_schema::Type
    {
      public:
      /**
       * @name ClaimedRoles
       *
       * @brief Accessor and modifier functions for the %ClaimedRoles
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::ClaimedRolesListType ClaimedRolesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ClaimedRolesType > ClaimedRolesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ClaimedRolesType, char > ClaimedRolesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ClaimedRolesOptional&
      claimedRoles () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ClaimedRolesOptional&
      claimedRoles ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      claimedRoles (const ClaimedRolesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      claimedRoles (const ClaimedRolesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      claimedRoles (::std::auto_ptr< ClaimedRolesType > p);

      //@}

      /**
       * @name CertifiedRoles
       *
       * @brief Accessor and modifier functions for the %CertifiedRoles
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CertifiedRolesListType CertifiedRolesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CertifiedRolesType > CertifiedRolesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CertifiedRolesType, char > CertifiedRolesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CertifiedRolesOptional&
      certifiedRoles () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CertifiedRolesOptional&
      certifiedRoles ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      certifiedRoles (const CertifiedRolesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      certifiedRoles (const CertifiedRolesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      certifiedRoles (::std::auto_ptr< CertifiedRolesType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SignerRoleType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SignerRoleType (const xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SignerRoleType (const SignerRoleType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SignerRoleType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SignerRoleType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ClaimedRolesOptional ClaimedRoles_;
      CertifiedRolesOptional CertifiedRoles_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ClaimedRolesListType schema type.
     *
     * @nosubgrouping
     */
    class ClaimedRolesListType: public ::xml_schema::Type
    {
      public:
      /**
       * @name ClaimedRole
       *
       * @brief Accessor and modifier functions for the %ClaimedRole
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String ClaimedRoleType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ClaimedRoleType > ClaimedRoleSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< ClaimedRoleType >::iterator ClaimedRoleIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< ClaimedRoleType >::const_iterator ClaimedRoleConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ClaimedRoleType, char > ClaimedRoleTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ClaimedRoleSequence&
      claimedRole () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ClaimedRoleSequence&
      claimedRole ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      claimedRole (const ClaimedRoleSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ClaimedRolesListType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ClaimedRolesListType (const xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ClaimedRolesListType (const ClaimedRolesListType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ClaimedRolesListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ClaimedRolesListType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ClaimedRoleSequence ClaimedRole_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CertifiedRolesListType schema type.
     *
     * @nosubgrouping
     */
    class CertifiedRolesListType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CertifiedRole
       *
       * @brief Accessor and modifier functions for the %CertifiedRole
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::EncapsulatedPKIDataType CertifiedRoleType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CertifiedRoleType > CertifiedRoleSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CertifiedRoleType >::iterator CertifiedRoleIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CertifiedRoleType >::const_iterator CertifiedRoleConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CertifiedRoleType, char > CertifiedRoleTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CertifiedRoleSequence&
      certifiedRole () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CertifiedRoleSequence&
      certifiedRole ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      certifiedRole (const CertifiedRoleSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CertifiedRolesListType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CertifiedRolesListType (const xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CertifiedRolesListType (const CertifiedRolesListType& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CertifiedRolesListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CertifiedRolesListType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      CertifiedRoleSequence CertifiedRole_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CompleteCertificateRefsType schema type.
     *
     * @nosubgrouping
     */
    class CompleteCertificateRefsType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CertRefs
       *
       * @brief Accessor and modifier functions for the %CertRefs
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CertIDListType CertRefsType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CertRefsType, char > CertRefsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const CertRefsType&
      certRefs () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      CertRefsType&
      certRefs ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      certRefs (const CertRefsType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      certRefs (::std::auto_ptr< CertRefsType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CompleteCertificateRefsType (const CertRefsType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      CompleteCertificateRefsType (::std::auto_ptr< CertRefsType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CompleteCertificateRefsType (const xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CompleteCertificateRefsType (const CompleteCertificateRefsType& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CompleteCertificateRefsType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CompleteCertificateRefsType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< CertRefsType > CertRefs_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CompleteRevocationRefsType schema type.
     *
     * @nosubgrouping
     */
    class CompleteRevocationRefsType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CRLRefs
       *
       * @brief Accessor and modifier functions for the %CRLRefs
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CRLRefsType CRLRefsType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CRLRefsType > CRLRefsOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CRLRefsType, char > CRLRefsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CRLRefsOptional&
      cRLRefs () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CRLRefsOptional&
      cRLRefs ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      cRLRefs (const CRLRefsType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      cRLRefs (const CRLRefsOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      cRLRefs (::std::auto_ptr< CRLRefsType > p);

      //@}

      /**
       * @name OCSPRefs
       *
       * @brief Accessor and modifier functions for the %OCSPRefs
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::OCSPRefsType OCSPRefsType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< OCSPRefsType > OCSPRefsOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OCSPRefsType, char > OCSPRefsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const OCSPRefsOptional&
      oCSPRefs () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      OCSPRefsOptional&
      oCSPRefs ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      oCSPRefs (const OCSPRefsType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      oCSPRefs (const OCSPRefsOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      oCSPRefs (::std::auto_ptr< OCSPRefsType > p);

      //@}

      /**
       * @name OtherRefs
       *
       * @brief Accessor and modifier functions for the %OtherRefs
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::OtherCertStatusRefsType OtherRefsType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< OtherRefsType > OtherRefsOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OtherRefsType, char > OtherRefsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const OtherRefsOptional&
      otherRefs () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      OtherRefsOptional&
      otherRefs ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      otherRefs (const OtherRefsType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      otherRefs (const OtherRefsOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      otherRefs (::std::auto_ptr< OtherRefsType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CompleteRevocationRefsType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CompleteRevocationRefsType (const xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CompleteRevocationRefsType (const CompleteRevocationRefsType& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CompleteRevocationRefsType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CompleteRevocationRefsType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      CRLRefsOptional CRLRefs_;
      OCSPRefsOptional OCSPRefs_;
      OtherRefsOptional OtherRefs_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CRLRefsType schema type.
     *
     * @nosubgrouping
     */
    class CRLRefsType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CRLRef
       *
       * @brief Accessor and modifier functions for the %CRLRef
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CRLRefType CRLRefType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< CRLRefType > CRLRefSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< CRLRefType >::iterator CRLRefIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< CRLRefType >::const_iterator CRLRefConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CRLRefType, char > CRLRefTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const CRLRefSequence&
      cRLRef () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      CRLRefSequence&
      cRLRef ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      cRLRef (const CRLRefSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CRLRefsType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CRLRefsType (const xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CRLRefsType (const CRLRefsType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CRLRefsType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CRLRefsType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      CRLRefSequence CRLRef_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CRLRefType schema type.
     *
     * @nosubgrouping
     */
    class CRLRefType: public ::xml_schema::Type
    {
      public:
      /**
       * @name DigestAlgAndValue
       *
       * @brief Accessor and modifier functions for the %DigestAlgAndValue
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::DigestAlgAndValueType DigestAlgAndValueType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DigestAlgAndValueType, char > DigestAlgAndValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const DigestAlgAndValueType&
      digestAlgAndValue () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      DigestAlgAndValueType&
      digestAlgAndValue ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      digestAlgAndValue (const DigestAlgAndValueType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      digestAlgAndValue (::std::auto_ptr< DigestAlgAndValueType > p);

      //@}

      /**
       * @name CRLIdentifier
       *
       * @brief Accessor and modifier functions for the %CRLIdentifier
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CRLIdentifierType CRLIdentifierType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CRLIdentifierType > CRLIdentifierOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CRLIdentifierType, char > CRLIdentifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CRLIdentifierOptional&
      cRLIdentifier () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CRLIdentifierOptional&
      cRLIdentifier ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      cRLIdentifier (const CRLIdentifierType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      cRLIdentifier (const CRLIdentifierOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      cRLIdentifier (::std::auto_ptr< CRLIdentifierType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CRLRefType (const DigestAlgAndValueType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      CRLRefType (::std::auto_ptr< DigestAlgAndValueType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CRLRefType (const xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CRLRefType (const CRLRefType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CRLRefType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CRLRefType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< DigestAlgAndValueType > DigestAlgAndValue_;
      CRLIdentifierOptional CRLIdentifier_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CRLIdentifierType schema type.
     *
     * @nosubgrouping
     */
    class CRLIdentifierType: public ::xml_schema::Type
    {
      public:
      /**
       * @name Issuer
       *
       * @brief Accessor and modifier functions for the %Issuer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IssuerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IssuerType, char > IssuerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IssuerType&
      issuer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IssuerType&
      issuer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      issuer (const IssuerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      issuer (::std::auto_ptr< IssuerType > p);

      //@}

      /**
       * @name IssueTime
       *
       * @brief Accessor and modifier functions for the %IssueTime
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::DateTime IssueTimeType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IssueTimeType, char > IssueTimeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IssueTimeType&
      issueTime () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IssueTimeType&
      issueTime ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      issueTime (const IssueTimeType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      issueTime (::std::auto_ptr< IssueTimeType > p);

      //@}

      /**
       * @name Number
       *
       * @brief Accessor and modifier functions for the %Number
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Integer NumberType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< NumberType > NumberOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< NumberType, char > NumberTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const NumberOptional&
      number () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      NumberOptional&
      number ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      number (const NumberType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      number (const NumberOptional& x);

      //@}

      /**
       * @name URI
       *
       * @brief Accessor and modifier functions for the %URI
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri URIType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< URIType > URIOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const URIOptional&
      uRI () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      URIOptional&
      uRI ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      uRI (const URIType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      uRI (const URIOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      uRI (::std::auto_ptr< URIType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CRLIdentifierType (const IssuerType&,
                         const IssueTimeType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CRLIdentifierType (const xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CRLIdentifierType (const CRLIdentifierType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CRLIdentifierType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CRLIdentifierType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IssuerType > Issuer_;
      ::xsd::cxx::tree::one< IssueTimeType > IssueTime_;
      NumberOptional Number_;
      URIOptional URI_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %OCSPRefsType schema type.
     *
     * @nosubgrouping
     */
    class OCSPRefsType: public ::xml_schema::Type
    {
      public:
      /**
       * @name OCSPRef
       *
       * @brief Accessor and modifier functions for the %OCSPRef
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::OCSPRefType OCSPRefType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< OCSPRefType > OCSPRefSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< OCSPRefType >::iterator OCSPRefIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< OCSPRefType >::const_iterator OCSPRefConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OCSPRefType, char > OCSPRefTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const OCSPRefSequence&
      oCSPRef () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      OCSPRefSequence&
      oCSPRef ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      oCSPRef (const OCSPRefSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      OCSPRefsType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      OCSPRefsType (const xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      OCSPRefsType (const OCSPRefsType& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual OCSPRefsType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~OCSPRefsType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      OCSPRefSequence OCSPRef_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %OCSPRefType schema type.
     *
     * @nosubgrouping
     */
    class OCSPRefType: public ::xml_schema::Type
    {
      public:
      /**
       * @name OCSPIdentifier
       *
       * @brief Accessor and modifier functions for the %OCSPIdentifier
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::OCSPIdentifierType OCSPIdentifierType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OCSPIdentifierType, char > OCSPIdentifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const OCSPIdentifierType&
      oCSPIdentifier () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      OCSPIdentifierType&
      oCSPIdentifier ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      oCSPIdentifier (const OCSPIdentifierType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      oCSPIdentifier (::std::auto_ptr< OCSPIdentifierType > p);

      //@}

      /**
       * @name DigestAlgAndValue
       *
       * @brief Accessor and modifier functions for the %DigestAlgAndValue
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::DigestAlgAndValueType DigestAlgAndValueType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< DigestAlgAndValueType > DigestAlgAndValueOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DigestAlgAndValueType, char > DigestAlgAndValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const DigestAlgAndValueOptional&
      digestAlgAndValue () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      DigestAlgAndValueOptional&
      digestAlgAndValue ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      digestAlgAndValue (const DigestAlgAndValueType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      digestAlgAndValue (const DigestAlgAndValueOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      digestAlgAndValue (::std::auto_ptr< DigestAlgAndValueType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      OCSPRefType (const OCSPIdentifierType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      OCSPRefType (::std::auto_ptr< OCSPIdentifierType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      OCSPRefType (const xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      OCSPRefType (const OCSPRefType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual OCSPRefType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~OCSPRefType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< OCSPIdentifierType > OCSPIdentifier_;
      DigestAlgAndValueOptional DigestAlgAndValue_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ResponderIDType schema type.
     *
     * @nosubgrouping
     */
    class ResponderIDType: public ::xml_schema::Type
    {
      public:
      /**
       * @name ByName
       *
       * @brief Accessor and modifier functions for the %ByName
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String ByNameType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ByNameType > ByNameOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ByNameType, char > ByNameTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ByNameOptional&
      byName () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ByNameOptional&
      byName ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      byName (const ByNameType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      byName (const ByNameOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      byName (::std::auto_ptr< ByNameType > p);

      //@}

      /**
       * @name ByKey
       *
       * @brief Accessor and modifier functions for the %ByKey
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Base64Binary ByKeyType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ByKeyType > ByKeyOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ByKeyType, char > ByKeyTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ByKeyOptional&
      byKey () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ByKeyOptional&
      byKey ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      byKey (const ByKeyType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      byKey (const ByKeyOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      byKey (::std::auto_ptr< ByKeyType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ResponderIDType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ResponderIDType (const xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ResponderIDType (const ResponderIDType& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ResponderIDType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ResponderIDType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ByNameOptional ByName_;
      ByKeyOptional ByKey_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %OCSPIdentifierType schema type.
     *
     * @nosubgrouping
     */
    class OCSPIdentifierType: public ::xml_schema::Type
    {
      public:
      /**
       * @name ResponderID
       *
       * @brief Accessor and modifier functions for the %ResponderID
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::ResponderIDType ResponderIDType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ResponderIDType, char > ResponderIDTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ResponderIDType&
      responderID () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ResponderIDType&
      responderID ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      responderID (const ResponderIDType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      responderID (::std::auto_ptr< ResponderIDType > p);

      //@}

      /**
       * @name ProducedAt
       *
       * @brief Accessor and modifier functions for the %ProducedAt
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::DateTime ProducedAtType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ProducedAtType, char > ProducedAtTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ProducedAtType&
      producedAt () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ProducedAtType&
      producedAt ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      producedAt (const ProducedAtType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      producedAt (::std::auto_ptr< ProducedAtType > p);

      //@}

      /**
       * @name URI
       *
       * @brief Accessor and modifier functions for the %URI
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri URIType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< URIType > URIOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const URIOptional&
      uRI () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      URIOptional&
      uRI ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      uRI (const URIType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      uRI (const URIOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      uRI (::std::auto_ptr< URIType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      OCSPIdentifierType (const ResponderIDType&,
                          const ProducedAtType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      OCSPIdentifierType (::std::auto_ptr< ResponderIDType >&,
                          const ProducedAtType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      OCSPIdentifierType (const xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      OCSPIdentifierType (const OCSPIdentifierType& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual OCSPIdentifierType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~OCSPIdentifierType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< ResponderIDType > ResponderID_;
      ::xsd::cxx::tree::one< ProducedAtType > ProducedAt_;
      URIOptional URI_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %OtherCertStatusRefsType schema type.
     *
     * @nosubgrouping
     */
    class OtherCertStatusRefsType: public ::xml_schema::Type
    {
      public:
      /**
       * @name OtherRef
       *
       * @brief Accessor and modifier functions for the %OtherRef
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::AnyType OtherRefType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< OtherRefType > OtherRefSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< OtherRefType >::iterator OtherRefIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< OtherRefType >::const_iterator OtherRefConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OtherRefType, char > OtherRefTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const OtherRefSequence&
      otherRef () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      OtherRefSequence&
      otherRef ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      otherRef (const OtherRefSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      OtherCertStatusRefsType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      OtherCertStatusRefsType (const xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      OtherCertStatusRefsType (const OtherCertStatusRefsType& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual OtherCertStatusRefsType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~OtherCertStatusRefsType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      OtherRefSequence OtherRef_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CertificateValuesType schema type.
     *
     * @nosubgrouping
     */
    class CertificateValuesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name EncapsulatedX509Certificate
       *
       * @brief Accessor and modifier functions for the %EncapsulatedX509Certificate
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::EncapsulatedPKIDataType EncapsulatedX509CertificateType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< EncapsulatedX509CertificateType > EncapsulatedX509CertificateSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedX509CertificateType >::iterator EncapsulatedX509CertificateIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedX509CertificateType >::const_iterator EncapsulatedX509CertificateConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EncapsulatedX509CertificateType, char > EncapsulatedX509CertificateTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const EncapsulatedX509CertificateSequence&
      encapsulatedX509Certificate () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      EncapsulatedX509CertificateSequence&
      encapsulatedX509Certificate ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      encapsulatedX509Certificate (const EncapsulatedX509CertificateSequence& s);

      //@}

      /**
       * @name OtherCertificate
       *
       * @brief Accessor and modifier functions for the %OtherCertificate
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::AnyType OtherCertificateType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< OtherCertificateType > OtherCertificateSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< OtherCertificateType >::iterator OtherCertificateIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< OtherCertificateType >::const_iterator OtherCertificateConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OtherCertificateType, char > OtherCertificateTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const OtherCertificateSequence&
      otherCertificate () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      OtherCertificateSequence&
      otherCertificate ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      otherCertificate (const OtherCertificateSequence& s);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CertificateValuesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CertificateValuesType (const xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CertificateValuesType (const CertificateValuesType& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CertificateValuesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CertificateValuesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      EncapsulatedX509CertificateSequence EncapsulatedX509Certificate_;
      OtherCertificateSequence OtherCertificate_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %RevocationValuesType schema type.
     *
     * @nosubgrouping
     */
    class RevocationValuesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name CRLValues
       *
       * @brief Accessor and modifier functions for the %CRLValues
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::CRLValuesType CRLValuesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< CRLValuesType > CRLValuesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CRLValuesType, char > CRLValuesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const CRLValuesOptional&
      cRLValues () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      CRLValuesOptional&
      cRLValues ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      cRLValues (const CRLValuesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      cRLValues (const CRLValuesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      cRLValues (::std::auto_ptr< CRLValuesType > p);

      //@}

      /**
       * @name OCSPValues
       *
       * @brief Accessor and modifier functions for the %OCSPValues
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::OCSPValuesType OCSPValuesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< OCSPValuesType > OCSPValuesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OCSPValuesType, char > OCSPValuesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const OCSPValuesOptional&
      oCSPValues () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      OCSPValuesOptional&
      oCSPValues ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      oCSPValues (const OCSPValuesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      oCSPValues (const OCSPValuesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      oCSPValues (::std::auto_ptr< OCSPValuesType > p);

      //@}

      /**
       * @name OtherValues
       *
       * @brief Accessor and modifier functions for the %OtherValues
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::OtherCertStatusValuesType OtherValuesType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< OtherValuesType > OtherValuesOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OtherValuesType, char > OtherValuesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const OtherValuesOptional&
      otherValues () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      OtherValuesOptional&
      otherValues ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      otherValues (const OtherValuesType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      otherValues (const OtherValuesOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      otherValues (::std::auto_ptr< OtherValuesType > p);

      //@}

      /**
       * @name Id
       *
       * @brief Accessor and modifier functions for the %Id
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Id IdType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdOptional&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdOptional&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      id (const IdOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      id (::std::auto_ptr< IdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      RevocationValuesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      RevocationValuesType (const xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      RevocationValuesType (const RevocationValuesType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual RevocationValuesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~RevocationValuesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      CRLValuesOptional CRLValues_;
      OCSPValuesOptional OCSPValues_;
      OtherValuesOptional OtherValues_;
      IdOptional Id_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %CRLValuesType schema type.
     *
     * @nosubgrouping
     */
    class CRLValuesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name EncapsulatedCRLValue
       *
       * @brief Accessor and modifier functions for the %EncapsulatedCRLValue
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::EncapsulatedPKIDataType EncapsulatedCRLValueType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< EncapsulatedCRLValueType > EncapsulatedCRLValueSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedCRLValueType >::iterator EncapsulatedCRLValueIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedCRLValueType >::const_iterator EncapsulatedCRLValueConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EncapsulatedCRLValueType, char > EncapsulatedCRLValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const EncapsulatedCRLValueSequence&
      encapsulatedCRLValue () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      EncapsulatedCRLValueSequence&
      encapsulatedCRLValue ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      encapsulatedCRLValue (const EncapsulatedCRLValueSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CRLValuesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CRLValuesType (const xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CRLValuesType (const CRLValuesType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CRLValuesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CRLValuesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      EncapsulatedCRLValueSequence EncapsulatedCRLValue_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %OCSPValuesType schema type.
     *
     * @nosubgrouping
     */
    class OCSPValuesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name EncapsulatedOCSPValue
       *
       * @brief Accessor and modifier functions for the %EncapsulatedOCSPValue
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::EncapsulatedPKIDataType EncapsulatedOCSPValueType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< EncapsulatedOCSPValueType > EncapsulatedOCSPValueSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedOCSPValueType >::iterator EncapsulatedOCSPValueIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< EncapsulatedOCSPValueType >::const_iterator EncapsulatedOCSPValueConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EncapsulatedOCSPValueType, char > EncapsulatedOCSPValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const EncapsulatedOCSPValueSequence&
      encapsulatedOCSPValue () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      EncapsulatedOCSPValueSequence&
      encapsulatedOCSPValue ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      encapsulatedOCSPValue (const EncapsulatedOCSPValueSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      OCSPValuesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      OCSPValuesType (const xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      OCSPValuesType (const OCSPValuesType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual OCSPValuesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~OCSPValuesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      EncapsulatedOCSPValueSequence EncapsulatedOCSPValue_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %OtherCertStatusValuesType schema type.
     *
     * @nosubgrouping
     */
    class OtherCertStatusValuesType: public ::xml_schema::Type
    {
      public:
      /**
       * @name OtherValue
       *
       * @brief Accessor and modifier functions for the %OtherValue
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::digidoc::xades::AnyType OtherValueType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< OtherValueType > OtherValueSequence;

      /**
       * @brief Element iterator type.
       */
      typedef xsd::cxx::tree::sequence< OtherValueType >::iterator OtherValueIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef xsd::cxx::tree::sequence< OtherValueType >::const_iterator OtherValueConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< OtherValueType, char > OtherValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const OtherValueSequence&
      otherValue () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      OtherValueSequence&
      otherValue ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      otherValue (const OtherValueSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      OtherCertStatusValuesType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      OtherCertStatusValuesType (const xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      OtherCertStatusValuesType (const OtherCertStatusValuesType& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual OtherCertStatusValuesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~OtherCertStatusValuesType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      OtherValueSequence OtherValue_;

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace digidoc
{
  namespace xades
  {
    /**
     * @name Parsing functions for the %Any document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (const ::std::string& uri,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (const ::std::string& uri,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (const ::std::string& uri,
         xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (::std::istream& is,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (::std::istream& is,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (::std::istream& is,
         xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (::std::istream& is,
         const ::std::string& id,
         xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source.
     *
     * @param is A Xerces-C++ input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (xercesc::InputSource& is,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source with an error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (xercesc::InputSource& is,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (xercesc::InputSource& is,
         xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (const xercesc::DOMDocument& d,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    ::std::auto_ptr< ::digidoc::xades::AnyType >
    any (::xml_schema::dom::auto_ptr< xercesc::DOMDocument >& d,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    //@}
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace digidoc
{
  namespace xades
  {
    /**
     * @name Serialization functions for the %Any document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    void
    any (::std::ostream& os,
         const ::digidoc::xades::AnyType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    any (::std::ostream& os,
         const ::digidoc::xades::AnyType& x, 
         ::xml_schema::ErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    any (::std::ostream& os,
         const ::digidoc::xades::AnyType& x, 
         xercesc::DOMErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    void
    any (xercesc::XMLFormatTarget& ft,
         const ::digidoc::xades::AnyType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    any (xercesc::XMLFormatTarget& ft,
         const ::digidoc::xades::AnyType& x, 
         ::xml_schema::ErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    any (xercesc::XMLFormatTarget& ft,
         const ::digidoc::xades::AnyType& x, 
         xercesc::DOMErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    void
    any (xercesc::DOMDocument& d,
         const ::digidoc::xades::AnyType& x,
         ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    ::xml_schema::dom::auto_ptr< xercesc::DOMDocument >
    any (const ::digidoc::xades::AnyType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         ::xml_schema::Flags f = 0);

    //@}

    void
    operator<< (xercesc::DOMElement&, const AnyType&);

    void
    operator<< (xercesc::DOMElement&, const ObjectIdentifierType&);

    void
    operator<< (xercesc::DOMElement&, const IdentifierType&);

    void
    operator<< (xercesc::DOMElement&, const QualifierType&);

    void
    operator<< (xercesc::DOMAttr&, const QualifierType&);

    void
    operator<< (::xml_schema::ListStream&,
                const QualifierType&);

    void
    operator<< (xercesc::DOMElement&, const DocumentationReferencesType&);

    void
    operator<< (xercesc::DOMElement&, const EncapsulatedPKIDataType&);

    void
    operator<< (xercesc::DOMElement&, const IncludeType&);

    void
    operator<< (xercesc::DOMElement&, const ReferenceInfoType&);

    void
    operator<< (xercesc::DOMElement&, const GenericTimeStampType&);

    void
    operator<< (xercesc::DOMElement&, const XAdESTimeStampType&);

    void
    operator<< (xercesc::DOMElement&, const OtherTimeStampType&);

    void
    operator<< (xercesc::DOMElement&, const QualifyingPropertiesType&);

    void
    operator<< (xercesc::DOMElement&, const SignedPropertiesType&);

    void
    operator<< (xercesc::DOMElement&, const UnsignedPropertiesType&);

    void
    operator<< (xercesc::DOMElement&, const SignedSignaturePropertiesType&);

    void
    operator<< (xercesc::DOMElement&, const SignedDataObjectPropertiesType&);

    void
    operator<< (xercesc::DOMElement&, const UnsignedSignaturePropertiesType&);

    void
    operator<< (xercesc::DOMElement&, const UnsignedDataObjectPropertiesType&);

    void
    operator<< (xercesc::DOMElement&, const QualifyingPropertiesReferenceType&);

    void
    operator<< (xercesc::DOMElement&, const CertIDListType&);

    void
    operator<< (xercesc::DOMElement&, const CertIDType&);

    void
    operator<< (xercesc::DOMElement&, const DigestAlgAndValueType&);

    void
    operator<< (xercesc::DOMElement&, const SignaturePolicyIdentifierType&);

    void
    operator<< (xercesc::DOMElement&, const SignaturePolicyIdType&);

    void
    operator<< (xercesc::DOMElement&, const SigPolicyQualifiersListType&);

    void
    operator<< (xercesc::DOMElement&, const SPUserNoticeType&);

    void
    operator<< (xercesc::DOMElement&, const NoticeReferenceType&);

    void
    operator<< (xercesc::DOMElement&, const IntegerListType&);

    void
    operator<< (xercesc::DOMElement&, const CounterSignatureType&);

    void
    operator<< (xercesc::DOMElement&, const DataObjectFormatType&);

    void
    operator<< (xercesc::DOMElement&, const CommitmentTypeIndicationType&);

    void
    operator<< (xercesc::DOMElement&, const CommitmentTypeQualifiersListType&);

    void
    operator<< (xercesc::DOMElement&, const SignatureProductionPlaceType&);

    void
    operator<< (xercesc::DOMElement&, const SignerRoleType&);

    void
    operator<< (xercesc::DOMElement&, const ClaimedRolesListType&);

    void
    operator<< (xercesc::DOMElement&, const CertifiedRolesListType&);

    void
    operator<< (xercesc::DOMElement&, const CompleteCertificateRefsType&);

    void
    operator<< (xercesc::DOMElement&, const CompleteRevocationRefsType&);

    void
    operator<< (xercesc::DOMElement&, const CRLRefsType&);

    void
    operator<< (xercesc::DOMElement&, const CRLRefType&);

    void
    operator<< (xercesc::DOMElement&, const CRLIdentifierType&);

    void
    operator<< (xercesc::DOMElement&, const OCSPRefsType&);

    void
    operator<< (xercesc::DOMElement&, const OCSPRefType&);

    void
    operator<< (xercesc::DOMElement&, const ResponderIDType&);

    void
    operator<< (xercesc::DOMElement&, const OCSPIdentifierType&);

    void
    operator<< (xercesc::DOMElement&, const OtherCertStatusRefsType&);

    void
    operator<< (xercesc::DOMElement&, const CertificateValuesType&);

    void
    operator<< (xercesc::DOMElement&, const RevocationValuesType&);

    void
    operator<< (xercesc::DOMElement&, const CRLValuesType&);

    void
    operator<< (xercesc::DOMElement&, const OCSPValuesType&);

    void
    operator<< (xercesc::DOMElement&, const OtherCertStatusValuesType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XAD_ES_HXX
