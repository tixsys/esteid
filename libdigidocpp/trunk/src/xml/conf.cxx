// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "conf.hxx"

// Configuration
// 

const Configuration::ParamSequence& Configuration::
param () const
{
  return this->param_;
}

Configuration::ParamSequence& Configuration::
param ()
{
  return this->param_;
}

void Configuration::
param (const ParamSequence& s)
{
  this->param_ = s;
}

const Configuration::OcspSequence& Configuration::
ocsp () const
{
  return this->ocsp_;
}

Configuration::OcspSequence& Configuration::
ocsp ()
{
  return this->ocsp_;
}

void Configuration::
ocsp (const OcspSequence& s)
{
  this->ocsp_ = s;
}


// Ocsp
// 

const Ocsp::UrlType& Ocsp::
url () const
{
  return this->url_.get ();
}

Ocsp::UrlType& Ocsp::
url ()
{
  return this->url_.get ();
}

void Ocsp::
url (const UrlType& x)
{
  this->url_.set (x);
}

void Ocsp::
url (::std::auto_ptr< UrlType > x)
{
  this->url_.set (x);
}

const Ocsp::CertType& Ocsp::
cert () const
{
  return this->cert_.get ();
}

Ocsp::CertType& Ocsp::
cert ()
{
  return this->cert_.get ();
}

void Ocsp::
cert (const CertType& x)
{
  this->cert_.set (x);
}

void Ocsp::
cert (::std::auto_ptr< CertType > x)
{
  this->cert_.set (x);
}

const Ocsp::IssuerType& Ocsp::
issuer () const
{
  return this->issuer_.get ();
}

Ocsp::IssuerType& Ocsp::
issuer ()
{
  return this->issuer_.get ();
}

void Ocsp::
issuer (const IssuerType& x)
{
  this->issuer_.set (x);
}

void Ocsp::
issuer (::std::auto_ptr< IssuerType > x)
{
  this->issuer_.set (x);
}


// Param
// 

const Param::NameType& Param::
name () const
{
  return this->name_.get ();
}

Param::NameType& Param::
name ()
{
  return this->name_.get ();
}

void Param::
name (const NameType& x)
{
  this->name_.set (x);
}

void Param::
name (::std::auto_ptr< NameType > x)
{
  this->name_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// Configuration
//

Configuration::
Configuration ()
: ::xml_schema::Type (),
  param_ (::xml_schema::Flags (), this),
  ocsp_ (::xml_schema::Flags (), this)
{
}

Configuration::
Configuration (const Configuration& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  param_ (x.param_, f, this),
  ocsp_ (x.ocsp_, f, this)
{
}

Configuration::
Configuration (const xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  param_ (f, this),
  ocsp_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void Configuration::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // param
    //
    if (n.name () == "param" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ParamType > r (
        ParamTraits::create (i, f, this));

      this->param_.push_back (r);
      continue;
    }

    // ocsp
    //
    if (n.name () == "ocsp" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< OcspType > r (
        OcspTraits::create (i, f, this));

      this->ocsp_.push_back (r);
      continue;
    }

    break;
  }
}

Configuration* Configuration::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Configuration (*this, f, c);
}

Configuration::
~Configuration ()
{
}

// Ocsp
//

Ocsp::
Ocsp (const UrlType& url,
      const CertType& cert,
      const IssuerType& issuer)
: ::xml_schema::Type (),
  url_ (url, ::xml_schema::Flags (), this),
  cert_ (cert, ::xml_schema::Flags (), this),
  issuer_ (issuer, ::xml_schema::Flags (), this)
{
}

Ocsp::
Ocsp (const Ocsp& x,
      ::xml_schema::Flags f,
      ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  url_ (x.url_, f, this),
  cert_ (x.cert_, f, this),
  issuer_ (x.issuer_, f, this)
{
}

Ocsp::
Ocsp (const xercesc::DOMElement& e,
      ::xml_schema::Flags f,
      ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  url_ (f, this),
  cert_ (f, this),
  issuer_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void Ocsp::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // url
    //
    if (n.name () == "url" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< UrlType > r (
        UrlTraits::create (i, f, this));

      if (!url_.present ())
      {
        this->url_.set (r);
        continue;
      }
    }

    // cert
    //
    if (n.name () == "cert" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< CertType > r (
        CertTraits::create (i, f, this));

      if (!cert_.present ())
      {
        this->cert_.set (r);
        continue;
      }
    }

    break;
  }

  if (!url_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "url",
      "");
  }

  if (!cert_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cert",
      "");
  }

  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "issuer" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< IssuerType > r (
        IssuerTraits::create (i, f, this));

      this->issuer_.set (r);
      continue;
    }
  }

  if (!issuer_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "issuer",
      "");
  }
}

Ocsp* Ocsp::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Ocsp (*this, f, c);
}

Ocsp::
~Ocsp ()
{
}

// Param
//

Param::
Param (const NameType& name)
: ::xml_schema::String (),
  name_ (name, ::xml_schema::Flags (), this)
{
}

Param::
Param (const char* _xsd_String_base,
       const NameType& name)
: ::xml_schema::String (_xsd_String_base),
  name_ (name, ::xml_schema::Flags (), this)
{
}

Param::
Param (const ::std::string& _xsd_String_base,
       const NameType& name)
: ::xml_schema::String (_xsd_String_base),
  name_ (name, ::xml_schema::Flags (), this)
{
}

Param::
Param (const ::xml_schema::String& _xsd_String_base,
       const NameType& name)
: ::xml_schema::String (_xsd_String_base),
  name_ (name, ::xml_schema::Flags (), this)
{
}

Param::
Param (const Param& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
: ::xml_schema::String (x, f, c),
  name_ (x.name_, f, this)
{
}

Param::
Param (const xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
: ::xml_schema::String (e, f | ::xml_schema::Flags::base, c),
  name_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void Param::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< NameType > r (
        NameTraits::create (i, f, this));

      this->name_.set (r);
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

Param* Param::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Param (*this, f, c);
}

Param::
~Param ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::Configuration >
configuration (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::Configuration > r (
    ::configuration (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Configuration >
configuration (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::Configuration > r (
    ::configuration (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Configuration >
configuration (const ::std::string& u,
               xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::Configuration > r (
    ::configuration (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Configuration >
configuration (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::configuration (isrc, f, p);
}

::std::auto_ptr< ::Configuration >
configuration (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::configuration (isrc, h, f, p);
}

::std::auto_ptr< ::Configuration >
configuration (::std::istream& is,
               xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::configuration (isrc, h, f, p);
}

::std::auto_ptr< ::Configuration >
configuration (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::configuration (isrc, f, p);
}

::std::auto_ptr< ::Configuration >
configuration (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::configuration (isrc, h, f, p);
}

::std::auto_ptr< ::Configuration >
configuration (::std::istream& is,
               const ::std::string& sid,
               xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::configuration (isrc, h, f, p);
}

::std::auto_ptr< ::Configuration >
configuration (xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::Configuration > r (
    ::configuration (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Configuration >
configuration (xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::Configuration > r (
    ::configuration (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Configuration >
configuration (xercesc::InputSource& i,
               xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::Configuration > r (
    ::configuration (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Configuration >
configuration (const xercesc::DOMDocument& d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > c (
      static_cast< xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::Configuration > r (
      ::configuration (
        c, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  const xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "configuration" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::Configuration > r (
      ::xsd::cxx::tree::traits< ::Configuration, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "configuration",
    "");
}

::std::auto_ptr< ::Configuration >
configuration (::xml_schema::dom::auto_ptr< xercesc::DOMDocument >& d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::treeNodeKey,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "configuration" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::Configuration > r (
      ::xsd::cxx::tree::traits< ::Configuration, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "configuration",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

