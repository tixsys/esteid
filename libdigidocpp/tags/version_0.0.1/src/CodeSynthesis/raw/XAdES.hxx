// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from XAdES.xsd.
 */

#ifndef XAD_ES_HXX
#define XAD_ES_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< Type, char, Ncname > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info < char > NamespaceInfo;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > NamespaceInfomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream < char > ListStream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double < Double > AsDouble;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal < Decimal > AsDecimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xades
{
  class Any;
  class ObjectIdentifier;
  class Identifier;
  class Qualifier;
  class DocumentationReferences;
  class EncapsulatedPKIData;
  class Include;
  class ReferenceInfo;
  class GenericTimeStamp;
  class XAdESTimeStamp;
  class OtherTimeStamp;
  class QualifyingProperties;
  class SignedProperties;
  class UnsignedProperties;
  class SignedSignatureProperties;
  class SignedDataObjectProperties;
  class UnsignedSignatureProperties;
  class UnsignedDataObjectProperties;
  class QualifyingPropertiesReference;
  class CertIDList;
  class CertID;
  class DigestAlgAndValue;
  class SignaturePolicyIdentifier;
  class SignaturePolicyId;
  class SigPolicyQualifiersList;
  class SPUserNotice;
  class NoticeReference;
  class IntegerList;
  class CounterSignature;
  class DataObjectFormat;
  class CommitmentTypeIndication;
  class CommitmentTypeQualifiersList;
  class SignatureProductionPlace;
  class SignerRole;
  class ClaimedRolesList;
  class CertifiedRolesList;
  class CompleteCertificateRefs;
  class CompleteRevocationRefs;
  class CRLRefs;
  class CRLRef;
  class CRLIdentifier;
  class OCSPRefs;
  class OCSPRef;
  class ResponderID;
  class OCSPIdentifier;
  class OtherCertStatusRefs;
  class CertificateValues;
  class RevocationValues;
  class CRLValues;
  class OCSPValues;
  class OtherCertStatusValues;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "xmldsig-core-schema.hxx"

/**
 * @brief C++ namespace for the %http://uri.etsi.org/01903/v1.3.2#
 * schema namespace.
 */
namespace xades
{
  /**
   * @brief Class corresponding to the %AnyType schema type.
   *
   * @nosubgrouping
   */
  class Any: public ::xml_schema::Type
  {
    public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Any ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Any (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Any (const Any& x,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Any*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Any ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:

    //@endcond
  };

  /**
   * @brief Class corresponding to the %ObjectIdentifierType schema type.
   *
   * @nosubgrouping
   */
  class ObjectIdentifier: public ::xml_schema::Type
  {
    public:
    /**
     * @name Identifier
     *
     * @brief Accessor and modifier functions for the %Identifier
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Identifier IdentifierType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdentifierType, char > IdentifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const IdentifierType&
    identifier () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    IdentifierType&
    identifier ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    identifier (const IdentifierType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    identifier (::std::auto_ptr< IdentifierType > p);

    //@}

    /**
     * @name Description
     *
     * @brief Accessor and modifier functions for the %Description
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String DescriptionType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DescriptionOptional&
    description () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DescriptionOptional&
    description ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    description (const DescriptionType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    description (const DescriptionOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    description (::std::auto_ptr< DescriptionType > p);

    //@}

    /**
     * @name DocumentationReferences
     *
     * @brief Accessor and modifier functions for the %DocumentationReferences
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::DocumentationReferences DocumentationReferencesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DocumentationReferencesType > DocumentationReferencesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DocumentationReferencesType, char > DocumentationReferencesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DocumentationReferencesOptional&
    documentationReferences () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DocumentationReferencesOptional&
    documentationReferences ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    documentationReferences (const DocumentationReferencesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    documentationReferences (const DocumentationReferencesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    documentationReferences (::std::auto_ptr< DocumentationReferencesType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ObjectIdentifier (const IdentifierType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    ObjectIdentifier (::std::auto_ptr< IdentifierType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ObjectIdentifier (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ObjectIdentifier (const ObjectIdentifier& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ObjectIdentifier*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~ObjectIdentifier ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< IdentifierType > Identifier_;
    DescriptionOptional Description_;
    DocumentationReferencesOptional DocumentationReferences_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %IdentifierType schema type.
   *
   * @nosubgrouping
   */
  class Identifier: public ::xml_schema::Uri
  {
    public:
    /**
     * @name Qualifier
     *
     * @brief Accessor and modifier functions for the %Qualifier
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xades::Qualifier QualifierType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< QualifierType > QualifierOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< QualifierType, char > QualifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const QualifierOptional&
    qualifier () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    QualifierOptional&
    qualifier ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    qualifier (const QualifierType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    qualifier (const QualifierOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    qualifier (::std::auto_ptr< QualifierType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Identifier (const ::xml_schema::Uri&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Identifier (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Identifier (const Identifier& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Identifier*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Identifier ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    QualifierOptional Qualifier_;

    //@endcond
  };

  /**
   * @brief Enumeration class corresponding to the %QualifierType
   * schema type.
   */
  class Qualifier: public ::xml_schema::String
  {
    public:

    /**
     * @brief Underlying enum type.
     */
    enum Value
    {
      OIDAsURI,
      OIDAsURN
    };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    Qualifier (Value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    Qualifier (const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    Qualifier (const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    Qualifier (const ::xml_schema::String& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Qualifier (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Qualifier (const ::xercesc::DOMAttr& a,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Qualifier (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Qualifier (const Qualifier& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Qualifier*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    Qualifier&
    operator= (Value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual
    operator Value () const
    {
      return _xsd_Qualifier_convert ();
    }

    //@cond

    protected:
    Value
    _xsd_Qualifier_convert () const;

    public:
    static const char* const _xsd_Qualifier_literals_[2];
    static const Value _xsd_Qualifier_indexes_[2];

    //@endcond
  };

  /**
   * @brief Class corresponding to the %DocumentationReferencesType schema type.
   *
   * @nosubgrouping
   */
  class DocumentationReferences: public ::xml_schema::Type
  {
    public:
    /**
     * @name DocumentationReference
     *
     * @brief Accessor and modifier functions for the %DocumentationReference
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Uri DocumentationReferenceType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< DocumentationReferenceType > DocumentationReferenceSequence;

    /**
     * @brief Element iterator type.
     */
    typedef DocumentationReferenceSequence::iterator DocumentationReferenceIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef DocumentationReferenceSequence::const_iterator DocumentationReferenceConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DocumentationReferenceType, char > DocumentationReferenceTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const DocumentationReferenceSequence&
    documentationReference () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    DocumentationReferenceSequence&
    documentationReference ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    documentationReference (const DocumentationReferenceSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DocumentationReferences ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DocumentationReferences (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DocumentationReferences (const DocumentationReferences& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DocumentationReferences*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DocumentationReferences ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DocumentationReferenceSequence DocumentationReference_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %EncapsulatedPKIDataType schema type.
   *
   * @nosubgrouping
   */
  class EncapsulatedPKIData: public ::xml_schema::Base64Binary
  {
    public:
    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Encoding
     *
     * @brief Accessor and modifier functions for the %Encoding
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri EncodingType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< EncodingType > EncodingOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< EncodingType, char > EncodingTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const EncodingOptional&
    encoding () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    EncodingOptional&
    encoding ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    encoding (const EncodingType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    encoding (const EncodingOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    encoding (::std::auto_ptr< EncodingType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from initializers for required 
     * elements and attributes.
     */
    EncapsulatedPKIData ();

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    EncapsulatedPKIData (const ::xml_schema::Base64Binary&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    EncapsulatedPKIData (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    EncapsulatedPKIData (const EncapsulatedPKIData& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual EncapsulatedPKIData*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~EncapsulatedPKIData ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    IdOptional Id_;
    EncodingOptional Encoding_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %IncludeType schema type.
   *
   * @nosubgrouping
   */
  class Include: public ::xml_schema::Type
  {
    public:
    /**
     * @name URI
     *
     * @brief Accessor and modifier functions for the %URI
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri URIType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const URIType&
    uRI () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    URIType&
    uRI ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    uRI (const URIType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    uRI (::std::auto_ptr< URIType > p);

    //@}

    /**
     * @name referencedData
     *
     * @brief Accessor and modifier functions for the %referencedData
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Boolean ReferencedDataType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ReferencedDataType > ReferencedDataOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ReferencedDataType, char > ReferencedDataTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ReferencedDataOptional&
    referencedData () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    ReferencedDataOptional&
    referencedData ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    referencedData (const ReferencedDataType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    referencedData (const ReferencedDataOptional& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Include (const URIType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Include (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Include (const Include& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Include*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Include ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< URIType > URI_;
    ReferencedDataOptional referencedData_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %ReferenceInfoType schema type.
   *
   * @nosubgrouping
   */
  class ReferenceInfo: public ::xml_schema::Type
  {
    public:
    /**
     * @name DigestMethod
     *
     * @brief Accessor and modifier functions for the %DigestMethod
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::DigestMethod DigestMethodType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DigestMethodType, char > DigestMethodTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DigestMethodType&
    digestMethod () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DigestMethodType&
    digestMethod ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    digestMethod (const DigestMethodType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    digestMethod (::std::auto_ptr< DigestMethodType > p);

    //@}

    /**
     * @name DigestValue
     *
     * @brief Accessor and modifier functions for the %DigestValue
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::DigestValue DigestValueType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DigestValueType, char > DigestValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DigestValueType&
    digestValue () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DigestValueType&
    digestValue ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    digestValue (const DigestValueType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    digestValue (::std::auto_ptr< DigestValueType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name URI
     *
     * @brief Accessor and modifier functions for the %URI
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri URIType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< URIType > URIOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const URIOptional&
    uRI () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    URIOptional&
    uRI ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    uRI (const URIType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    uRI (const URIOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    uRI (::std::auto_ptr< URIType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ReferenceInfo (const DigestMethodType&,
                   const DigestValueType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    ReferenceInfo (::std::auto_ptr< DigestMethodType >&,
                   const DigestValueType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ReferenceInfo (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ReferenceInfo (const ReferenceInfo& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ReferenceInfo*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~ReferenceInfo ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< DigestMethodType > DigestMethod_;
    ::xsd::cxx::tree::one< DigestValueType > DigestValue_;
    IdOptional Id_;
    URIOptional URI_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %GenericTimeStampType schema type.
   *
   * @nosubgrouping
   */
  class GenericTimeStamp: public ::xml_schema::Type
  {
    public:
    /**
     * @name Include
     *
     * @brief Accessor and modifier functions for the %Include
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Include IncludeType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< IncludeType > IncludeSequence;

    /**
     * @brief Element iterator type.
     */
    typedef IncludeSequence::iterator IncludeIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef IncludeSequence::const_iterator IncludeConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IncludeType, char > IncludeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const IncludeSequence&
    include () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    IncludeSequence&
    include ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    include (const IncludeSequence& s);

    //@}

    /**
     * @name ReferenceInfo
     *
     * @brief Accessor and modifier functions for the %ReferenceInfo
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::ReferenceInfo ReferenceInfoType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ReferenceInfoType > ReferenceInfoSequence;

    /**
     * @brief Element iterator type.
     */
    typedef ReferenceInfoSequence::iterator ReferenceInfoIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef ReferenceInfoSequence::const_iterator ReferenceInfoConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ReferenceInfoType, char > ReferenceInfoTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ReferenceInfoSequence&
    referenceInfo () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ReferenceInfoSequence&
    referenceInfo ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    referenceInfo (const ReferenceInfoSequence& s);

    //@}

    /**
     * @name CanonicalizationMethod
     *
     * @brief Accessor and modifier functions for the %CanonicalizationMethod
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::CanonicalizationMethod CanonicalizationMethodType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CanonicalizationMethodType > CanonicalizationMethodOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CanonicalizationMethodType, char > CanonicalizationMethodTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CanonicalizationMethodOptional&
    canonicalizationMethod () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CanonicalizationMethodOptional&
    canonicalizationMethod ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    canonicalizationMethod (const CanonicalizationMethodType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    canonicalizationMethod (const CanonicalizationMethodOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    canonicalizationMethod (::std::auto_ptr< CanonicalizationMethodType > p);

    //@}

    /**
     * @name EncapsulatedTimeStamp
     *
     * @brief Accessor and modifier functions for the %EncapsulatedTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::EncapsulatedPKIData EncapsulatedTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< EncapsulatedTimeStampType > EncapsulatedTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef EncapsulatedTimeStampSequence::iterator EncapsulatedTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef EncapsulatedTimeStampSequence::const_iterator EncapsulatedTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EncapsulatedTimeStampType, char > EncapsulatedTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const EncapsulatedTimeStampSequence&
    encapsulatedTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    EncapsulatedTimeStampSequence&
    encapsulatedTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    encapsulatedTimeStamp (const EncapsulatedTimeStampSequence& s);

    //@}

    /**
     * @name XMLTimeStamp
     *
     * @brief Accessor and modifier functions for the %XMLTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any XMLTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< XMLTimeStampType > XMLTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef XMLTimeStampSequence::iterator XMLTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef XMLTimeStampSequence::const_iterator XMLTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< XMLTimeStampType, char > XMLTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const XMLTimeStampSequence&
    xMLTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    XMLTimeStampSequence&
    xMLTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    xMLTimeStamp (const XMLTimeStampSequence& s);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    GenericTimeStamp ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    GenericTimeStamp (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    GenericTimeStamp (const GenericTimeStamp& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual GenericTimeStamp*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~GenericTimeStamp ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    IncludeSequence Include_;
    ReferenceInfoSequence ReferenceInfo_;
    CanonicalizationMethodOptional CanonicalizationMethod_;
    EncapsulatedTimeStampSequence EncapsulatedTimeStamp_;
    XMLTimeStampSequence XMLTimeStamp_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %XAdESTimeStampType schema type.
   *
   * @nosubgrouping
   */
  class XAdESTimeStamp: public ::xml_schema::Type
  {
    public:
    /**
     * @name Include
     *
     * @brief Accessor and modifier functions for the %Include
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Include IncludeType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< IncludeType > IncludeSequence;

    /**
     * @brief Element iterator type.
     */
    typedef IncludeSequence::iterator IncludeIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef IncludeSequence::const_iterator IncludeConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IncludeType, char > IncludeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const IncludeSequence&
    include () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    IncludeSequence&
    include ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    include (const IncludeSequence& s);

    //@}

    /**
     * @name CanonicalizationMethod
     *
     * @brief Accessor and modifier functions for the %CanonicalizationMethod
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::CanonicalizationMethod CanonicalizationMethodType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CanonicalizationMethodType > CanonicalizationMethodOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CanonicalizationMethodType, char > CanonicalizationMethodTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CanonicalizationMethodOptional&
    canonicalizationMethod () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CanonicalizationMethodOptional&
    canonicalizationMethod ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    canonicalizationMethod (const CanonicalizationMethodType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    canonicalizationMethod (const CanonicalizationMethodOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    canonicalizationMethod (::std::auto_ptr< CanonicalizationMethodType > p);

    //@}

    /**
     * @name EncapsulatedTimeStamp
     *
     * @brief Accessor and modifier functions for the %EncapsulatedTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::EncapsulatedPKIData EncapsulatedTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< EncapsulatedTimeStampType > EncapsulatedTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef EncapsulatedTimeStampSequence::iterator EncapsulatedTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef EncapsulatedTimeStampSequence::const_iterator EncapsulatedTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EncapsulatedTimeStampType, char > EncapsulatedTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const EncapsulatedTimeStampSequence&
    encapsulatedTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    EncapsulatedTimeStampSequence&
    encapsulatedTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    encapsulatedTimeStamp (const EncapsulatedTimeStampSequence& s);

    //@}

    /**
     * @name XMLTimeStamp
     *
     * @brief Accessor and modifier functions for the %XMLTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any XMLTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< XMLTimeStampType > XMLTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef XMLTimeStampSequence::iterator XMLTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef XMLTimeStampSequence::const_iterator XMLTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< XMLTimeStampType, char > XMLTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const XMLTimeStampSequence&
    xMLTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    XMLTimeStampSequence&
    xMLTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    xMLTimeStamp (const XMLTimeStampSequence& s);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    XAdESTimeStamp ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    XAdESTimeStamp (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    XAdESTimeStamp (const XAdESTimeStamp& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual XAdESTimeStamp*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~XAdESTimeStamp ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    IncludeSequence Include_;
    CanonicalizationMethodOptional CanonicalizationMethod_;
    EncapsulatedTimeStampSequence EncapsulatedTimeStamp_;
    XMLTimeStampSequence XMLTimeStamp_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %OtherTimeStampType schema type.
   *
   * @nosubgrouping
   */
  class OtherTimeStamp: public ::xades::GenericTimeStamp
  {
    public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    OtherTimeStamp ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OtherTimeStamp (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    OtherTimeStamp (const OtherTimeStamp& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual OtherTimeStamp*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~OtherTimeStamp ();
  };

  /**
   * @brief Class corresponding to the %QualifyingPropertiesType schema type.
   *
   * @nosubgrouping
   */
  class QualifyingProperties: public ::xml_schema::Type
  {
    public:
    /**
     * @name SignedProperties
     *
     * @brief Accessor and modifier functions for the %SignedProperties
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::SignedProperties SignedPropertiesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SignedPropertiesType > SignedPropertiesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignedPropertiesType, char > SignedPropertiesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SignedPropertiesOptional&
    signedProperties () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SignedPropertiesOptional&
    signedProperties ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signedProperties (const SignedPropertiesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signedProperties (const SignedPropertiesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signedProperties (::std::auto_ptr< SignedPropertiesType > p);

    //@}

    /**
     * @name UnsignedProperties
     *
     * @brief Accessor and modifier functions for the %UnsignedProperties
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::UnsignedProperties UnsignedPropertiesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< UnsignedPropertiesType > UnsignedPropertiesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< UnsignedPropertiesType, char > UnsignedPropertiesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const UnsignedPropertiesOptional&
    unsignedProperties () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    UnsignedPropertiesOptional&
    unsignedProperties ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    unsignedProperties (const UnsignedPropertiesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    unsignedProperties (const UnsignedPropertiesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    unsignedProperties (::std::auto_ptr< UnsignedPropertiesType > p);

    //@}

    /**
     * @name Target
     *
     * @brief Accessor and modifier functions for the %Target
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri TargetType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< TargetType, char > TargetTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const TargetType&
    target () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    TargetType&
    target ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    target (const TargetType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    target (::std::auto_ptr< TargetType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    QualifyingProperties (const TargetType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    QualifyingProperties (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    QualifyingProperties (const QualifyingProperties& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual QualifyingProperties*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~QualifyingProperties ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    SignedPropertiesOptional SignedProperties_;
    UnsignedPropertiesOptional UnsignedProperties_;
    ::xsd::cxx::tree::one< TargetType > Target_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SignedPropertiesType schema type.
   *
   * @nosubgrouping
   */
  class SignedProperties: public ::xml_schema::Type
  {
    public:
    /**
     * @name SignedSignatureProperties
     *
     * @brief Accessor and modifier functions for the %SignedSignatureProperties
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::SignedSignatureProperties SignedSignaturePropertiesType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignedSignaturePropertiesType, char > SignedSignaturePropertiesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SignedSignaturePropertiesType&
    signedSignatureProperties () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SignedSignaturePropertiesType&
    signedSignatureProperties ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signedSignatureProperties (const SignedSignaturePropertiesType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signedSignatureProperties (::std::auto_ptr< SignedSignaturePropertiesType > p);

    //@}

    /**
     * @name SignedDataObjectProperties
     *
     * @brief Accessor and modifier functions for the %SignedDataObjectProperties
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::SignedDataObjectProperties SignedDataObjectPropertiesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SignedDataObjectPropertiesType > SignedDataObjectPropertiesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignedDataObjectPropertiesType, char > SignedDataObjectPropertiesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SignedDataObjectPropertiesOptional&
    signedDataObjectProperties () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SignedDataObjectPropertiesOptional&
    signedDataObjectProperties ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signedDataObjectProperties (const SignedDataObjectPropertiesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signedDataObjectProperties (const SignedDataObjectPropertiesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signedDataObjectProperties (::std::auto_ptr< SignedDataObjectPropertiesType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SignedProperties (const SignedSignaturePropertiesType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    SignedProperties (::std::auto_ptr< SignedSignaturePropertiesType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SignedProperties (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SignedProperties (const SignedProperties& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SignedProperties*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SignedProperties ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SignedSignaturePropertiesType > SignedSignatureProperties_;
    SignedDataObjectPropertiesOptional SignedDataObjectProperties_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %UnsignedPropertiesType schema type.
   *
   * @nosubgrouping
   */
  class UnsignedProperties: public ::xml_schema::Type
  {
    public:
    /**
     * @name UnsignedSignatureProperties
     *
     * @brief Accessor and modifier functions for the %UnsignedSignatureProperties
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::UnsignedSignatureProperties UnsignedSignaturePropertiesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< UnsignedSignaturePropertiesType > UnsignedSignaturePropertiesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< UnsignedSignaturePropertiesType, char > UnsignedSignaturePropertiesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const UnsignedSignaturePropertiesOptional&
    unsignedSignatureProperties () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    UnsignedSignaturePropertiesOptional&
    unsignedSignatureProperties ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    unsignedSignatureProperties (const UnsignedSignaturePropertiesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    unsignedSignatureProperties (const UnsignedSignaturePropertiesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    unsignedSignatureProperties (::std::auto_ptr< UnsignedSignaturePropertiesType > p);

    //@}

    /**
     * @name UnsignedDataObjectProperties
     *
     * @brief Accessor and modifier functions for the %UnsignedDataObjectProperties
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::UnsignedDataObjectProperties UnsignedDataObjectPropertiesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< UnsignedDataObjectPropertiesType > UnsignedDataObjectPropertiesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< UnsignedDataObjectPropertiesType, char > UnsignedDataObjectPropertiesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const UnsignedDataObjectPropertiesOptional&
    unsignedDataObjectProperties () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    UnsignedDataObjectPropertiesOptional&
    unsignedDataObjectProperties ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    unsignedDataObjectProperties (const UnsignedDataObjectPropertiesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    unsignedDataObjectProperties (const UnsignedDataObjectPropertiesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    unsignedDataObjectProperties (::std::auto_ptr< UnsignedDataObjectPropertiesType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    UnsignedProperties ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    UnsignedProperties (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    UnsignedProperties (const UnsignedProperties& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual UnsignedProperties*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~UnsignedProperties ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    UnsignedSignaturePropertiesOptional UnsignedSignatureProperties_;
    UnsignedDataObjectPropertiesOptional UnsignedDataObjectProperties_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SignedSignaturePropertiesType schema type.
   *
   * @nosubgrouping
   */
  class SignedSignatureProperties: public ::xml_schema::Type
  {
    public:
    /**
     * @name SigningTime
     *
     * @brief Accessor and modifier functions for the %SigningTime
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::DateTime SigningTimeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SigningTimeType > SigningTimeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigningTimeType, char > SigningTimeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SigningTimeOptional&
    signingTime () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SigningTimeOptional&
    signingTime ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signingTime (const SigningTimeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signingTime (const SigningTimeOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signingTime (::std::auto_ptr< SigningTimeType > p);

    //@}

    /**
     * @name SigningCertificate
     *
     * @brief Accessor and modifier functions for the %SigningCertificate
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CertIDList SigningCertificateType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SigningCertificateType > SigningCertificateOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigningCertificateType, char > SigningCertificateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SigningCertificateOptional&
    signingCertificate () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SigningCertificateOptional&
    signingCertificate ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signingCertificate (const SigningCertificateType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signingCertificate (const SigningCertificateOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signingCertificate (::std::auto_ptr< SigningCertificateType > p);

    //@}

    /**
     * @name SignaturePolicyIdentifier
     *
     * @brief Accessor and modifier functions for the %SignaturePolicyIdentifier
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::SignaturePolicyIdentifier SignaturePolicyIdentifierType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SignaturePolicyIdentifierType > SignaturePolicyIdentifierOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignaturePolicyIdentifierType, char > SignaturePolicyIdentifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SignaturePolicyIdentifierOptional&
    signaturePolicyIdentifier () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SignaturePolicyIdentifierOptional&
    signaturePolicyIdentifier ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signaturePolicyIdentifier (const SignaturePolicyIdentifierType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signaturePolicyIdentifier (const SignaturePolicyIdentifierOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signaturePolicyIdentifier (::std::auto_ptr< SignaturePolicyIdentifierType > p);

    //@}

    /**
     * @name SignatureProductionPlace
     *
     * @brief Accessor and modifier functions for the %SignatureProductionPlace
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::SignatureProductionPlace SignatureProductionPlaceType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SignatureProductionPlaceType > SignatureProductionPlaceOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignatureProductionPlaceType, char > SignatureProductionPlaceTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SignatureProductionPlaceOptional&
    signatureProductionPlace () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SignatureProductionPlaceOptional&
    signatureProductionPlace ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signatureProductionPlace (const SignatureProductionPlaceType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signatureProductionPlace (const SignatureProductionPlaceOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signatureProductionPlace (::std::auto_ptr< SignatureProductionPlaceType > p);

    //@}

    /**
     * @name SignerRole
     *
     * @brief Accessor and modifier functions for the %SignerRole
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::SignerRole SignerRoleType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SignerRoleType > SignerRoleOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignerRoleType, char > SignerRoleTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SignerRoleOptional&
    signerRole () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SignerRoleOptional&
    signerRole ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signerRole (const SignerRoleType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signerRole (const SignerRoleOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signerRole (::std::auto_ptr< SignerRoleType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SignedSignatureProperties ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SignedSignatureProperties (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SignedSignatureProperties (const SignedSignatureProperties& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SignedSignatureProperties*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SignedSignatureProperties ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    SigningTimeOptional SigningTime_;
    SigningCertificateOptional SigningCertificate_;
    SignaturePolicyIdentifierOptional SignaturePolicyIdentifier_;
    SignatureProductionPlaceOptional SignatureProductionPlace_;
    SignerRoleOptional SignerRole_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SignedDataObjectPropertiesType schema type.
   *
   * @nosubgrouping
   */
  class SignedDataObjectProperties: public ::xml_schema::Type
  {
    public:
    /**
     * @name DataObjectFormat
     *
     * @brief Accessor and modifier functions for the %DataObjectFormat
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::DataObjectFormat DataObjectFormatType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< DataObjectFormatType > DataObjectFormatSequence;

    /**
     * @brief Element iterator type.
     */
    typedef DataObjectFormatSequence::iterator DataObjectFormatIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef DataObjectFormatSequence::const_iterator DataObjectFormatConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DataObjectFormatType, char > DataObjectFormatTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const DataObjectFormatSequence&
    dataObjectFormat () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    DataObjectFormatSequence&
    dataObjectFormat ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    dataObjectFormat (const DataObjectFormatSequence& s);

    //@}

    /**
     * @name CommitmentTypeIndication
     *
     * @brief Accessor and modifier functions for the %CommitmentTypeIndication
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CommitmentTypeIndication CommitmentTypeIndicationType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CommitmentTypeIndicationType > CommitmentTypeIndicationSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CommitmentTypeIndicationSequence::iterator CommitmentTypeIndicationIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CommitmentTypeIndicationSequence::const_iterator CommitmentTypeIndicationConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CommitmentTypeIndicationType, char > CommitmentTypeIndicationTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CommitmentTypeIndicationSequence&
    commitmentTypeIndication () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CommitmentTypeIndicationSequence&
    commitmentTypeIndication ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    commitmentTypeIndication (const CommitmentTypeIndicationSequence& s);

    //@}

    /**
     * @name AllDataObjectsTimeStamp
     *
     * @brief Accessor and modifier functions for the %AllDataObjectsTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::XAdESTimeStamp AllDataObjectsTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< AllDataObjectsTimeStampType > AllDataObjectsTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef AllDataObjectsTimeStampSequence::iterator AllDataObjectsTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef AllDataObjectsTimeStampSequence::const_iterator AllDataObjectsTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AllDataObjectsTimeStampType, char > AllDataObjectsTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const AllDataObjectsTimeStampSequence&
    allDataObjectsTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    AllDataObjectsTimeStampSequence&
    allDataObjectsTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    allDataObjectsTimeStamp (const AllDataObjectsTimeStampSequence& s);

    //@}

    /**
     * @name IndividualDataObjectsTimeStamp
     *
     * @brief Accessor and modifier functions for the %IndividualDataObjectsTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::XAdESTimeStamp IndividualDataObjectsTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< IndividualDataObjectsTimeStampType > IndividualDataObjectsTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef IndividualDataObjectsTimeStampSequence::iterator IndividualDataObjectsTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef IndividualDataObjectsTimeStampSequence::const_iterator IndividualDataObjectsTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IndividualDataObjectsTimeStampType, char > IndividualDataObjectsTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const IndividualDataObjectsTimeStampSequence&
    individualDataObjectsTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    IndividualDataObjectsTimeStampSequence&
    individualDataObjectsTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    individualDataObjectsTimeStamp (const IndividualDataObjectsTimeStampSequence& s);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SignedDataObjectProperties ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SignedDataObjectProperties (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SignedDataObjectProperties (const SignedDataObjectProperties& x,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SignedDataObjectProperties*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SignedDataObjectProperties ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DataObjectFormatSequence DataObjectFormat_;
    CommitmentTypeIndicationSequence CommitmentTypeIndication_;
    AllDataObjectsTimeStampSequence AllDataObjectsTimeStamp_;
    IndividualDataObjectsTimeStampSequence IndividualDataObjectsTimeStamp_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %UnsignedSignaturePropertiesType schema type.
   *
   * @nosubgrouping
   */
  class UnsignedSignatureProperties: public ::xml_schema::Type
  {
    public:
    /**
     * @name CounterSignature
     *
     * @brief Accessor and modifier functions for the %CounterSignature
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CounterSignature CounterSignatureType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CounterSignatureType > CounterSignatureSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CounterSignatureSequence::iterator CounterSignatureIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CounterSignatureSequence::const_iterator CounterSignatureConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CounterSignatureType, char > CounterSignatureTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CounterSignatureSequence&
    counterSignature () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CounterSignatureSequence&
    counterSignature ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    counterSignature (const CounterSignatureSequence& s);

    //@}

    /**
     * @name SignatureTimeStamp
     *
     * @brief Accessor and modifier functions for the %SignatureTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::XAdESTimeStamp SignatureTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< SignatureTimeStampType > SignatureTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef SignatureTimeStampSequence::iterator SignatureTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef SignatureTimeStampSequence::const_iterator SignatureTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignatureTimeStampType, char > SignatureTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const SignatureTimeStampSequence&
    signatureTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    SignatureTimeStampSequence&
    signatureTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    signatureTimeStamp (const SignatureTimeStampSequence& s);

    //@}

    /**
     * @name CompleteCertificateRefs
     *
     * @brief Accessor and modifier functions for the %CompleteCertificateRefs
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CompleteCertificateRefs CompleteCertificateRefsType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CompleteCertificateRefsType > CompleteCertificateRefsSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CompleteCertificateRefsSequence::iterator CompleteCertificateRefsIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CompleteCertificateRefsSequence::const_iterator CompleteCertificateRefsConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CompleteCertificateRefsType, char > CompleteCertificateRefsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CompleteCertificateRefsSequence&
    completeCertificateRefs () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CompleteCertificateRefsSequence&
    completeCertificateRefs ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    completeCertificateRefs (const CompleteCertificateRefsSequence& s);

    //@}

    /**
     * @name CompleteRevocationRefs
     *
     * @brief Accessor and modifier functions for the %CompleteRevocationRefs
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CompleteRevocationRefs CompleteRevocationRefsType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CompleteRevocationRefsType > CompleteRevocationRefsSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CompleteRevocationRefsSequence::iterator CompleteRevocationRefsIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CompleteRevocationRefsSequence::const_iterator CompleteRevocationRefsConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CompleteRevocationRefsType, char > CompleteRevocationRefsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CompleteRevocationRefsSequence&
    completeRevocationRefs () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CompleteRevocationRefsSequence&
    completeRevocationRefs ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    completeRevocationRefs (const CompleteRevocationRefsSequence& s);

    //@}

    /**
     * @name AttributeCertificateRefs
     *
     * @brief Accessor and modifier functions for the %AttributeCertificateRefs
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CompleteCertificateRefs AttributeCertificateRefsType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< AttributeCertificateRefsType > AttributeCertificateRefsSequence;

    /**
     * @brief Element iterator type.
     */
    typedef AttributeCertificateRefsSequence::iterator AttributeCertificateRefsIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef AttributeCertificateRefsSequence::const_iterator AttributeCertificateRefsConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AttributeCertificateRefsType, char > AttributeCertificateRefsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const AttributeCertificateRefsSequence&
    attributeCertificateRefs () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    AttributeCertificateRefsSequence&
    attributeCertificateRefs ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    attributeCertificateRefs (const AttributeCertificateRefsSequence& s);

    //@}

    /**
     * @name AttributeRevocationRefs
     *
     * @brief Accessor and modifier functions for the %AttributeRevocationRefs
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CompleteRevocationRefs AttributeRevocationRefsType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< AttributeRevocationRefsType > AttributeRevocationRefsSequence;

    /**
     * @brief Element iterator type.
     */
    typedef AttributeRevocationRefsSequence::iterator AttributeRevocationRefsIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef AttributeRevocationRefsSequence::const_iterator AttributeRevocationRefsConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AttributeRevocationRefsType, char > AttributeRevocationRefsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const AttributeRevocationRefsSequence&
    attributeRevocationRefs () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    AttributeRevocationRefsSequence&
    attributeRevocationRefs ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    attributeRevocationRefs (const AttributeRevocationRefsSequence& s);

    //@}

    /**
     * @name SigAndRefsTimeStamp
     *
     * @brief Accessor and modifier functions for the %SigAndRefsTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::XAdESTimeStamp SigAndRefsTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< SigAndRefsTimeStampType > SigAndRefsTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef SigAndRefsTimeStampSequence::iterator SigAndRefsTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef SigAndRefsTimeStampSequence::const_iterator SigAndRefsTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigAndRefsTimeStampType, char > SigAndRefsTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const SigAndRefsTimeStampSequence&
    sigAndRefsTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    SigAndRefsTimeStampSequence&
    sigAndRefsTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    sigAndRefsTimeStamp (const SigAndRefsTimeStampSequence& s);

    //@}

    /**
     * @name RefsOnlyTimeStamp
     *
     * @brief Accessor and modifier functions for the %RefsOnlyTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::XAdESTimeStamp RefsOnlyTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< RefsOnlyTimeStampType > RefsOnlyTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef RefsOnlyTimeStampSequence::iterator RefsOnlyTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef RefsOnlyTimeStampSequence::const_iterator RefsOnlyTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RefsOnlyTimeStampType, char > RefsOnlyTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const RefsOnlyTimeStampSequence&
    refsOnlyTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    RefsOnlyTimeStampSequence&
    refsOnlyTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    refsOnlyTimeStamp (const RefsOnlyTimeStampSequence& s);

    //@}

    /**
     * @name CertificateValues
     *
     * @brief Accessor and modifier functions for the %CertificateValues
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CertificateValues CertificateValuesType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CertificateValuesType > CertificateValuesSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CertificateValuesSequence::iterator CertificateValuesIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CertificateValuesSequence::const_iterator CertificateValuesConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CertificateValuesType, char > CertificateValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CertificateValuesSequence&
    certificateValues () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CertificateValuesSequence&
    certificateValues ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    certificateValues (const CertificateValuesSequence& s);

    //@}

    /**
     * @name RevocationValues
     *
     * @brief Accessor and modifier functions for the %RevocationValues
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::RevocationValues RevocationValuesType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< RevocationValuesType > RevocationValuesSequence;

    /**
     * @brief Element iterator type.
     */
    typedef RevocationValuesSequence::iterator RevocationValuesIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef RevocationValuesSequence::const_iterator RevocationValuesConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RevocationValuesType, char > RevocationValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const RevocationValuesSequence&
    revocationValues () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    RevocationValuesSequence&
    revocationValues ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    revocationValues (const RevocationValuesSequence& s);

    //@}

    /**
     * @name AttrAuthoritiesCertValues
     *
     * @brief Accessor and modifier functions for the %AttrAuthoritiesCertValues
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CertificateValues AttrAuthoritiesCertValuesType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< AttrAuthoritiesCertValuesType > AttrAuthoritiesCertValuesSequence;

    /**
     * @brief Element iterator type.
     */
    typedef AttrAuthoritiesCertValuesSequence::iterator AttrAuthoritiesCertValuesIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef AttrAuthoritiesCertValuesSequence::const_iterator AttrAuthoritiesCertValuesConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AttrAuthoritiesCertValuesType, char > AttrAuthoritiesCertValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const AttrAuthoritiesCertValuesSequence&
    attrAuthoritiesCertValues () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    AttrAuthoritiesCertValuesSequence&
    attrAuthoritiesCertValues ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    attrAuthoritiesCertValues (const AttrAuthoritiesCertValuesSequence& s);

    //@}

    /**
     * @name AttributeRevocationValues
     *
     * @brief Accessor and modifier functions for the %AttributeRevocationValues
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::RevocationValues AttributeRevocationValuesType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< AttributeRevocationValuesType > AttributeRevocationValuesSequence;

    /**
     * @brief Element iterator type.
     */
    typedef AttributeRevocationValuesSequence::iterator AttributeRevocationValuesIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef AttributeRevocationValuesSequence::const_iterator AttributeRevocationValuesConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AttributeRevocationValuesType, char > AttributeRevocationValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const AttributeRevocationValuesSequence&
    attributeRevocationValues () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    AttributeRevocationValuesSequence&
    attributeRevocationValues ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    attributeRevocationValues (const AttributeRevocationValuesSequence& s);

    //@}

    /**
     * @name ArchiveTimeStamp
     *
     * @brief Accessor and modifier functions for the %ArchiveTimeStamp
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::XAdESTimeStamp ArchiveTimeStampType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ArchiveTimeStampType > ArchiveTimeStampSequence;

    /**
     * @brief Element iterator type.
     */
    typedef ArchiveTimeStampSequence::iterator ArchiveTimeStampIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef ArchiveTimeStampSequence::const_iterator ArchiveTimeStampConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ArchiveTimeStampType, char > ArchiveTimeStampTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ArchiveTimeStampSequence&
    archiveTimeStamp () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ArchiveTimeStampSequence&
    archiveTimeStamp ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    archiveTimeStamp (const ArchiveTimeStampSequence& s);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    UnsignedSignatureProperties ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    UnsignedSignatureProperties (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    UnsignedSignatureProperties (const UnsignedSignatureProperties& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual UnsignedSignatureProperties*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~UnsignedSignatureProperties ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CounterSignatureSequence CounterSignature_;
    SignatureTimeStampSequence SignatureTimeStamp_;
    CompleteCertificateRefsSequence CompleteCertificateRefs_;
    CompleteRevocationRefsSequence CompleteRevocationRefs_;
    AttributeCertificateRefsSequence AttributeCertificateRefs_;
    AttributeRevocationRefsSequence AttributeRevocationRefs_;
    SigAndRefsTimeStampSequence SigAndRefsTimeStamp_;
    RefsOnlyTimeStampSequence RefsOnlyTimeStamp_;
    CertificateValuesSequence CertificateValues_;
    RevocationValuesSequence RevocationValues_;
    AttrAuthoritiesCertValuesSequence AttrAuthoritiesCertValues_;
    AttributeRevocationValuesSequence AttributeRevocationValues_;
    ArchiveTimeStampSequence ArchiveTimeStamp_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %UnsignedDataObjectPropertiesType schema type.
   *
   * @nosubgrouping
   */
  class UnsignedDataObjectProperties: public ::xml_schema::Type
  {
    public:
    /**
     * @name UnsignedDataObjectProperty
     *
     * @brief Accessor and modifier functions for the %UnsignedDataObjectProperty
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any UnsignedDataObjectPropertyType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< UnsignedDataObjectPropertyType > UnsignedDataObjectPropertySequence;

    /**
     * @brief Element iterator type.
     */
    typedef UnsignedDataObjectPropertySequence::iterator UnsignedDataObjectPropertyIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef UnsignedDataObjectPropertySequence::const_iterator UnsignedDataObjectPropertyConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< UnsignedDataObjectPropertyType, char > UnsignedDataObjectPropertyTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const UnsignedDataObjectPropertySequence&
    unsignedDataObjectProperty () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    UnsignedDataObjectPropertySequence&
    unsignedDataObjectProperty ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    unsignedDataObjectProperty (const UnsignedDataObjectPropertySequence& s);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    UnsignedDataObjectProperties ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    UnsignedDataObjectProperties (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    UnsignedDataObjectProperties (const UnsignedDataObjectProperties& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual UnsignedDataObjectProperties*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~UnsignedDataObjectProperties ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    UnsignedDataObjectPropertySequence UnsignedDataObjectProperty_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %QualifyingPropertiesReferenceType schema type.
   *
   * @nosubgrouping
   */
  class QualifyingPropertiesReference: public ::xml_schema::Type
  {
    public:
    /**
     * @name URI
     *
     * @brief Accessor and modifier functions for the %URI
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri URIType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const URIType&
    uRI () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    URIType&
    uRI ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    uRI (const URIType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    uRI (::std::auto_ptr< URIType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    QualifyingPropertiesReference (const URIType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    QualifyingPropertiesReference (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    QualifyingPropertiesReference (const QualifyingPropertiesReference& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual QualifyingPropertiesReference*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~QualifyingPropertiesReference ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< URIType > URI_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CertIDListType schema type.
   *
   * @nosubgrouping
   */
  class CertIDList: public ::xml_schema::Type
  {
    public:
    /**
     * @name Cert
     *
     * @brief Accessor and modifier functions for the %Cert
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CertID CertType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CertType > CertSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CertSequence::iterator CertIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CertSequence::const_iterator CertConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CertType, char > CertTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CertSequence&
    cert () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CertSequence&
    cert ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    cert (const CertSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CertIDList ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CertIDList (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CertIDList (const CertIDList& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CertIDList*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CertIDList ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CertSequence Cert_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CertIDType schema type.
   *
   * @nosubgrouping
   */
  class CertID: public ::xml_schema::Type
  {
    public:
    /**
     * @name CertDigest
     *
     * @brief Accessor and modifier functions for the %CertDigest
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::DigestAlgAndValue CertDigestType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CertDigestType, char > CertDigestTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const CertDigestType&
    certDigest () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    CertDigestType&
    certDigest ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    certDigest (const CertDigestType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    certDigest (::std::auto_ptr< CertDigestType > p);

    //@}

    /**
     * @name IssuerSerial
     *
     * @brief Accessor and modifier functions for the %IssuerSerial
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::X509IssuerSerial IssuerSerialType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IssuerSerialType, char > IssuerSerialTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const IssuerSerialType&
    issuerSerial () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    IssuerSerialType&
    issuerSerial ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    issuerSerial (const IssuerSerialType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    issuerSerial (::std::auto_ptr< IssuerSerialType > p);

    //@}

    /**
     * @name URI
     *
     * @brief Accessor and modifier functions for the %URI
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri URIType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< URIType > URIOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const URIOptional&
    uRI () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    URIOptional&
    uRI ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    uRI (const URIType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    uRI (const URIOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    uRI (::std::auto_ptr< URIType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CertID (const CertDigestType&,
            const IssuerSerialType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    CertID (::std::auto_ptr< CertDigestType >&,
            ::std::auto_ptr< IssuerSerialType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CertID (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CertID (const CertID& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CertID*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CertID ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< CertDigestType > CertDigest_;
    ::xsd::cxx::tree::one< IssuerSerialType > IssuerSerial_;
    URIOptional URI_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %DigestAlgAndValueType schema type.
   *
   * @nosubgrouping
   */
  class DigestAlgAndValue: public ::xml_schema::Type
  {
    public:
    /**
     * @name DigestMethod
     *
     * @brief Accessor and modifier functions for the %DigestMethod
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::DigestMethod DigestMethodType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DigestMethodType, char > DigestMethodTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DigestMethodType&
    digestMethod () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DigestMethodType&
    digestMethod ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    digestMethod (const DigestMethodType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    digestMethod (::std::auto_ptr< DigestMethodType > p);

    //@}

    /**
     * @name DigestValue
     *
     * @brief Accessor and modifier functions for the %DigestValue
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::DigestValue DigestValueType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DigestValueType, char > DigestValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DigestValueType&
    digestValue () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DigestValueType&
    digestValue ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    digestValue (const DigestValueType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    digestValue (::std::auto_ptr< DigestValueType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DigestAlgAndValue (const DigestMethodType&,
                       const DigestValueType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    DigestAlgAndValue (::std::auto_ptr< DigestMethodType >&,
                       const DigestValueType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DigestAlgAndValue (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DigestAlgAndValue (const DigestAlgAndValue& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DigestAlgAndValue*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DigestAlgAndValue ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< DigestMethodType > DigestMethod_;
    ::xsd::cxx::tree::one< DigestValueType > DigestValue_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SignaturePolicyIdentifierType schema type.
   *
   * @nosubgrouping
   */
  class SignaturePolicyIdentifier: public ::xml_schema::Type
  {
    public:
    /**
     * @name SignaturePolicyId
     *
     * @brief Accessor and modifier functions for the %SignaturePolicyId
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::SignaturePolicyId SignaturePolicyIdType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SignaturePolicyIdType > SignaturePolicyIdOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignaturePolicyIdType, char > SignaturePolicyIdTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SignaturePolicyIdOptional&
    signaturePolicyId () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SignaturePolicyIdOptional&
    signaturePolicyId ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signaturePolicyId (const SignaturePolicyIdType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signaturePolicyId (const SignaturePolicyIdOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signaturePolicyId (::std::auto_ptr< SignaturePolicyIdType > p);

    //@}

    /**
     * @name SignaturePolicyImplied
     *
     * @brief Accessor and modifier functions for the %SignaturePolicyImplied
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Type SignaturePolicyImpliedType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SignaturePolicyImpliedType > SignaturePolicyImpliedOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignaturePolicyImpliedType, char > SignaturePolicyImpliedTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SignaturePolicyImpliedOptional&
    signaturePolicyImplied () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SignaturePolicyImpliedOptional&
    signaturePolicyImplied ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signaturePolicyImplied (const SignaturePolicyImpliedType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    signaturePolicyImplied (const SignaturePolicyImpliedOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signaturePolicyImplied (::std::auto_ptr< SignaturePolicyImpliedType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SignaturePolicyIdentifier ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SignaturePolicyIdentifier (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SignaturePolicyIdentifier (const SignaturePolicyIdentifier& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SignaturePolicyIdentifier*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SignaturePolicyIdentifier ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    SignaturePolicyIdOptional SignaturePolicyId_;
    SignaturePolicyImpliedOptional SignaturePolicyImplied_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SignaturePolicyIdType schema type.
   *
   * @nosubgrouping
   */
  class SignaturePolicyId: public ::xml_schema::Type
  {
    public:
    /**
     * @name SigPolicyId
     *
     * @brief Accessor and modifier functions for the %SigPolicyId
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::ObjectIdentifier SigPolicyIdType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigPolicyIdType, char > SigPolicyIdTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SigPolicyIdType&
    sigPolicyId () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SigPolicyIdType&
    sigPolicyId ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    sigPolicyId (const SigPolicyIdType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    sigPolicyId (::std::auto_ptr< SigPolicyIdType > p);

    //@}

    /**
     * @name Transforms
     *
     * @brief Accessor and modifier functions for the %Transforms
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::Transforms TransformsType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< TransformsType > TransformsOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< TransformsType, char > TransformsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const TransformsOptional&
    transforms () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    TransformsOptional&
    transforms ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    transforms (const TransformsType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    transforms (const TransformsOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    transforms (::std::auto_ptr< TransformsType > p);

    //@}

    /**
     * @name SigPolicyHash
     *
     * @brief Accessor and modifier functions for the %SigPolicyHash
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::DigestAlgAndValue SigPolicyHashType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigPolicyHashType, char > SigPolicyHashTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SigPolicyHashType&
    sigPolicyHash () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SigPolicyHashType&
    sigPolicyHash ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    sigPolicyHash (const SigPolicyHashType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    sigPolicyHash (::std::auto_ptr< SigPolicyHashType > p);

    //@}

    /**
     * @name SigPolicyQualifiers
     *
     * @brief Accessor and modifier functions for the %SigPolicyQualifiers
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::SigPolicyQualifiersList SigPolicyQualifiersType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SigPolicyQualifiersType > SigPolicyQualifiersOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigPolicyQualifiersType, char > SigPolicyQualifiersTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SigPolicyQualifiersOptional&
    sigPolicyQualifiers () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SigPolicyQualifiersOptional&
    sigPolicyQualifiers ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    sigPolicyQualifiers (const SigPolicyQualifiersType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    sigPolicyQualifiers (const SigPolicyQualifiersOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    sigPolicyQualifiers (::std::auto_ptr< SigPolicyQualifiersType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SignaturePolicyId (const SigPolicyIdType&,
                       const SigPolicyHashType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    SignaturePolicyId (::std::auto_ptr< SigPolicyIdType >&,
                       ::std::auto_ptr< SigPolicyHashType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SignaturePolicyId (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SignaturePolicyId (const SignaturePolicyId& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SignaturePolicyId*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SignaturePolicyId ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SigPolicyIdType > SigPolicyId_;
    TransformsOptional Transforms_;
    ::xsd::cxx::tree::one< SigPolicyHashType > SigPolicyHash_;
    SigPolicyQualifiersOptional SigPolicyQualifiers_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SigPolicyQualifiersListType schema type.
   *
   * @nosubgrouping
   */
  class SigPolicyQualifiersList: public ::xml_schema::Type
  {
    public:
    /**
     * @name SigPolicyQualifier
     *
     * @brief Accessor and modifier functions for the %SigPolicyQualifier
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any SigPolicyQualifierType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< SigPolicyQualifierType > SigPolicyQualifierSequence;

    /**
     * @brief Element iterator type.
     */
    typedef SigPolicyQualifierSequence::iterator SigPolicyQualifierIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef SigPolicyQualifierSequence::const_iterator SigPolicyQualifierConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigPolicyQualifierType, char > SigPolicyQualifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const SigPolicyQualifierSequence&
    sigPolicyQualifier () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    SigPolicyQualifierSequence&
    sigPolicyQualifier ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    sigPolicyQualifier (const SigPolicyQualifierSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SigPolicyQualifiersList ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SigPolicyQualifiersList (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SigPolicyQualifiersList (const SigPolicyQualifiersList& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SigPolicyQualifiersList*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SigPolicyQualifiersList ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    SigPolicyQualifierSequence SigPolicyQualifier_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SPUserNoticeType schema type.
   *
   * @nosubgrouping
   */
  class SPUserNotice: public ::xml_schema::Type
  {
    public:
    /**
     * @name NoticeRef
     *
     * @brief Accessor and modifier functions for the %NoticeRef
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::NoticeReference NoticeRefType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< NoticeRefType > NoticeRefOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NoticeRefType, char > NoticeRefTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const NoticeRefOptional&
    noticeRef () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    NoticeRefOptional&
    noticeRef ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    noticeRef (const NoticeRefType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    noticeRef (const NoticeRefOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    noticeRef (::std::auto_ptr< NoticeRefType > p);

    //@}

    /**
     * @name ExplicitText
     *
     * @brief Accessor and modifier functions for the %ExplicitText
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String ExplicitTextType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ExplicitTextType > ExplicitTextOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ExplicitTextType, char > ExplicitTextTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ExplicitTextOptional&
    explicitText () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ExplicitTextOptional&
    explicitText ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    explicitText (const ExplicitTextType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    explicitText (const ExplicitTextOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    explicitText (::std::auto_ptr< ExplicitTextType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SPUserNotice ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SPUserNotice (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SPUserNotice (const SPUserNotice& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SPUserNotice*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SPUserNotice ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    NoticeRefOptional NoticeRef_;
    ExplicitTextOptional ExplicitText_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %NoticeReferenceType schema type.
   *
   * @nosubgrouping
   */
  class NoticeReference: public ::xml_schema::Type
  {
    public:
    /**
     * @name Organization
     *
     * @brief Accessor and modifier functions for the %Organization
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String OrganizationType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OrganizationType, char > OrganizationTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const OrganizationType&
    organization () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    OrganizationType&
    organization ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    organization (const OrganizationType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    organization (::std::auto_ptr< OrganizationType > p);

    //@}

    /**
     * @name NoticeNumbers
     *
     * @brief Accessor and modifier functions for the %NoticeNumbers
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::IntegerList NoticeNumbersType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NoticeNumbersType, char > NoticeNumbersTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const NoticeNumbersType&
    noticeNumbers () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    NoticeNumbersType&
    noticeNumbers ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    noticeNumbers (const NoticeNumbersType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    noticeNumbers (::std::auto_ptr< NoticeNumbersType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    NoticeReference (const OrganizationType&,
                     const NoticeNumbersType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    NoticeReference (const OrganizationType&,
                     ::std::auto_ptr< NoticeNumbersType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    NoticeReference (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    NoticeReference (const NoticeReference& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual NoticeReference*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~NoticeReference ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< OrganizationType > Organization_;
    ::xsd::cxx::tree::one< NoticeNumbersType > NoticeNumbers_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %IntegerListType schema type.
   *
   * @nosubgrouping
   */
  class IntegerList: public ::xml_schema::Type
  {
    public:
    /**
     * @name int
     *
     * @brief Accessor and modifier functions for the %int
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Integer IntType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< IntType > IntSequence;

    /**
     * @brief Element iterator type.
     */
    typedef IntSequence::iterator IntIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef IntSequence::const_iterator IntConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IntType, char > IntTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const IntSequence&
    int_ () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    IntSequence&
    int_ ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    int_ (const IntSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    IntegerList ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    IntegerList (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    IntegerList (const IntegerList& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual IntegerList*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~IntegerList ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    IntSequence int__;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CounterSignatureType schema type.
   *
   * @nosubgrouping
   */
  class CounterSignature: public ::xml_schema::Type
  {
    public:
    /**
     * @name Signature
     *
     * @brief Accessor and modifier functions for the %Signature
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ds::Signature SignatureType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SignatureType, char > SignatureTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SignatureType&
    signature () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SignatureType&
    signature ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    signature (const SignatureType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    signature (::std::auto_ptr< SignatureType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CounterSignature (const SignatureType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    CounterSignature (::std::auto_ptr< SignatureType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CounterSignature (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CounterSignature (const CounterSignature& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CounterSignature*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CounterSignature ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SignatureType > Signature_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %DataObjectFormatType schema type.
   *
   * @nosubgrouping
   */
  class DataObjectFormat: public ::xml_schema::Type
  {
    public:
    /**
     * @name Description
     *
     * @brief Accessor and modifier functions for the %Description
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String DescriptionType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DescriptionOptional&
    description () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DescriptionOptional&
    description ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    description (const DescriptionType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    description (const DescriptionOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    description (::std::auto_ptr< DescriptionType > p);

    //@}

    /**
     * @name ObjectIdentifier
     *
     * @brief Accessor and modifier functions for the %ObjectIdentifier
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::ObjectIdentifier ObjectIdentifierType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ObjectIdentifierType > ObjectIdentifierOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ObjectIdentifierType, char > ObjectIdentifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ObjectIdentifierOptional&
    objectIdentifier () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ObjectIdentifierOptional&
    objectIdentifier ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    objectIdentifier (const ObjectIdentifierType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    objectIdentifier (const ObjectIdentifierOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    objectIdentifier (::std::auto_ptr< ObjectIdentifierType > p);

    //@}

    /**
     * @name MimeType
     *
     * @brief Accessor and modifier functions for the %MimeType
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String MimeTypeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< MimeTypeType > MimeTypeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MimeTypeType, char > MimeTypeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const MimeTypeOptional&
    mimeType () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    MimeTypeOptional&
    mimeType ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    mimeType (const MimeTypeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    mimeType (const MimeTypeOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    mimeType (::std::auto_ptr< MimeTypeType > p);

    //@}

    /**
     * @name Encoding
     *
     * @brief Accessor and modifier functions for the %Encoding
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Uri EncodingType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< EncodingType > EncodingOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EncodingType, char > EncodingTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const EncodingOptional&
    encoding () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    EncodingOptional&
    encoding ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    encoding (const EncodingType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    encoding (const EncodingOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    encoding (::std::auto_ptr< EncodingType > p);

    //@}

    /**
     * @name ObjectReference
     *
     * @brief Accessor and modifier functions for the %ObjectReference
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri ObjectReferenceType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ObjectReferenceType, char > ObjectReferenceTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ObjectReferenceType&
    objectReference () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ObjectReferenceType&
    objectReference ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    objectReference (const ObjectReferenceType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    objectReference (::std::auto_ptr< ObjectReferenceType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DataObjectFormat (const ObjectReferenceType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DataObjectFormat (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DataObjectFormat (const DataObjectFormat& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DataObjectFormat*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DataObjectFormat ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DescriptionOptional Description_;
    ObjectIdentifierOptional ObjectIdentifier_;
    MimeTypeOptional MimeType_;
    EncodingOptional Encoding_;
    ::xsd::cxx::tree::one< ObjectReferenceType > ObjectReference_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CommitmentTypeIndicationType schema type.
   *
   * @nosubgrouping
   */
  class CommitmentTypeIndication: public ::xml_schema::Type
  {
    public:
    /**
     * @name CommitmentTypeId
     *
     * @brief Accessor and modifier functions for the %CommitmentTypeId
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::ObjectIdentifier CommitmentTypeIdType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CommitmentTypeIdType, char > CommitmentTypeIdTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const CommitmentTypeIdType&
    commitmentTypeId () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    CommitmentTypeIdType&
    commitmentTypeId ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    commitmentTypeId (const CommitmentTypeIdType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    commitmentTypeId (::std::auto_ptr< CommitmentTypeIdType > p);

    //@}

    /**
     * @name ObjectReference
     *
     * @brief Accessor and modifier functions for the %ObjectReference
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Uri ObjectReferenceType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ObjectReferenceType > ObjectReferenceSequence;

    /**
     * @brief Element iterator type.
     */
    typedef ObjectReferenceSequence::iterator ObjectReferenceIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef ObjectReferenceSequence::const_iterator ObjectReferenceConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ObjectReferenceType, char > ObjectReferenceTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ObjectReferenceSequence&
    objectReference () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ObjectReferenceSequence&
    objectReference ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    objectReference (const ObjectReferenceSequence& s);

    //@}

    /**
     * @name AllSignedDataObjects
     *
     * @brief Accessor and modifier functions for the %AllSignedDataObjects
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Type AllSignedDataObjectsType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< AllSignedDataObjectsType > AllSignedDataObjectsOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AllSignedDataObjectsType, char > AllSignedDataObjectsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const AllSignedDataObjectsOptional&
    allSignedDataObjects () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    AllSignedDataObjectsOptional&
    allSignedDataObjects ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    allSignedDataObjects (const AllSignedDataObjectsType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    allSignedDataObjects (const AllSignedDataObjectsOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    allSignedDataObjects (::std::auto_ptr< AllSignedDataObjectsType > p);

    //@}

    /**
     * @name CommitmentTypeQualifiers
     *
     * @brief Accessor and modifier functions for the %CommitmentTypeQualifiers
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CommitmentTypeQualifiersList CommitmentTypeQualifiersType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CommitmentTypeQualifiersType > CommitmentTypeQualifiersOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CommitmentTypeQualifiersType, char > CommitmentTypeQualifiersTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CommitmentTypeQualifiersOptional&
    commitmentTypeQualifiers () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CommitmentTypeQualifiersOptional&
    commitmentTypeQualifiers ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    commitmentTypeQualifiers (const CommitmentTypeQualifiersType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    commitmentTypeQualifiers (const CommitmentTypeQualifiersOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    commitmentTypeQualifiers (::std::auto_ptr< CommitmentTypeQualifiersType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CommitmentTypeIndication (const CommitmentTypeIdType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    CommitmentTypeIndication (::std::auto_ptr< CommitmentTypeIdType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CommitmentTypeIndication (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CommitmentTypeIndication (const CommitmentTypeIndication& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CommitmentTypeIndication*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CommitmentTypeIndication ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< CommitmentTypeIdType > CommitmentTypeId_;
    ObjectReferenceSequence ObjectReference_;
    AllSignedDataObjectsOptional AllSignedDataObjects_;
    CommitmentTypeQualifiersOptional CommitmentTypeQualifiers_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CommitmentTypeQualifiersListType schema type.
   *
   * @nosubgrouping
   */
  class CommitmentTypeQualifiersList: public ::xml_schema::Type
  {
    public:
    /**
     * @name CommitmentTypeQualifier
     *
     * @brief Accessor and modifier functions for the %CommitmentTypeQualifier
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any CommitmentTypeQualifierType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CommitmentTypeQualifierType > CommitmentTypeQualifierSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CommitmentTypeQualifierSequence::iterator CommitmentTypeQualifierIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CommitmentTypeQualifierSequence::const_iterator CommitmentTypeQualifierConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CommitmentTypeQualifierType, char > CommitmentTypeQualifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CommitmentTypeQualifierSequence&
    commitmentTypeQualifier () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CommitmentTypeQualifierSequence&
    commitmentTypeQualifier ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    commitmentTypeQualifier (const CommitmentTypeQualifierSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CommitmentTypeQualifiersList ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CommitmentTypeQualifiersList (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CommitmentTypeQualifiersList (const CommitmentTypeQualifiersList& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CommitmentTypeQualifiersList*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CommitmentTypeQualifiersList ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CommitmentTypeQualifierSequence CommitmentTypeQualifier_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SignatureProductionPlaceType schema type.
   *
   * @nosubgrouping
   */
  class SignatureProductionPlace: public ::xml_schema::Type
  {
    public:
    /**
     * @name City
     *
     * @brief Accessor and modifier functions for the %City
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String CityType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CityType > CityOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CityType, char > CityTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CityOptional&
    city () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CityOptional&
    city ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    city (const CityType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    city (const CityOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    city (::std::auto_ptr< CityType > p);

    //@}

    /**
     * @name StateOrProvince
     *
     * @brief Accessor and modifier functions for the %StateOrProvince
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String StateOrProvinceType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< StateOrProvinceType > StateOrProvinceOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< StateOrProvinceType, char > StateOrProvinceTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const StateOrProvinceOptional&
    stateOrProvince () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    StateOrProvinceOptional&
    stateOrProvince ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    stateOrProvince (const StateOrProvinceType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    stateOrProvince (const StateOrProvinceOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    stateOrProvince (::std::auto_ptr< StateOrProvinceType > p);

    //@}

    /**
     * @name PostalCode
     *
     * @brief Accessor and modifier functions for the %PostalCode
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String PostalCodeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< PostalCodeType > PostalCodeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PostalCodeType, char > PostalCodeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const PostalCodeOptional&
    postalCode () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    PostalCodeOptional&
    postalCode ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    postalCode (const PostalCodeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    postalCode (const PostalCodeOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    postalCode (::std::auto_ptr< PostalCodeType > p);

    //@}

    /**
     * @name CountryName
     *
     * @brief Accessor and modifier functions for the %CountryName
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String CountryNameType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CountryNameType > CountryNameOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CountryNameType, char > CountryNameTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CountryNameOptional&
    countryName () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CountryNameOptional&
    countryName ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    countryName (const CountryNameType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    countryName (const CountryNameOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    countryName (::std::auto_ptr< CountryNameType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SignatureProductionPlace ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SignatureProductionPlace (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SignatureProductionPlace (const SignatureProductionPlace& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SignatureProductionPlace*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SignatureProductionPlace ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CityOptional City_;
    StateOrProvinceOptional StateOrProvince_;
    PostalCodeOptional PostalCode_;
    CountryNameOptional CountryName_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SignerRoleType schema type.
   *
   * @nosubgrouping
   */
  class SignerRole: public ::xml_schema::Type
  {
    public:
    /**
     * @name ClaimedRoles
     *
     * @brief Accessor and modifier functions for the %ClaimedRoles
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::ClaimedRolesList ClaimedRolesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ClaimedRolesType > ClaimedRolesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ClaimedRolesType, char > ClaimedRolesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ClaimedRolesOptional&
    claimedRoles () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ClaimedRolesOptional&
    claimedRoles ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    claimedRoles (const ClaimedRolesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    claimedRoles (const ClaimedRolesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    claimedRoles (::std::auto_ptr< ClaimedRolesType > p);

    //@}

    /**
     * @name CertifiedRoles
     *
     * @brief Accessor and modifier functions for the %CertifiedRoles
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CertifiedRolesList CertifiedRolesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CertifiedRolesType > CertifiedRolesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CertifiedRolesType, char > CertifiedRolesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CertifiedRolesOptional&
    certifiedRoles () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CertifiedRolesOptional&
    certifiedRoles ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    certifiedRoles (const CertifiedRolesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    certifiedRoles (const CertifiedRolesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    certifiedRoles (::std::auto_ptr< CertifiedRolesType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SignerRole ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SignerRole (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SignerRole (const SignerRole& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SignerRole*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SignerRole ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ClaimedRolesOptional ClaimedRoles_;
    CertifiedRolesOptional CertifiedRoles_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %ClaimedRolesListType schema type.
   *
   * @nosubgrouping
   */
  class ClaimedRolesList: public ::xml_schema::Type
  {
    public:
    /**
     * @name ClaimedRole
     *
     * @brief Accessor and modifier functions for the %ClaimedRole
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any ClaimedRoleType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ClaimedRoleType > ClaimedRoleSequence;

    /**
     * @brief Element iterator type.
     */
    typedef ClaimedRoleSequence::iterator ClaimedRoleIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef ClaimedRoleSequence::const_iterator ClaimedRoleConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ClaimedRoleType, char > ClaimedRoleTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ClaimedRoleSequence&
    claimedRole () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ClaimedRoleSequence&
    claimedRole ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    claimedRole (const ClaimedRoleSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ClaimedRolesList ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ClaimedRolesList (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ClaimedRolesList (const ClaimedRolesList& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ClaimedRolesList*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~ClaimedRolesList ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ClaimedRoleSequence ClaimedRole_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CertifiedRolesListType schema type.
   *
   * @nosubgrouping
   */
  class CertifiedRolesList: public ::xml_schema::Type
  {
    public:
    /**
     * @name CertifiedRole
     *
     * @brief Accessor and modifier functions for the %CertifiedRole
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::EncapsulatedPKIData CertifiedRoleType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CertifiedRoleType > CertifiedRoleSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CertifiedRoleSequence::iterator CertifiedRoleIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CertifiedRoleSequence::const_iterator CertifiedRoleConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CertifiedRoleType, char > CertifiedRoleTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CertifiedRoleSequence&
    certifiedRole () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CertifiedRoleSequence&
    certifiedRole ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    certifiedRole (const CertifiedRoleSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CertifiedRolesList ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CertifiedRolesList (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CertifiedRolesList (const CertifiedRolesList& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CertifiedRolesList*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CertifiedRolesList ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CertifiedRoleSequence CertifiedRole_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CompleteCertificateRefsType schema type.
   *
   * @nosubgrouping
   */
  class CompleteCertificateRefs: public ::xml_schema::Type
  {
    public:
    /**
     * @name CertRefs
     *
     * @brief Accessor and modifier functions for the %CertRefs
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CertIDList CertRefsType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CertRefsType, char > CertRefsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const CertRefsType&
    certRefs () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    CertRefsType&
    certRefs ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    certRefs (const CertRefsType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    certRefs (::std::auto_ptr< CertRefsType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CompleteCertificateRefs (const CertRefsType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    CompleteCertificateRefs (::std::auto_ptr< CertRefsType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CompleteCertificateRefs (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CompleteCertificateRefs (const CompleteCertificateRefs& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CompleteCertificateRefs*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CompleteCertificateRefs ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< CertRefsType > CertRefs_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CompleteRevocationRefsType schema type.
   *
   * @nosubgrouping
   */
  class CompleteRevocationRefs: public ::xml_schema::Type
  {
    public:
    /**
     * @name CRLRefs
     *
     * @brief Accessor and modifier functions for the %CRLRefs
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CRLRefs CRLRefsType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CRLRefsType > CRLRefsOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CRLRefsType, char > CRLRefsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CRLRefsOptional&
    cRLRefs () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CRLRefsOptional&
    cRLRefs ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    cRLRefs (const CRLRefsType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    cRLRefs (const CRLRefsOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    cRLRefs (::std::auto_ptr< CRLRefsType > p);

    //@}

    /**
     * @name OCSPRefs
     *
     * @brief Accessor and modifier functions for the %OCSPRefs
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::OCSPRefs OCSPRefsType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< OCSPRefsType > OCSPRefsOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OCSPRefsType, char > OCSPRefsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const OCSPRefsOptional&
    oCSPRefs () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    OCSPRefsOptional&
    oCSPRefs ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    oCSPRefs (const OCSPRefsType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    oCSPRefs (const OCSPRefsOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    oCSPRefs (::std::auto_ptr< OCSPRefsType > p);

    //@}

    /**
     * @name OtherRefs
     *
     * @brief Accessor and modifier functions for the %OtherRefs
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::OtherCertStatusRefs OtherRefsType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< OtherRefsType > OtherRefsOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OtherRefsType, char > OtherRefsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const OtherRefsOptional&
    otherRefs () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    OtherRefsOptional&
    otherRefs ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    otherRefs (const OtherRefsType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    otherRefs (const OtherRefsOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    otherRefs (::std::auto_ptr< OtherRefsType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CompleteRevocationRefs ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CompleteRevocationRefs (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CompleteRevocationRefs (const CompleteRevocationRefs& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CompleteRevocationRefs*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CompleteRevocationRefs ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CRLRefsOptional CRLRefs_;
    OCSPRefsOptional OCSPRefs_;
    OtherRefsOptional OtherRefs_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CRLRefsType schema type.
   *
   * @nosubgrouping
   */
  class CRLRefs: public ::xml_schema::Type
  {
    public:
    /**
     * @name CRLRef
     *
     * @brief Accessor and modifier functions for the %CRLRef
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CRLRef CRLRefType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CRLRefType > CRLRefSequence;

    /**
     * @brief Element iterator type.
     */
    typedef CRLRefSequence::iterator CRLRefIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef CRLRefSequence::const_iterator CRLRefConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CRLRefType, char > CRLRefTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CRLRefSequence&
    cRLRef () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CRLRefSequence&
    cRLRef ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    cRLRef (const CRLRefSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CRLRefs ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CRLRefs (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CRLRefs (const CRLRefs& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CRLRefs*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CRLRefs ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CRLRefSequence CRLRef_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CRLRefType schema type.
   *
   * @nosubgrouping
   */
  class CRLRef: public ::xml_schema::Type
  {
    public:
    /**
     * @name DigestAlgAndValue
     *
     * @brief Accessor and modifier functions for the %DigestAlgAndValue
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::DigestAlgAndValue DigestAlgAndValueType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DigestAlgAndValueType, char > DigestAlgAndValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DigestAlgAndValueType&
    digestAlgAndValue () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DigestAlgAndValueType&
    digestAlgAndValue ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    digestAlgAndValue (const DigestAlgAndValueType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    digestAlgAndValue (::std::auto_ptr< DigestAlgAndValueType > p);

    //@}

    /**
     * @name CRLIdentifier
     *
     * @brief Accessor and modifier functions for the %CRLIdentifier
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CRLIdentifier CRLIdentifierType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CRLIdentifierType > CRLIdentifierOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CRLIdentifierType, char > CRLIdentifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CRLIdentifierOptional&
    cRLIdentifier () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CRLIdentifierOptional&
    cRLIdentifier ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    cRLIdentifier (const CRLIdentifierType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    cRLIdentifier (const CRLIdentifierOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    cRLIdentifier (::std::auto_ptr< CRLIdentifierType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CRLRef (const DigestAlgAndValueType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    CRLRef (::std::auto_ptr< DigestAlgAndValueType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CRLRef (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CRLRef (const CRLRef& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CRLRef*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CRLRef ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< DigestAlgAndValueType > DigestAlgAndValue_;
    CRLIdentifierOptional CRLIdentifier_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CRLIdentifierType schema type.
   *
   * @nosubgrouping
   */
  class CRLIdentifier: public ::xml_schema::Type
  {
    public:
    /**
     * @name Issuer
     *
     * @brief Accessor and modifier functions for the %Issuer
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String IssuerType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IssuerType, char > IssuerTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const IssuerType&
    issuer () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    IssuerType&
    issuer ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    issuer (const IssuerType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    issuer (::std::auto_ptr< IssuerType > p);

    //@}

    /**
     * @name IssueTime
     *
     * @brief Accessor and modifier functions for the %IssueTime
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::DateTime IssueTimeType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IssueTimeType, char > IssueTimeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const IssueTimeType&
    issueTime () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    IssueTimeType&
    issueTime ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    issueTime (const IssueTimeType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    issueTime (::std::auto_ptr< IssueTimeType > p);

    //@}

    /**
     * @name Number
     *
     * @brief Accessor and modifier functions for the %Number
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Integer NumberType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< NumberType > NumberOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NumberType, char > NumberTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const NumberOptional&
    number () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    NumberOptional&
    number ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    number (const NumberType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    number (const NumberOptional& x);

    //@}

    /**
     * @name URI
     *
     * @brief Accessor and modifier functions for the %URI
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri URIType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< URIType > URIOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const URIOptional&
    uRI () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    URIOptional&
    uRI ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    uRI (const URIType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    uRI (const URIOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    uRI (::std::auto_ptr< URIType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CRLIdentifier (const IssuerType&,
                   const IssueTimeType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CRLIdentifier (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CRLIdentifier (const CRLIdentifier& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CRLIdentifier*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CRLIdentifier ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< IssuerType > Issuer_;
    ::xsd::cxx::tree::one< IssueTimeType > IssueTime_;
    NumberOptional Number_;
    URIOptional URI_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %OCSPRefsType schema type.
   *
   * @nosubgrouping
   */
  class OCSPRefs: public ::xml_schema::Type
  {
    public:
    /**
     * @name OCSPRef
     *
     * @brief Accessor and modifier functions for the %OCSPRef
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::OCSPRef OCSPRefType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< OCSPRefType > OCSPRefSequence;

    /**
     * @brief Element iterator type.
     */
    typedef OCSPRefSequence::iterator OCSPRefIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef OCSPRefSequence::const_iterator OCSPRefConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OCSPRefType, char > OCSPRefTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const OCSPRefSequence&
    oCSPRef () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    OCSPRefSequence&
    oCSPRef ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    oCSPRef (const OCSPRefSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    OCSPRefs ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OCSPRefs (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    OCSPRefs (const OCSPRefs& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual OCSPRefs*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~OCSPRefs ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    OCSPRefSequence OCSPRef_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %OCSPRefType schema type.
   *
   * @nosubgrouping
   */
  class OCSPRef: public ::xml_schema::Type
  {
    public:
    /**
     * @name OCSPIdentifier
     *
     * @brief Accessor and modifier functions for the %OCSPIdentifier
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::OCSPIdentifier OCSPIdentifierType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OCSPIdentifierType, char > OCSPIdentifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const OCSPIdentifierType&
    oCSPIdentifier () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    OCSPIdentifierType&
    oCSPIdentifier ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    oCSPIdentifier (const OCSPIdentifierType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    oCSPIdentifier (::std::auto_ptr< OCSPIdentifierType > p);

    //@}

    /**
     * @name DigestAlgAndValue
     *
     * @brief Accessor and modifier functions for the %DigestAlgAndValue
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::DigestAlgAndValue DigestAlgAndValueType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DigestAlgAndValueType > DigestAlgAndValueOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DigestAlgAndValueType, char > DigestAlgAndValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DigestAlgAndValueOptional&
    digestAlgAndValue () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DigestAlgAndValueOptional&
    digestAlgAndValue ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    digestAlgAndValue (const DigestAlgAndValueType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    digestAlgAndValue (const DigestAlgAndValueOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    digestAlgAndValue (::std::auto_ptr< DigestAlgAndValueType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    OCSPRef (const OCSPIdentifierType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    OCSPRef (::std::auto_ptr< OCSPIdentifierType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OCSPRef (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    OCSPRef (const OCSPRef& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual OCSPRef*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~OCSPRef ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< OCSPIdentifierType > OCSPIdentifier_;
    DigestAlgAndValueOptional DigestAlgAndValue_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %ResponderIDType schema type.
   *
   * @nosubgrouping
   */
  class ResponderID: public ::xml_schema::Type
  {
    public:
    /**
     * @name ByName
     *
     * @brief Accessor and modifier functions for the %ByName
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String ByNameType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ByNameType > ByNameOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ByNameType, char > ByNameTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ByNameOptional&
    byName () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ByNameOptional&
    byName ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    byName (const ByNameType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    byName (const ByNameOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    byName (::std::auto_ptr< ByNameType > p);

    //@}

    /**
     * @name ByKey
     *
     * @brief Accessor and modifier functions for the %ByKey
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Base64Binary ByKeyType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ByKeyType > ByKeyOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ByKeyType, char > ByKeyTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ByKeyOptional&
    byKey () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ByKeyOptional&
    byKey ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    byKey (const ByKeyType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    byKey (const ByKeyOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    byKey (::std::auto_ptr< ByKeyType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ResponderID ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ResponderID (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ResponderID (const ResponderID& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ResponderID*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~ResponderID ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ByNameOptional ByName_;
    ByKeyOptional ByKey_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %OCSPIdentifierType schema type.
   *
   * @nosubgrouping
   */
  class OCSPIdentifier: public ::xml_schema::Type
  {
    public:
    /**
     * @name ResponderID
     *
     * @brief Accessor and modifier functions for the %ResponderID
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::ResponderID ResponderIDType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ResponderIDType, char > ResponderIDTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ResponderIDType&
    responderID () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ResponderIDType&
    responderID ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    responderID (const ResponderIDType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    responderID (::std::auto_ptr< ResponderIDType > p);

    //@}

    /**
     * @name ProducedAt
     *
     * @brief Accessor and modifier functions for the %ProducedAt
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::DateTime ProducedAtType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ProducedAtType, char > ProducedAtTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ProducedAtType&
    producedAt () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ProducedAtType&
    producedAt ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    producedAt (const ProducedAtType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    producedAt (::std::auto_ptr< ProducedAtType > p);

    //@}

    /**
     * @name URI
     *
     * @brief Accessor and modifier functions for the %URI
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Uri URIType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< URIType > URIOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const URIOptional&
    uRI () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    URIOptional&
    uRI ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    uRI (const URIType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    uRI (const URIOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    uRI (::std::auto_ptr< URIType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    OCSPIdentifier (const ResponderIDType&,
                    const ProducedAtType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    OCSPIdentifier (::std::auto_ptr< ResponderIDType >&,
                    const ProducedAtType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OCSPIdentifier (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    OCSPIdentifier (const OCSPIdentifier& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual OCSPIdentifier*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~OCSPIdentifier ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ResponderIDType > ResponderID_;
    ::xsd::cxx::tree::one< ProducedAtType > ProducedAt_;
    URIOptional URI_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %OtherCertStatusRefsType schema type.
   *
   * @nosubgrouping
   */
  class OtherCertStatusRefs: public ::xml_schema::Type
  {
    public:
    /**
     * @name OtherRef
     *
     * @brief Accessor and modifier functions for the %OtherRef
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any OtherRefType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< OtherRefType > OtherRefSequence;

    /**
     * @brief Element iterator type.
     */
    typedef OtherRefSequence::iterator OtherRefIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef OtherRefSequence::const_iterator OtherRefConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OtherRefType, char > OtherRefTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const OtherRefSequence&
    otherRef () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    OtherRefSequence&
    otherRef ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    otherRef (const OtherRefSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    OtherCertStatusRefs ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OtherCertStatusRefs (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    OtherCertStatusRefs (const OtherCertStatusRefs& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual OtherCertStatusRefs*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~OtherCertStatusRefs ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    OtherRefSequence OtherRef_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CertificateValuesType schema type.
   *
   * @nosubgrouping
   */
  class CertificateValues: public ::xml_schema::Type
  {
    public:
    /**
     * @name EncapsulatedX509Certificate
     *
     * @brief Accessor and modifier functions for the %EncapsulatedX509Certificate
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::EncapsulatedPKIData EncapsulatedX509CertificateType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< EncapsulatedX509CertificateType > EncapsulatedX509CertificateSequence;

    /**
     * @brief Element iterator type.
     */
    typedef EncapsulatedX509CertificateSequence::iterator EncapsulatedX509CertificateIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef EncapsulatedX509CertificateSequence::const_iterator EncapsulatedX509CertificateConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EncapsulatedX509CertificateType, char > EncapsulatedX509CertificateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const EncapsulatedX509CertificateSequence&
    encapsulatedX509Certificate () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    EncapsulatedX509CertificateSequence&
    encapsulatedX509Certificate ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    encapsulatedX509Certificate (const EncapsulatedX509CertificateSequence& s);

    //@}

    /**
     * @name OtherCertificate
     *
     * @brief Accessor and modifier functions for the %OtherCertificate
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any OtherCertificateType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< OtherCertificateType > OtherCertificateSequence;

    /**
     * @brief Element iterator type.
     */
    typedef OtherCertificateSequence::iterator OtherCertificateIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef OtherCertificateSequence::const_iterator OtherCertificateConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OtherCertificateType, char > OtherCertificateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const OtherCertificateSequence&
    otherCertificate () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    OtherCertificateSequence&
    otherCertificate ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    otherCertificate (const OtherCertificateSequence& s);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CertificateValues ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CertificateValues (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CertificateValues (const CertificateValues& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CertificateValues*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CertificateValues ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    EncapsulatedX509CertificateSequence EncapsulatedX509Certificate_;
    OtherCertificateSequence OtherCertificate_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %RevocationValuesType schema type.
   *
   * @nosubgrouping
   */
  class RevocationValues: public ::xml_schema::Type
  {
    public:
    /**
     * @name CRLValues
     *
     * @brief Accessor and modifier functions for the %CRLValues
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::CRLValues CRLValuesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CRLValuesType > CRLValuesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CRLValuesType, char > CRLValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CRLValuesOptional&
    cRLValues () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CRLValuesOptional&
    cRLValues ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    cRLValues (const CRLValuesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    cRLValues (const CRLValuesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    cRLValues (::std::auto_ptr< CRLValuesType > p);

    //@}

    /**
     * @name OCSPValues
     *
     * @brief Accessor and modifier functions for the %OCSPValues
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::OCSPValues OCSPValuesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< OCSPValuesType > OCSPValuesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OCSPValuesType, char > OCSPValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const OCSPValuesOptional&
    oCSPValues () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    OCSPValuesOptional&
    oCSPValues ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    oCSPValues (const OCSPValuesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    oCSPValues (const OCSPValuesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    oCSPValues (::std::auto_ptr< OCSPValuesType > p);

    //@}

    /**
     * @name OtherValues
     *
     * @brief Accessor and modifier functions for the %OtherValues
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::OtherCertStatusValues OtherValuesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< OtherValuesType > OtherValuesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OtherValuesType, char > OtherValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const OtherValuesOptional&
    otherValues () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    OtherValuesOptional&
    otherValues ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    otherValues (const OtherValuesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    otherValues (const OtherValuesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    otherValues (::std::auto_ptr< OtherValuesType > p);

    //@}

    /**
     * @name Id
     *
     * @brief Accessor and modifier functions for the %Id
     * optional attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdType > IdOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdOptional&
    id () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IdOptional&
    id ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    id (const IdType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    id (const IdOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    id (::std::auto_ptr< IdType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    RevocationValues ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    RevocationValues (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    RevocationValues (const RevocationValues& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual RevocationValues*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~RevocationValues ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CRLValuesOptional CRLValues_;
    OCSPValuesOptional OCSPValues_;
    OtherValuesOptional OtherValues_;
    IdOptional Id_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %CRLValuesType schema type.
   *
   * @nosubgrouping
   */
  class CRLValues: public ::xml_schema::Type
  {
    public:
    /**
     * @name EncapsulatedCRLValue
     *
     * @brief Accessor and modifier functions for the %EncapsulatedCRLValue
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::EncapsulatedPKIData EncapsulatedCRLValueType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< EncapsulatedCRLValueType > EncapsulatedCRLValueSequence;

    /**
     * @brief Element iterator type.
     */
    typedef EncapsulatedCRLValueSequence::iterator EncapsulatedCRLValueIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef EncapsulatedCRLValueSequence::const_iterator EncapsulatedCRLValueConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EncapsulatedCRLValueType, char > EncapsulatedCRLValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const EncapsulatedCRLValueSequence&
    encapsulatedCRLValue () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    EncapsulatedCRLValueSequence&
    encapsulatedCRLValue ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    encapsulatedCRLValue (const EncapsulatedCRLValueSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CRLValues ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CRLValues (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CRLValues (const CRLValues& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CRLValues*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~CRLValues ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    EncapsulatedCRLValueSequence EncapsulatedCRLValue_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %OCSPValuesType schema type.
   *
   * @nosubgrouping
   */
  class OCSPValues: public ::xml_schema::Type
  {
    public:
    /**
     * @name EncapsulatedOCSPValue
     *
     * @brief Accessor and modifier functions for the %EncapsulatedOCSPValue
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::EncapsulatedPKIData EncapsulatedOCSPValueType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< EncapsulatedOCSPValueType > EncapsulatedOCSPValueSequence;

    /**
     * @brief Element iterator type.
     */
    typedef EncapsulatedOCSPValueSequence::iterator EncapsulatedOCSPValueIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef EncapsulatedOCSPValueSequence::const_iterator EncapsulatedOCSPValueConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EncapsulatedOCSPValueType, char > EncapsulatedOCSPValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const EncapsulatedOCSPValueSequence&
    encapsulatedOCSPValue () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    EncapsulatedOCSPValueSequence&
    encapsulatedOCSPValue ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    encapsulatedOCSPValue (const EncapsulatedOCSPValueSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    OCSPValues ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OCSPValues (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    OCSPValues (const OCSPValues& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual OCSPValues*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~OCSPValues ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    EncapsulatedOCSPValueSequence EncapsulatedOCSPValue_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %OtherCertStatusValuesType schema type.
   *
   * @nosubgrouping
   */
  class OtherCertStatusValues: public ::xml_schema::Type
  {
    public:
    /**
     * @name OtherValue
     *
     * @brief Accessor and modifier functions for the %OtherValue
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xades::Any OtherValueType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< OtherValueType > OtherValueSequence;

    /**
     * @brief Element iterator type.
     */
    typedef OtherValueSequence::iterator OtherValueIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef OtherValueSequence::const_iterator OtherValueConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OtherValueType, char > OtherValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const OtherValueSequence&
    otherValue () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    OtherValueSequence&
    otherValue ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    otherValue (const OtherValueSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    OtherCertStatusValues ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OtherCertStatusValues (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    OtherCertStatusValues (const OtherCertStatusValues& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual OtherCertStatusValues*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~OtherCertStatusValues ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    OtherValueSequence OtherValue_;

    //@endcond
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xades
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xades
{
  void
  operator<< (::xercesc::DOMElement&, const Any&);

  void
  operator<< (::xercesc::DOMElement&, const ObjectIdentifier&);

  void
  operator<< (::xercesc::DOMElement&, const Identifier&);

  void
  operator<< (::xercesc::DOMElement&, const Qualifier&);

  void
  operator<< (::xercesc::DOMAttr&, const Qualifier&);

  void
  operator<< (::xml_schema::ListStream&,
              const Qualifier&);

  void
  operator<< (::xercesc::DOMElement&, const DocumentationReferences&);

  void
  operator<< (::xercesc::DOMElement&, const EncapsulatedPKIData&);

  void
  operator<< (::xercesc::DOMElement&, const Include&);

  void
  operator<< (::xercesc::DOMElement&, const ReferenceInfo&);

  void
  operator<< (::xercesc::DOMElement&, const GenericTimeStamp&);

  void
  operator<< (::xercesc::DOMElement&, const XAdESTimeStamp&);

  void
  operator<< (::xercesc::DOMElement&, const OtherTimeStamp&);

  void
  operator<< (::xercesc::DOMElement&, const QualifyingProperties&);

  void
  operator<< (::xercesc::DOMElement&, const SignedProperties&);

  void
  operator<< (::xercesc::DOMElement&, const UnsignedProperties&);

  void
  operator<< (::xercesc::DOMElement&, const SignedSignatureProperties&);

  void
  operator<< (::xercesc::DOMElement&, const SignedDataObjectProperties&);

  void
  operator<< (::xercesc::DOMElement&, const UnsignedSignatureProperties&);

  void
  operator<< (::xercesc::DOMElement&, const UnsignedDataObjectProperties&);

  void
  operator<< (::xercesc::DOMElement&, const QualifyingPropertiesReference&);

  void
  operator<< (::xercesc::DOMElement&, const CertIDList&);

  void
  operator<< (::xercesc::DOMElement&, const CertID&);

  void
  operator<< (::xercesc::DOMElement&, const DigestAlgAndValue&);

  void
  operator<< (::xercesc::DOMElement&, const SignaturePolicyIdentifier&);

  void
  operator<< (::xercesc::DOMElement&, const SignaturePolicyId&);

  void
  operator<< (::xercesc::DOMElement&, const SigPolicyQualifiersList&);

  void
  operator<< (::xercesc::DOMElement&, const SPUserNotice&);

  void
  operator<< (::xercesc::DOMElement&, const NoticeReference&);

  void
  operator<< (::xercesc::DOMElement&, const IntegerList&);

  void
  operator<< (::xercesc::DOMElement&, const CounterSignature&);

  void
  operator<< (::xercesc::DOMElement&, const DataObjectFormat&);

  void
  operator<< (::xercesc::DOMElement&, const CommitmentTypeIndication&);

  void
  operator<< (::xercesc::DOMElement&, const CommitmentTypeQualifiersList&);

  void
  operator<< (::xercesc::DOMElement&, const SignatureProductionPlace&);

  void
  operator<< (::xercesc::DOMElement&, const SignerRole&);

  void
  operator<< (::xercesc::DOMElement&, const ClaimedRolesList&);

  void
  operator<< (::xercesc::DOMElement&, const CertifiedRolesList&);

  void
  operator<< (::xercesc::DOMElement&, const CompleteCertificateRefs&);

  void
  operator<< (::xercesc::DOMElement&, const CompleteRevocationRefs&);

  void
  operator<< (::xercesc::DOMElement&, const CRLRefs&);

  void
  operator<< (::xercesc::DOMElement&, const CRLRef&);

  void
  operator<< (::xercesc::DOMElement&, const CRLIdentifier&);

  void
  operator<< (::xercesc::DOMElement&, const OCSPRefs&);

  void
  operator<< (::xercesc::DOMElement&, const OCSPRef&);

  void
  operator<< (::xercesc::DOMElement&, const ResponderID&);

  void
  operator<< (::xercesc::DOMElement&, const OCSPIdentifier&);

  void
  operator<< (::xercesc::DOMElement&, const OtherCertStatusRefs&);

  void
  operator<< (::xercesc::DOMElement&, const CertificateValues&);

  void
  operator<< (::xercesc::DOMElement&, const RevocationValues&);

  void
  operator<< (::xercesc::DOMElement&, const CRLValues&);

  void
  operator<< (::xercesc::DOMElement&, const OCSPValues&);

  void
  operator<< (::xercesc::DOMElement&, const OtherCertStatusValues&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XAD_ES_HXX
