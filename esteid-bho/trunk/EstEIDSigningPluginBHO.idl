// EstEIDSigningPluginBHO.idl : IDL source for EstEIDSigningPluginBHO
//

// This file will be processed by the MIDL tool to
// produce the type library (EstEIDSigningPluginBHO.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(40A7AD1D-F50E-47D8-A9AC-8D7EFE8CCB17),
	dual,
	nonextensible,
	helpstring("IEstEIDSigningBHO Interface"),
	pointer_default(unique)
]
interface IEstEIDSigningBHO : IDispatch{
};
[
	object,
	uuid(0CC6179C-D391-49B5-8B3A-7A0DBED8BAC7),
	dual,
	nonextensible,
	helpstring("ISmartCardSigner Interface"),
	pointer_default(unique)
]
interface ISmartCardSigner : IDispatch{
	[id(1), helpstring("method getVersion")] HRESULT getVersion([out,retval] BSTR* retVal);
	[propget, id(2), helpstring("property lastName")] HRESULT lastName([out, retval] BSTR* pVal);
	[propget, id(3), helpstring("property firstName")] HRESULT firstName([out, retval] BSTR* pVal);
	[propget, id(4), helpstring("property middleName")] HRESULT middleName([out, retval] BSTR* pVal);
	[propget, id(5), helpstring("property sex")] HRESULT sex([out, retval] BSTR* pVal);
	[propget, id(6), helpstring("property citizenship")] HRESULT citizenship([out, retval] BSTR* pVal);
	[propget, id(7), helpstring("property birthDate")] HRESULT birthDate([out, retval] BSTR* pVal);
	[propget, id(8), helpstring("property personalID")] HRESULT personalID([out, retval] BSTR* pVal);
	[propget, id(9), helpstring("property documentID")] HRESULT documentID([out, retval] BSTR* pVal);
	[propget, id(10), helpstring("property expiryDate")] HRESULT expiryDate([out, retval] BSTR* pVal);
	[propget, id(11), helpstring("property placeOfBirth")] HRESULT placeOfBirth([out, retval] BSTR* pVal);
	[propget, id(12), helpstring("property issuedDate")] HRESULT issuedDate([out, retval] BSTR* pVal);
	[propget, id(13), helpstring("property residencePermit")] HRESULT residencePermit([out, retval] BSTR* pVal);
	[propget, id(14), helpstring("property comment1")] HRESULT comment1([out, retval] BSTR* pVal);
	[propget, id(15), helpstring("property comment2")] HRESULT comment2([out, retval] BSTR* pVal);
	[propget, id(16), helpstring("property comment3")] HRESULT comment3([out, retval] BSTR* pVal);
	[propget, id(17), helpstring("property comment4")] HRESULT comment4([out, retval] BSTR* pVal);
	[id(18), helpstring("method signWithCert")] HRESULT signWithCert([in] BSTR hashToBeSigned,[in] IDispatch * pCert,[out, retval] BSTR* pVal);
	[id(19), helpstring("Lists thumbprints of all available certs, comma separated")] HRESULT getCertificateList([out,retval] BSTR* retVal);
	[id(20), helpstring("Returns a SmartCardCertificate object by given thumbprint")] HRESULT getCertificateByThumbprint([in] BSTR thumbPrint, [out,retval] IDispatch** retVal);
	[id(21), helpstring("method addEventListener")] HRESULT addEventListener([in] BSTR eventName,[in] IDispatch *function);
	[id(22), helpstring("method removeEventListener")] HRESULT removeEventListener([in] BSTR eventName,[in] IDispatch *function);
	[id(24), helpstring("method getReaderName")] HRESULT getReaderName([in] USHORT readerNum,[out,retval] BSTR* retVal);
	[id(25), helpstring("method getReaders")] HRESULT getReaders([out,retval] BSTR* retVal);
	[propget, id(27), helpstring("property selectedReader")] HRESULT selectedReader([out, retval] SHORT* pVal);
	[propput, id(27), helpstring("property selectedReader")] HRESULT selectedReader([in] SHORT newVal);
	[propget, id(28), helpstring("property authCert")] HRESULT authCert([out, retval] IDispatch** pVal);
	[propget, id(29), helpstring("property signCert")] HRESULT signCert([out, retval] IDispatch** pVal);
	[id(30), helpstring("method sign")] HRESULT sign([in] BSTR hashToBeSigned, [in] BSTR documentUrl, [out,retval] BSTR* pVal);
};
[
	object,
	uuid(1E65C9F8-E8A1-4BD3-A186-E53A1EE862DF),
	dual,
	nonextensible,
	helpstring("ISmartCardCertificate Interface"),
	pointer_default(unique)
]
interface ISmartCardCertificate : IDispatch{
	[propget, id(1), helpstring("property CN")] HRESULT CN([out, retval] BSTR* pVal);
	[propget, id(2), helpstring("property validFrom")] HRESULT validFrom([out, retval] BSTR* pVal);
	[propget, id(3), helpstring("property validTo")] HRESULT validTo([out, retval] BSTR* pVal);
	[propget, id(4), helpstring("property issuerCN")] HRESULT issuerCN([out, retval] BSTR* pVal);
	[propget, id(5), helpstring("property keyUsage")] HRESULT keyUsage([out, retval] BSTR* pVal);
	[propget, id(6), helpstring("property cert")] HRESULT cert([out, retval] BSTR* pVal);
	[propget, id(7), helpstring("property certID")] HRESULT certID([out, retval] BSTR* pVal);
	[propget, id(8), helpstring("property thumbPrint")] HRESULT thumbPrint([out, retval] BSTR* pVal);
	[propget, id(9), helpstring("property privateKeyContainer")] HRESULT privateKeyContainer([out, retval] BSTR* pVal);
	[id(10), helpstring("method _loadArrayFrom")] HRESULT _loadArrayFrom([in] BSTR privateKeyContainer, [in] ULONG length, [in] BYTE* data);
};
[
	uuid(536E87AF-8E4B-47C0-8046-273961378EF3),
	version(1.0),
	helpstring("EstEIDSigningPluginBHO 1.0 Type Library")
]
library EstEIDSigningPluginBHOLib
{
	importlib("stdole2.tlb");
	[
		uuid(B1DDE0C0-E53D-477A-BA90-769C80E14AAB),
		helpstring("EstEIDSigningBHO Class")
	]
	coclass EstEIDSigningBHO
	{
		[default] interface IEstEIDSigningBHO;
	};
	[
		uuid(76B61F95-9F84-4DFC-B327-5DABD1A752B5),
		helpstring("_ISmartCardSignerEvents Interface")
	]
	dispinterface _ISmartCardSignerEvents
	{
		properties:
		methods:
			[id(1), helpstring("method CardWasInserted")] HRESULT CardWasInserted([in] LONG readerNum);
			[id(2), helpstring("method CardWasRemoved")] HRESULT CardWasRemoved([in] LONG readerNum);
			[id(3), helpstring("method ReadersChanged")] HRESULT ReadersChanged();
	};
	[
		uuid(28821112-76D5-4C26-9F64-9E20AA91DDF3),
		helpstring("SmartCardSigner Class")
	]
	coclass SmartCardSigner
	{
		[default] interface ISmartCardSigner;
		[default, source] dispinterface _ISmartCardSignerEvents;
	};
	[
		uuid(151EA824-7FB3-4AF8-9B10-F69FF073730B),
		helpstring("SmartCardCertificate Class")
	]
	coclass SmartCardCertificate
	{
		[default] interface ISmartCardCertificate;
	};
};
