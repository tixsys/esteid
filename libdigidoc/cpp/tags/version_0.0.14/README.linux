BDoc Cpp LIB

BDoc C++ lib is library for creating and validating BDOC-1.0 documents [1]. 
Older Digidoc formats(DIGIDOC-XML) are not supported. Difference between 
DDoc, EDoc and BDoc are described in [2]. BDoc signatures should be XAdES [3]
compliant, but some XAdES signatures may be uncompliant with BDoc. Currently 
BDoc-1.0 BES and TM profiles are supported.

Signatures can be given using EstEID Card (id-kaart) and RSA certificates 
with private keys.

Currently lib is still unstable, run tests for more information.


[1] http://www.signature.lt/-TOOLS/BDoc-1.0.pdf
[2] http://www.id.ee/public/ID_arendajate_seminar_Urmo_Keskel.ppt
[3] http://www.w3.org/TR/XAdES/

REQUISITES

Libary dependencies

* zlib 1.2.3 
* libp11 0.2.4
* xerces-c 2.8.0
* xml-security-c 1.3.1
* openssl 0.9.8g
* libopensc2 (runtime PKCS#15 driver)
* libiconv 1.13

On Ubuntu you can install the libs by running:
sudo apt-get install libopensc2 libp11-dev libssl-dev libxerces28-dev libxml-security-c-dev

GNU libiconv can be downloaded from http://www.gnu.org/software/libiconv/ .


Tools

* cmake 2.6
* python 2.5 or 2.6 for running tests
* Codesynthesis xsd 3.2.0 for XML tree generation


BUILDING

If all required libs are installed you should be able to build the lib by
running

cmake . -G "Unix Makefiles"
make
python test/test.py

or 

make -f Makefile.linux tool

CONFIGURATION

BDoc lib needs a configuration file that defines trusted CA certificates, OCSP 
responder certificate, PKCS11 driver location, XML schemas and so on.

Example configuration and example directory structure is provided in etc 
directory. Also test/test.py tries to generate configuration file for your
environment.

Configuration file is first searched from environment variable 
BDOCLIB_CONF_XML. If not defined, it searches for file bdoc.conf from
running directory.

All file names in the configuration file, except for URI-s and .so paths are interpreted as relative to the configuration file's location.

The LANG environment variable is read (and must be set properly) to determine the system encoding which is passed to libiconv for converting XML data to UTF-8.
Please refer to '$iconv --list' for the supported encodings.
If the LANG variable cannot be determined the fallback action is to continue without converting (which will fail if non-ascii characters are present).


DOCUMENTATION

Generate class documentation by running 

make doxygen


Example usage of the library can be seen in  src/main_demo.cpp and src/ref_tool.cpp.

Sample command lines:

insert and sign:
$./tool -create -insert bdoc_test.odt -sign /home/user/devel/digidoc/head/test/data/cert/cert+priv_key.pemBES Tallinn Harjumaa 13424 Estonia test -save_as test_out.bdoc

open the bdoc and verifiy the signature:
$./tool -open test_out.bdoc -valid_offline 1











