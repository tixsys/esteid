// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "XAdES.hxx"

namespace xades
{
  // Any
  // 


  // ObjectIdentifier
  // 

  const ObjectIdentifier::IdentifierType& ObjectIdentifier::
  identifier () const
  {
    return this->Identifier_.get ();
  }

  ObjectIdentifier::IdentifierType& ObjectIdentifier::
  identifier ()
  {
    return this->Identifier_.get ();
  }

  void ObjectIdentifier::
  identifier (const IdentifierType& x)
  {
    this->Identifier_.set (x);
  }

  void ObjectIdentifier::
  identifier (::std::auto_ptr< IdentifierType > x)
  {
    this->Identifier_.set (x);
  }

  const ObjectIdentifier::DescriptionOptional& ObjectIdentifier::
  description () const
  {
    return this->Description_;
  }

  ObjectIdentifier::DescriptionOptional& ObjectIdentifier::
  description ()
  {
    return this->Description_;
  }

  void ObjectIdentifier::
  description (const DescriptionType& x)
  {
    this->Description_.set (x);
  }

  void ObjectIdentifier::
  description (const DescriptionOptional& x)
  {
    this->Description_ = x;
  }

  void ObjectIdentifier::
  description (::std::auto_ptr< DescriptionType > x)
  {
    this->Description_.set (x);
  }

  const ObjectIdentifier::DocumentationReferencesOptional& ObjectIdentifier::
  documentationReferences () const
  {
    return this->DocumentationReferences_;
  }

  ObjectIdentifier::DocumentationReferencesOptional& ObjectIdentifier::
  documentationReferences ()
  {
    return this->DocumentationReferences_;
  }

  void ObjectIdentifier::
  documentationReferences (const DocumentationReferencesType& x)
  {
    this->DocumentationReferences_.set (x);
  }

  void ObjectIdentifier::
  documentationReferences (const DocumentationReferencesOptional& x)
  {
    this->DocumentationReferences_ = x;
  }

  void ObjectIdentifier::
  documentationReferences (::std::auto_ptr< DocumentationReferencesType > x)
  {
    this->DocumentationReferences_.set (x);
  }


  // Identifier
  // 

  const Identifier::QualifierOptional& Identifier::
  qualifier () const
  {
    return this->Qualifier_;
  }

  Identifier::QualifierOptional& Identifier::
  qualifier ()
  {
    return this->Qualifier_;
  }

  void Identifier::
  qualifier (const QualifierType& x)
  {
    this->Qualifier_.set (x);
  }

  void Identifier::
  qualifier (const QualifierOptional& x)
  {
    this->Qualifier_ = x;
  }

  void Identifier::
  qualifier (::std::auto_ptr< QualifierType > x)
  {
    this->Qualifier_.set (x);
  }


  // Qualifier
  // 

  Qualifier::
  Qualifier (Value v)
  : ::xml_schema::String (_xsd_Qualifier_literals_[v])
  {
  }

  Qualifier::
  Qualifier (const char* v)
  : ::xml_schema::String (v)
  {
  }

  Qualifier::
  Qualifier (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  Qualifier::
  Qualifier (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  Qualifier::
  Qualifier (const Qualifier& v,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  Qualifier& Qualifier::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_Qualifier_literals_[v]);

    return *this;
  }


  // DocumentationReferences
  // 

  const DocumentationReferences::DocumentationReferenceSequence& DocumentationReferences::
  documentationReference () const
  {
    return this->DocumentationReference_;
  }

  DocumentationReferences::DocumentationReferenceSequence& DocumentationReferences::
  documentationReference ()
  {
    return this->DocumentationReference_;
  }

  void DocumentationReferences::
  documentationReference (const DocumentationReferenceSequence& s)
  {
    this->DocumentationReference_ = s;
  }


  // EncapsulatedPKIData
  // 

  const EncapsulatedPKIData::IdOptional& EncapsulatedPKIData::
  id () const
  {
    return this->Id_;
  }

  EncapsulatedPKIData::IdOptional& EncapsulatedPKIData::
  id ()
  {
    return this->Id_;
  }

  void EncapsulatedPKIData::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void EncapsulatedPKIData::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void EncapsulatedPKIData::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }

  const EncapsulatedPKIData::EncodingOptional& EncapsulatedPKIData::
  encoding () const
  {
    return this->Encoding_;
  }

  EncapsulatedPKIData::EncodingOptional& EncapsulatedPKIData::
  encoding ()
  {
    return this->Encoding_;
  }

  void EncapsulatedPKIData::
  encoding (const EncodingType& x)
  {
    this->Encoding_.set (x);
  }

  void EncapsulatedPKIData::
  encoding (const EncodingOptional& x)
  {
    this->Encoding_ = x;
  }

  void EncapsulatedPKIData::
  encoding (::std::auto_ptr< EncodingType > x)
  {
    this->Encoding_.set (x);
  }


  // Include
  // 

  const Include::URIType& Include::
  uRI () const
  {
    return this->URI_.get ();
  }

  Include::URIType& Include::
  uRI ()
  {
    return this->URI_.get ();
  }

  void Include::
  uRI (const URIType& x)
  {
    this->URI_.set (x);
  }

  void Include::
  uRI (::std::auto_ptr< URIType > x)
  {
    this->URI_.set (x);
  }

  const Include::ReferencedDataOptional& Include::
  referencedData () const
  {
    return this->referencedData_;
  }

  Include::ReferencedDataOptional& Include::
  referencedData ()
  {
    return this->referencedData_;
  }

  void Include::
  referencedData (const ReferencedDataType& x)
  {
    this->referencedData_.set (x);
  }

  void Include::
  referencedData (const ReferencedDataOptional& x)
  {
    this->referencedData_ = x;
  }


  // ReferenceInfo
  // 

  const ReferenceInfo::DigestMethodType& ReferenceInfo::
  digestMethod () const
  {
    return this->DigestMethod_.get ();
  }

  ReferenceInfo::DigestMethodType& ReferenceInfo::
  digestMethod ()
  {
    return this->DigestMethod_.get ();
  }

  void ReferenceInfo::
  digestMethod (const DigestMethodType& x)
  {
    this->DigestMethod_.set (x);
  }

  void ReferenceInfo::
  digestMethod (::std::auto_ptr< DigestMethodType > x)
  {
    this->DigestMethod_.set (x);
  }

  const ReferenceInfo::DigestValueType& ReferenceInfo::
  digestValue () const
  {
    return this->DigestValue_.get ();
  }

  ReferenceInfo::DigestValueType& ReferenceInfo::
  digestValue ()
  {
    return this->DigestValue_.get ();
  }

  void ReferenceInfo::
  digestValue (const DigestValueType& x)
  {
    this->DigestValue_.set (x);
  }

  void ReferenceInfo::
  digestValue (::std::auto_ptr< DigestValueType > x)
  {
    this->DigestValue_.set (x);
  }

  const ReferenceInfo::IdOptional& ReferenceInfo::
  id () const
  {
    return this->Id_;
  }

  ReferenceInfo::IdOptional& ReferenceInfo::
  id ()
  {
    return this->Id_;
  }

  void ReferenceInfo::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void ReferenceInfo::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void ReferenceInfo::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }

  const ReferenceInfo::URIOptional& ReferenceInfo::
  uRI () const
  {
    return this->URI_;
  }

  ReferenceInfo::URIOptional& ReferenceInfo::
  uRI ()
  {
    return this->URI_;
  }

  void ReferenceInfo::
  uRI (const URIType& x)
  {
    this->URI_.set (x);
  }

  void ReferenceInfo::
  uRI (const URIOptional& x)
  {
    this->URI_ = x;
  }

  void ReferenceInfo::
  uRI (::std::auto_ptr< URIType > x)
  {
    this->URI_.set (x);
  }


  // GenericTimeStamp
  // 

  const GenericTimeStamp::IncludeSequence& GenericTimeStamp::
  include () const
  {
    return this->Include_;
  }

  GenericTimeStamp::IncludeSequence& GenericTimeStamp::
  include ()
  {
    return this->Include_;
  }

  void GenericTimeStamp::
  include (const IncludeSequence& s)
  {
    this->Include_ = s;
  }

  const GenericTimeStamp::ReferenceInfoSequence& GenericTimeStamp::
  referenceInfo () const
  {
    return this->ReferenceInfo_;
  }

  GenericTimeStamp::ReferenceInfoSequence& GenericTimeStamp::
  referenceInfo ()
  {
    return this->ReferenceInfo_;
  }

  void GenericTimeStamp::
  referenceInfo (const ReferenceInfoSequence& s)
  {
    this->ReferenceInfo_ = s;
  }

  const GenericTimeStamp::CanonicalizationMethodOptional& GenericTimeStamp::
  canonicalizationMethod () const
  {
    return this->CanonicalizationMethod_;
  }

  GenericTimeStamp::CanonicalizationMethodOptional& GenericTimeStamp::
  canonicalizationMethod ()
  {
    return this->CanonicalizationMethod_;
  }

  void GenericTimeStamp::
  canonicalizationMethod (const CanonicalizationMethodType& x)
  {
    this->CanonicalizationMethod_.set (x);
  }

  void GenericTimeStamp::
  canonicalizationMethod (const CanonicalizationMethodOptional& x)
  {
    this->CanonicalizationMethod_ = x;
  }

  void GenericTimeStamp::
  canonicalizationMethod (::std::auto_ptr< CanonicalizationMethodType > x)
  {
    this->CanonicalizationMethod_.set (x);
  }

  const GenericTimeStamp::EncapsulatedTimeStampSequence& GenericTimeStamp::
  encapsulatedTimeStamp () const
  {
    return this->EncapsulatedTimeStamp_;
  }

  GenericTimeStamp::EncapsulatedTimeStampSequence& GenericTimeStamp::
  encapsulatedTimeStamp ()
  {
    return this->EncapsulatedTimeStamp_;
  }

  void GenericTimeStamp::
  encapsulatedTimeStamp (const EncapsulatedTimeStampSequence& s)
  {
    this->EncapsulatedTimeStamp_ = s;
  }

  const GenericTimeStamp::XMLTimeStampSequence& GenericTimeStamp::
  xMLTimeStamp () const
  {
    return this->XMLTimeStamp_;
  }

  GenericTimeStamp::XMLTimeStampSequence& GenericTimeStamp::
  xMLTimeStamp ()
  {
    return this->XMLTimeStamp_;
  }

  void GenericTimeStamp::
  xMLTimeStamp (const XMLTimeStampSequence& s)
  {
    this->XMLTimeStamp_ = s;
  }

  const GenericTimeStamp::IdOptional& GenericTimeStamp::
  id () const
  {
    return this->Id_;
  }

  GenericTimeStamp::IdOptional& GenericTimeStamp::
  id ()
  {
    return this->Id_;
  }

  void GenericTimeStamp::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void GenericTimeStamp::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void GenericTimeStamp::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // XAdESTimeStamp
  // 

  const XAdESTimeStamp::IncludeSequence& XAdESTimeStamp::
  include () const
  {
    return this->Include_;
  }

  XAdESTimeStamp::IncludeSequence& XAdESTimeStamp::
  include ()
  {
    return this->Include_;
  }

  void XAdESTimeStamp::
  include (const IncludeSequence& s)
  {
    this->Include_ = s;
  }

  const XAdESTimeStamp::CanonicalizationMethodOptional& XAdESTimeStamp::
  canonicalizationMethod () const
  {
    return this->CanonicalizationMethod_;
  }

  XAdESTimeStamp::CanonicalizationMethodOptional& XAdESTimeStamp::
  canonicalizationMethod ()
  {
    return this->CanonicalizationMethod_;
  }

  void XAdESTimeStamp::
  canonicalizationMethod (const CanonicalizationMethodType& x)
  {
    this->CanonicalizationMethod_.set (x);
  }

  void XAdESTimeStamp::
  canonicalizationMethod (const CanonicalizationMethodOptional& x)
  {
    this->CanonicalizationMethod_ = x;
  }

  void XAdESTimeStamp::
  canonicalizationMethod (::std::auto_ptr< CanonicalizationMethodType > x)
  {
    this->CanonicalizationMethod_.set (x);
  }

  const XAdESTimeStamp::EncapsulatedTimeStampSequence& XAdESTimeStamp::
  encapsulatedTimeStamp () const
  {
    return this->EncapsulatedTimeStamp_;
  }

  XAdESTimeStamp::EncapsulatedTimeStampSequence& XAdESTimeStamp::
  encapsulatedTimeStamp ()
  {
    return this->EncapsulatedTimeStamp_;
  }

  void XAdESTimeStamp::
  encapsulatedTimeStamp (const EncapsulatedTimeStampSequence& s)
  {
    this->EncapsulatedTimeStamp_ = s;
  }

  const XAdESTimeStamp::XMLTimeStampSequence& XAdESTimeStamp::
  xMLTimeStamp () const
  {
    return this->XMLTimeStamp_;
  }

  XAdESTimeStamp::XMLTimeStampSequence& XAdESTimeStamp::
  xMLTimeStamp ()
  {
    return this->XMLTimeStamp_;
  }

  void XAdESTimeStamp::
  xMLTimeStamp (const XMLTimeStampSequence& s)
  {
    this->XMLTimeStamp_ = s;
  }

  const XAdESTimeStamp::IdOptional& XAdESTimeStamp::
  id () const
  {
    return this->Id_;
  }

  XAdESTimeStamp::IdOptional& XAdESTimeStamp::
  id ()
  {
    return this->Id_;
  }

  void XAdESTimeStamp::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void XAdESTimeStamp::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void XAdESTimeStamp::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // OtherTimeStamp
  // 


  // QualifyingProperties
  // 

  const QualifyingProperties::SignedPropertiesOptional& QualifyingProperties::
  signedProperties () const
  {
    return this->SignedProperties_;
  }

  QualifyingProperties::SignedPropertiesOptional& QualifyingProperties::
  signedProperties ()
  {
    return this->SignedProperties_;
  }

  void QualifyingProperties::
  signedProperties (const SignedPropertiesType& x)
  {
    this->SignedProperties_.set (x);
  }

  void QualifyingProperties::
  signedProperties (const SignedPropertiesOptional& x)
  {
    this->SignedProperties_ = x;
  }

  void QualifyingProperties::
  signedProperties (::std::auto_ptr< SignedPropertiesType > x)
  {
    this->SignedProperties_.set (x);
  }

  const QualifyingProperties::UnsignedPropertiesOptional& QualifyingProperties::
  unsignedProperties () const
  {
    return this->UnsignedProperties_;
  }

  QualifyingProperties::UnsignedPropertiesOptional& QualifyingProperties::
  unsignedProperties ()
  {
    return this->UnsignedProperties_;
  }

  void QualifyingProperties::
  unsignedProperties (const UnsignedPropertiesType& x)
  {
    this->UnsignedProperties_.set (x);
  }

  void QualifyingProperties::
  unsignedProperties (const UnsignedPropertiesOptional& x)
  {
    this->UnsignedProperties_ = x;
  }

  void QualifyingProperties::
  unsignedProperties (::std::auto_ptr< UnsignedPropertiesType > x)
  {
    this->UnsignedProperties_.set (x);
  }

  const QualifyingProperties::TargetType& QualifyingProperties::
  target () const
  {
    return this->Target_.get ();
  }

  QualifyingProperties::TargetType& QualifyingProperties::
  target ()
  {
    return this->Target_.get ();
  }

  void QualifyingProperties::
  target (const TargetType& x)
  {
    this->Target_.set (x);
  }

  void QualifyingProperties::
  target (::std::auto_ptr< TargetType > x)
  {
    this->Target_.set (x);
  }

  const QualifyingProperties::IdOptional& QualifyingProperties::
  id () const
  {
    return this->Id_;
  }

  QualifyingProperties::IdOptional& QualifyingProperties::
  id ()
  {
    return this->Id_;
  }

  void QualifyingProperties::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void QualifyingProperties::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void QualifyingProperties::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // SignedProperties
  // 

  const SignedProperties::SignedSignaturePropertiesType& SignedProperties::
  signedSignatureProperties () const
  {
    return this->SignedSignatureProperties_.get ();
  }

  SignedProperties::SignedSignaturePropertiesType& SignedProperties::
  signedSignatureProperties ()
  {
    return this->SignedSignatureProperties_.get ();
  }

  void SignedProperties::
  signedSignatureProperties (const SignedSignaturePropertiesType& x)
  {
    this->SignedSignatureProperties_.set (x);
  }

  void SignedProperties::
  signedSignatureProperties (::std::auto_ptr< SignedSignaturePropertiesType > x)
  {
    this->SignedSignatureProperties_.set (x);
  }

  const SignedProperties::SignedDataObjectPropertiesOptional& SignedProperties::
  signedDataObjectProperties () const
  {
    return this->SignedDataObjectProperties_;
  }

  SignedProperties::SignedDataObjectPropertiesOptional& SignedProperties::
  signedDataObjectProperties ()
  {
    return this->SignedDataObjectProperties_;
  }

  void SignedProperties::
  signedDataObjectProperties (const SignedDataObjectPropertiesType& x)
  {
    this->SignedDataObjectProperties_.set (x);
  }

  void SignedProperties::
  signedDataObjectProperties (const SignedDataObjectPropertiesOptional& x)
  {
    this->SignedDataObjectProperties_ = x;
  }

  void SignedProperties::
  signedDataObjectProperties (::std::auto_ptr< SignedDataObjectPropertiesType > x)
  {
    this->SignedDataObjectProperties_.set (x);
  }

  const SignedProperties::IdOptional& SignedProperties::
  id () const
  {
    return this->Id_;
  }

  SignedProperties::IdOptional& SignedProperties::
  id ()
  {
    return this->Id_;
  }

  void SignedProperties::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void SignedProperties::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void SignedProperties::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // UnsignedProperties
  // 

  const UnsignedProperties::UnsignedSignaturePropertiesOptional& UnsignedProperties::
  unsignedSignatureProperties () const
  {
    return this->UnsignedSignatureProperties_;
  }

  UnsignedProperties::UnsignedSignaturePropertiesOptional& UnsignedProperties::
  unsignedSignatureProperties ()
  {
    return this->UnsignedSignatureProperties_;
  }

  void UnsignedProperties::
  unsignedSignatureProperties (const UnsignedSignaturePropertiesType& x)
  {
    this->UnsignedSignatureProperties_.set (x);
  }

  void UnsignedProperties::
  unsignedSignatureProperties (const UnsignedSignaturePropertiesOptional& x)
  {
    this->UnsignedSignatureProperties_ = x;
  }

  void UnsignedProperties::
  unsignedSignatureProperties (::std::auto_ptr< UnsignedSignaturePropertiesType > x)
  {
    this->UnsignedSignatureProperties_.set (x);
  }

  const UnsignedProperties::UnsignedDataObjectPropertiesOptional& UnsignedProperties::
  unsignedDataObjectProperties () const
  {
    return this->UnsignedDataObjectProperties_;
  }

  UnsignedProperties::UnsignedDataObjectPropertiesOptional& UnsignedProperties::
  unsignedDataObjectProperties ()
  {
    return this->UnsignedDataObjectProperties_;
  }

  void UnsignedProperties::
  unsignedDataObjectProperties (const UnsignedDataObjectPropertiesType& x)
  {
    this->UnsignedDataObjectProperties_.set (x);
  }

  void UnsignedProperties::
  unsignedDataObjectProperties (const UnsignedDataObjectPropertiesOptional& x)
  {
    this->UnsignedDataObjectProperties_ = x;
  }

  void UnsignedProperties::
  unsignedDataObjectProperties (::std::auto_ptr< UnsignedDataObjectPropertiesType > x)
  {
    this->UnsignedDataObjectProperties_.set (x);
  }

  const UnsignedProperties::IdOptional& UnsignedProperties::
  id () const
  {
    return this->Id_;
  }

  UnsignedProperties::IdOptional& UnsignedProperties::
  id ()
  {
    return this->Id_;
  }

  void UnsignedProperties::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void UnsignedProperties::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void UnsignedProperties::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // SignedSignatureProperties
  // 

  const SignedSignatureProperties::SigningTimeOptional& SignedSignatureProperties::
  signingTime () const
  {
    return this->SigningTime_;
  }

  SignedSignatureProperties::SigningTimeOptional& SignedSignatureProperties::
  signingTime ()
  {
    return this->SigningTime_;
  }

  void SignedSignatureProperties::
  signingTime (const SigningTimeType& x)
  {
    this->SigningTime_.set (x);
  }

  void SignedSignatureProperties::
  signingTime (const SigningTimeOptional& x)
  {
    this->SigningTime_ = x;
  }

  void SignedSignatureProperties::
  signingTime (::std::auto_ptr< SigningTimeType > x)
  {
    this->SigningTime_.set (x);
  }

  const SignedSignatureProperties::SigningCertificateOptional& SignedSignatureProperties::
  signingCertificate () const
  {
    return this->SigningCertificate_;
  }

  SignedSignatureProperties::SigningCertificateOptional& SignedSignatureProperties::
  signingCertificate ()
  {
    return this->SigningCertificate_;
  }

  void SignedSignatureProperties::
  signingCertificate (const SigningCertificateType& x)
  {
    this->SigningCertificate_.set (x);
  }

  void SignedSignatureProperties::
  signingCertificate (const SigningCertificateOptional& x)
  {
    this->SigningCertificate_ = x;
  }

  void SignedSignatureProperties::
  signingCertificate (::std::auto_ptr< SigningCertificateType > x)
  {
    this->SigningCertificate_.set (x);
  }

  const SignedSignatureProperties::SignaturePolicyIdentifierOptional& SignedSignatureProperties::
  signaturePolicyIdentifier () const
  {
    return this->SignaturePolicyIdentifier_;
  }

  SignedSignatureProperties::SignaturePolicyIdentifierOptional& SignedSignatureProperties::
  signaturePolicyIdentifier ()
  {
    return this->SignaturePolicyIdentifier_;
  }

  void SignedSignatureProperties::
  signaturePolicyIdentifier (const SignaturePolicyIdentifierType& x)
  {
    this->SignaturePolicyIdentifier_.set (x);
  }

  void SignedSignatureProperties::
  signaturePolicyIdentifier (const SignaturePolicyIdentifierOptional& x)
  {
    this->SignaturePolicyIdentifier_ = x;
  }

  void SignedSignatureProperties::
  signaturePolicyIdentifier (::std::auto_ptr< SignaturePolicyIdentifierType > x)
  {
    this->SignaturePolicyIdentifier_.set (x);
  }

  const SignedSignatureProperties::SignatureProductionPlaceOptional& SignedSignatureProperties::
  signatureProductionPlace () const
  {
    return this->SignatureProductionPlace_;
  }

  SignedSignatureProperties::SignatureProductionPlaceOptional& SignedSignatureProperties::
  signatureProductionPlace ()
  {
    return this->SignatureProductionPlace_;
  }

  void SignedSignatureProperties::
  signatureProductionPlace (const SignatureProductionPlaceType& x)
  {
    this->SignatureProductionPlace_.set (x);
  }

  void SignedSignatureProperties::
  signatureProductionPlace (const SignatureProductionPlaceOptional& x)
  {
    this->SignatureProductionPlace_ = x;
  }

  void SignedSignatureProperties::
  signatureProductionPlace (::std::auto_ptr< SignatureProductionPlaceType > x)
  {
    this->SignatureProductionPlace_.set (x);
  }

  const SignedSignatureProperties::SignerRoleOptional& SignedSignatureProperties::
  signerRole () const
  {
    return this->SignerRole_;
  }

  SignedSignatureProperties::SignerRoleOptional& SignedSignatureProperties::
  signerRole ()
  {
    return this->SignerRole_;
  }

  void SignedSignatureProperties::
  signerRole (const SignerRoleType& x)
  {
    this->SignerRole_.set (x);
  }

  void SignedSignatureProperties::
  signerRole (const SignerRoleOptional& x)
  {
    this->SignerRole_ = x;
  }

  void SignedSignatureProperties::
  signerRole (::std::auto_ptr< SignerRoleType > x)
  {
    this->SignerRole_.set (x);
  }

  const SignedSignatureProperties::IdOptional& SignedSignatureProperties::
  id () const
  {
    return this->Id_;
  }

  SignedSignatureProperties::IdOptional& SignedSignatureProperties::
  id ()
  {
    return this->Id_;
  }

  void SignedSignatureProperties::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void SignedSignatureProperties::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void SignedSignatureProperties::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // SignedDataObjectProperties
  // 

  const SignedDataObjectProperties::DataObjectFormatSequence& SignedDataObjectProperties::
  dataObjectFormat () const
  {
    return this->DataObjectFormat_;
  }

  SignedDataObjectProperties::DataObjectFormatSequence& SignedDataObjectProperties::
  dataObjectFormat ()
  {
    return this->DataObjectFormat_;
  }

  void SignedDataObjectProperties::
  dataObjectFormat (const DataObjectFormatSequence& s)
  {
    this->DataObjectFormat_ = s;
  }

  const SignedDataObjectProperties::CommitmentTypeIndicationSequence& SignedDataObjectProperties::
  commitmentTypeIndication () const
  {
    return this->CommitmentTypeIndication_;
  }

  SignedDataObjectProperties::CommitmentTypeIndicationSequence& SignedDataObjectProperties::
  commitmentTypeIndication ()
  {
    return this->CommitmentTypeIndication_;
  }

  void SignedDataObjectProperties::
  commitmentTypeIndication (const CommitmentTypeIndicationSequence& s)
  {
    this->CommitmentTypeIndication_ = s;
  }

  const SignedDataObjectProperties::AllDataObjectsTimeStampSequence& SignedDataObjectProperties::
  allDataObjectsTimeStamp () const
  {
    return this->AllDataObjectsTimeStamp_;
  }

  SignedDataObjectProperties::AllDataObjectsTimeStampSequence& SignedDataObjectProperties::
  allDataObjectsTimeStamp ()
  {
    return this->AllDataObjectsTimeStamp_;
  }

  void SignedDataObjectProperties::
  allDataObjectsTimeStamp (const AllDataObjectsTimeStampSequence& s)
  {
    this->AllDataObjectsTimeStamp_ = s;
  }

  const SignedDataObjectProperties::IndividualDataObjectsTimeStampSequence& SignedDataObjectProperties::
  individualDataObjectsTimeStamp () const
  {
    return this->IndividualDataObjectsTimeStamp_;
  }

  SignedDataObjectProperties::IndividualDataObjectsTimeStampSequence& SignedDataObjectProperties::
  individualDataObjectsTimeStamp ()
  {
    return this->IndividualDataObjectsTimeStamp_;
  }

  void SignedDataObjectProperties::
  individualDataObjectsTimeStamp (const IndividualDataObjectsTimeStampSequence& s)
  {
    this->IndividualDataObjectsTimeStamp_ = s;
  }

  const SignedDataObjectProperties::IdOptional& SignedDataObjectProperties::
  id () const
  {
    return this->Id_;
  }

  SignedDataObjectProperties::IdOptional& SignedDataObjectProperties::
  id ()
  {
    return this->Id_;
  }

  void SignedDataObjectProperties::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void SignedDataObjectProperties::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void SignedDataObjectProperties::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // UnsignedSignatureProperties
  // 

  const UnsignedSignatureProperties::CounterSignatureSequence& UnsignedSignatureProperties::
  counterSignature () const
  {
    return this->CounterSignature_;
  }

  UnsignedSignatureProperties::CounterSignatureSequence& UnsignedSignatureProperties::
  counterSignature ()
  {
    return this->CounterSignature_;
  }

  void UnsignedSignatureProperties::
  counterSignature (const CounterSignatureSequence& s)
  {
    this->CounterSignature_ = s;
  }

  const UnsignedSignatureProperties::SignatureTimeStampSequence& UnsignedSignatureProperties::
  signatureTimeStamp () const
  {
    return this->SignatureTimeStamp_;
  }

  UnsignedSignatureProperties::SignatureTimeStampSequence& UnsignedSignatureProperties::
  signatureTimeStamp ()
  {
    return this->SignatureTimeStamp_;
  }

  void UnsignedSignatureProperties::
  signatureTimeStamp (const SignatureTimeStampSequence& s)
  {
    this->SignatureTimeStamp_ = s;
  }

  const UnsignedSignatureProperties::CompleteCertificateRefsSequence& UnsignedSignatureProperties::
  completeCertificateRefs () const
  {
    return this->CompleteCertificateRefs_;
  }

  UnsignedSignatureProperties::CompleteCertificateRefsSequence& UnsignedSignatureProperties::
  completeCertificateRefs ()
  {
    return this->CompleteCertificateRefs_;
  }

  void UnsignedSignatureProperties::
  completeCertificateRefs (const CompleteCertificateRefsSequence& s)
  {
    this->CompleteCertificateRefs_ = s;
  }

  const UnsignedSignatureProperties::CompleteRevocationRefsSequence& UnsignedSignatureProperties::
  completeRevocationRefs () const
  {
    return this->CompleteRevocationRefs_;
  }

  UnsignedSignatureProperties::CompleteRevocationRefsSequence& UnsignedSignatureProperties::
  completeRevocationRefs ()
  {
    return this->CompleteRevocationRefs_;
  }

  void UnsignedSignatureProperties::
  completeRevocationRefs (const CompleteRevocationRefsSequence& s)
  {
    this->CompleteRevocationRefs_ = s;
  }

  const UnsignedSignatureProperties::AttributeCertificateRefsSequence& UnsignedSignatureProperties::
  attributeCertificateRefs () const
  {
    return this->AttributeCertificateRefs_;
  }

  UnsignedSignatureProperties::AttributeCertificateRefsSequence& UnsignedSignatureProperties::
  attributeCertificateRefs ()
  {
    return this->AttributeCertificateRefs_;
  }

  void UnsignedSignatureProperties::
  attributeCertificateRefs (const AttributeCertificateRefsSequence& s)
  {
    this->AttributeCertificateRefs_ = s;
  }

  const UnsignedSignatureProperties::AttributeRevocationRefsSequence& UnsignedSignatureProperties::
  attributeRevocationRefs () const
  {
    return this->AttributeRevocationRefs_;
  }

  UnsignedSignatureProperties::AttributeRevocationRefsSequence& UnsignedSignatureProperties::
  attributeRevocationRefs ()
  {
    return this->AttributeRevocationRefs_;
  }

  void UnsignedSignatureProperties::
  attributeRevocationRefs (const AttributeRevocationRefsSequence& s)
  {
    this->AttributeRevocationRefs_ = s;
  }

  const UnsignedSignatureProperties::SigAndRefsTimeStampSequence& UnsignedSignatureProperties::
  sigAndRefsTimeStamp () const
  {
    return this->SigAndRefsTimeStamp_;
  }

  UnsignedSignatureProperties::SigAndRefsTimeStampSequence& UnsignedSignatureProperties::
  sigAndRefsTimeStamp ()
  {
    return this->SigAndRefsTimeStamp_;
  }

  void UnsignedSignatureProperties::
  sigAndRefsTimeStamp (const SigAndRefsTimeStampSequence& s)
  {
    this->SigAndRefsTimeStamp_ = s;
  }

  const UnsignedSignatureProperties::RefsOnlyTimeStampSequence& UnsignedSignatureProperties::
  refsOnlyTimeStamp () const
  {
    return this->RefsOnlyTimeStamp_;
  }

  UnsignedSignatureProperties::RefsOnlyTimeStampSequence& UnsignedSignatureProperties::
  refsOnlyTimeStamp ()
  {
    return this->RefsOnlyTimeStamp_;
  }

  void UnsignedSignatureProperties::
  refsOnlyTimeStamp (const RefsOnlyTimeStampSequence& s)
  {
    this->RefsOnlyTimeStamp_ = s;
  }

  const UnsignedSignatureProperties::CertificateValuesSequence& UnsignedSignatureProperties::
  certificateValues () const
  {
    return this->CertificateValues_;
  }

  UnsignedSignatureProperties::CertificateValuesSequence& UnsignedSignatureProperties::
  certificateValues ()
  {
    return this->CertificateValues_;
  }

  void UnsignedSignatureProperties::
  certificateValues (const CertificateValuesSequence& s)
  {
    this->CertificateValues_ = s;
  }

  const UnsignedSignatureProperties::RevocationValuesSequence& UnsignedSignatureProperties::
  revocationValues () const
  {
    return this->RevocationValues_;
  }

  UnsignedSignatureProperties::RevocationValuesSequence& UnsignedSignatureProperties::
  revocationValues ()
  {
    return this->RevocationValues_;
  }

  void UnsignedSignatureProperties::
  revocationValues (const RevocationValuesSequence& s)
  {
    this->RevocationValues_ = s;
  }

  const UnsignedSignatureProperties::AttrAuthoritiesCertValuesSequence& UnsignedSignatureProperties::
  attrAuthoritiesCertValues () const
  {
    return this->AttrAuthoritiesCertValues_;
  }

  UnsignedSignatureProperties::AttrAuthoritiesCertValuesSequence& UnsignedSignatureProperties::
  attrAuthoritiesCertValues ()
  {
    return this->AttrAuthoritiesCertValues_;
  }

  void UnsignedSignatureProperties::
  attrAuthoritiesCertValues (const AttrAuthoritiesCertValuesSequence& s)
  {
    this->AttrAuthoritiesCertValues_ = s;
  }

  const UnsignedSignatureProperties::AttributeRevocationValuesSequence& UnsignedSignatureProperties::
  attributeRevocationValues () const
  {
    return this->AttributeRevocationValues_;
  }

  UnsignedSignatureProperties::AttributeRevocationValuesSequence& UnsignedSignatureProperties::
  attributeRevocationValues ()
  {
    return this->AttributeRevocationValues_;
  }

  void UnsignedSignatureProperties::
  attributeRevocationValues (const AttributeRevocationValuesSequence& s)
  {
    this->AttributeRevocationValues_ = s;
  }

  const UnsignedSignatureProperties::ArchiveTimeStampSequence& UnsignedSignatureProperties::
  archiveTimeStamp () const
  {
    return this->ArchiveTimeStamp_;
  }

  UnsignedSignatureProperties::ArchiveTimeStampSequence& UnsignedSignatureProperties::
  archiveTimeStamp ()
  {
    return this->ArchiveTimeStamp_;
  }

  void UnsignedSignatureProperties::
  archiveTimeStamp (const ArchiveTimeStampSequence& s)
  {
    this->ArchiveTimeStamp_ = s;
  }

  const UnsignedSignatureProperties::IdOptional& UnsignedSignatureProperties::
  id () const
  {
    return this->Id_;
  }

  UnsignedSignatureProperties::IdOptional& UnsignedSignatureProperties::
  id ()
  {
    return this->Id_;
  }

  void UnsignedSignatureProperties::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void UnsignedSignatureProperties::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void UnsignedSignatureProperties::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // UnsignedDataObjectProperties
  // 

  const UnsignedDataObjectProperties::UnsignedDataObjectPropertySequence& UnsignedDataObjectProperties::
  unsignedDataObjectProperty () const
  {
    return this->UnsignedDataObjectProperty_;
  }

  UnsignedDataObjectProperties::UnsignedDataObjectPropertySequence& UnsignedDataObjectProperties::
  unsignedDataObjectProperty ()
  {
    return this->UnsignedDataObjectProperty_;
  }

  void UnsignedDataObjectProperties::
  unsignedDataObjectProperty (const UnsignedDataObjectPropertySequence& s)
  {
    this->UnsignedDataObjectProperty_ = s;
  }

  const UnsignedDataObjectProperties::IdOptional& UnsignedDataObjectProperties::
  id () const
  {
    return this->Id_;
  }

  UnsignedDataObjectProperties::IdOptional& UnsignedDataObjectProperties::
  id ()
  {
    return this->Id_;
  }

  void UnsignedDataObjectProperties::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void UnsignedDataObjectProperties::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void UnsignedDataObjectProperties::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // QualifyingPropertiesReference
  // 

  const QualifyingPropertiesReference::URIType& QualifyingPropertiesReference::
  uRI () const
  {
    return this->URI_.get ();
  }

  QualifyingPropertiesReference::URIType& QualifyingPropertiesReference::
  uRI ()
  {
    return this->URI_.get ();
  }

  void QualifyingPropertiesReference::
  uRI (const URIType& x)
  {
    this->URI_.set (x);
  }

  void QualifyingPropertiesReference::
  uRI (::std::auto_ptr< URIType > x)
  {
    this->URI_.set (x);
  }

  const QualifyingPropertiesReference::IdOptional& QualifyingPropertiesReference::
  id () const
  {
    return this->Id_;
  }

  QualifyingPropertiesReference::IdOptional& QualifyingPropertiesReference::
  id ()
  {
    return this->Id_;
  }

  void QualifyingPropertiesReference::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void QualifyingPropertiesReference::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void QualifyingPropertiesReference::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // CertIDList
  // 

  const CertIDList::CertSequence& CertIDList::
  cert () const
  {
    return this->Cert_;
  }

  CertIDList::CertSequence& CertIDList::
  cert ()
  {
    return this->Cert_;
  }

  void CertIDList::
  cert (const CertSequence& s)
  {
    this->Cert_ = s;
  }


  // CertID
  // 

  const CertID::CertDigestType& CertID::
  certDigest () const
  {
    return this->CertDigest_.get ();
  }

  CertID::CertDigestType& CertID::
  certDigest ()
  {
    return this->CertDigest_.get ();
  }

  void CertID::
  certDigest (const CertDigestType& x)
  {
    this->CertDigest_.set (x);
  }

  void CertID::
  certDigest (::std::auto_ptr< CertDigestType > x)
  {
    this->CertDigest_.set (x);
  }

  const CertID::IssuerSerialType& CertID::
  issuerSerial () const
  {
    return this->IssuerSerial_.get ();
  }

  CertID::IssuerSerialType& CertID::
  issuerSerial ()
  {
    return this->IssuerSerial_.get ();
  }

  void CertID::
  issuerSerial (const IssuerSerialType& x)
  {
    this->IssuerSerial_.set (x);
  }

  void CertID::
  issuerSerial (::std::auto_ptr< IssuerSerialType > x)
  {
    this->IssuerSerial_.set (x);
  }

  const CertID::URIOptional& CertID::
  uRI () const
  {
    return this->URI_;
  }

  CertID::URIOptional& CertID::
  uRI ()
  {
    return this->URI_;
  }

  void CertID::
  uRI (const URIType& x)
  {
    this->URI_.set (x);
  }

  void CertID::
  uRI (const URIOptional& x)
  {
    this->URI_ = x;
  }

  void CertID::
  uRI (::std::auto_ptr< URIType > x)
  {
    this->URI_.set (x);
  }


  // DigestAlgAndValue
  // 

  const DigestAlgAndValue::DigestMethodType& DigestAlgAndValue::
  digestMethod () const
  {
    return this->DigestMethod_.get ();
  }

  DigestAlgAndValue::DigestMethodType& DigestAlgAndValue::
  digestMethod ()
  {
    return this->DigestMethod_.get ();
  }

  void DigestAlgAndValue::
  digestMethod (const DigestMethodType& x)
  {
    this->DigestMethod_.set (x);
  }

  void DigestAlgAndValue::
  digestMethod (::std::auto_ptr< DigestMethodType > x)
  {
    this->DigestMethod_.set (x);
  }

  const DigestAlgAndValue::DigestValueType& DigestAlgAndValue::
  digestValue () const
  {
    return this->DigestValue_.get ();
  }

  DigestAlgAndValue::DigestValueType& DigestAlgAndValue::
  digestValue ()
  {
    return this->DigestValue_.get ();
  }

  void DigestAlgAndValue::
  digestValue (const DigestValueType& x)
  {
    this->DigestValue_.set (x);
  }

  void DigestAlgAndValue::
  digestValue (::std::auto_ptr< DigestValueType > x)
  {
    this->DigestValue_.set (x);
  }


  // SignaturePolicyIdentifier
  // 

  const SignaturePolicyIdentifier::SignaturePolicyIdOptional& SignaturePolicyIdentifier::
  signaturePolicyId () const
  {
    return this->SignaturePolicyId_;
  }

  SignaturePolicyIdentifier::SignaturePolicyIdOptional& SignaturePolicyIdentifier::
  signaturePolicyId ()
  {
    return this->SignaturePolicyId_;
  }

  void SignaturePolicyIdentifier::
  signaturePolicyId (const SignaturePolicyIdType& x)
  {
    this->SignaturePolicyId_.set (x);
  }

  void SignaturePolicyIdentifier::
  signaturePolicyId (const SignaturePolicyIdOptional& x)
  {
    this->SignaturePolicyId_ = x;
  }

  void SignaturePolicyIdentifier::
  signaturePolicyId (::std::auto_ptr< SignaturePolicyIdType > x)
  {
    this->SignaturePolicyId_.set (x);
  }

  const SignaturePolicyIdentifier::SignaturePolicyImpliedOptional& SignaturePolicyIdentifier::
  signaturePolicyImplied () const
  {
    return this->SignaturePolicyImplied_;
  }

  SignaturePolicyIdentifier::SignaturePolicyImpliedOptional& SignaturePolicyIdentifier::
  signaturePolicyImplied ()
  {
    return this->SignaturePolicyImplied_;
  }

  void SignaturePolicyIdentifier::
  signaturePolicyImplied (const SignaturePolicyImpliedType& x)
  {
    this->SignaturePolicyImplied_.set (x);
  }

  void SignaturePolicyIdentifier::
  signaturePolicyImplied (const SignaturePolicyImpliedOptional& x)
  {
    this->SignaturePolicyImplied_ = x;
  }

  void SignaturePolicyIdentifier::
  signaturePolicyImplied (::std::auto_ptr< SignaturePolicyImpliedType > x)
  {
    this->SignaturePolicyImplied_.set (x);
  }


  // SignaturePolicyId
  // 

  const SignaturePolicyId::SigPolicyIdType& SignaturePolicyId::
  sigPolicyId () const
  {
    return this->SigPolicyId_.get ();
  }

  SignaturePolicyId::SigPolicyIdType& SignaturePolicyId::
  sigPolicyId ()
  {
    return this->SigPolicyId_.get ();
  }

  void SignaturePolicyId::
  sigPolicyId (const SigPolicyIdType& x)
  {
    this->SigPolicyId_.set (x);
  }

  void SignaturePolicyId::
  sigPolicyId (::std::auto_ptr< SigPolicyIdType > x)
  {
    this->SigPolicyId_.set (x);
  }

  const SignaturePolicyId::TransformsOptional& SignaturePolicyId::
  transforms () const
  {
    return this->Transforms_;
  }

  SignaturePolicyId::TransformsOptional& SignaturePolicyId::
  transforms ()
  {
    return this->Transforms_;
  }

  void SignaturePolicyId::
  transforms (const TransformsType& x)
  {
    this->Transforms_.set (x);
  }

  void SignaturePolicyId::
  transforms (const TransformsOptional& x)
  {
    this->Transforms_ = x;
  }

  void SignaturePolicyId::
  transforms (::std::auto_ptr< TransformsType > x)
  {
    this->Transforms_.set (x);
  }

  const SignaturePolicyId::SigPolicyHashType& SignaturePolicyId::
  sigPolicyHash () const
  {
    return this->SigPolicyHash_.get ();
  }

  SignaturePolicyId::SigPolicyHashType& SignaturePolicyId::
  sigPolicyHash ()
  {
    return this->SigPolicyHash_.get ();
  }

  void SignaturePolicyId::
  sigPolicyHash (const SigPolicyHashType& x)
  {
    this->SigPolicyHash_.set (x);
  }

  void SignaturePolicyId::
  sigPolicyHash (::std::auto_ptr< SigPolicyHashType > x)
  {
    this->SigPolicyHash_.set (x);
  }

  const SignaturePolicyId::SigPolicyQualifiersOptional& SignaturePolicyId::
  sigPolicyQualifiers () const
  {
    return this->SigPolicyQualifiers_;
  }

  SignaturePolicyId::SigPolicyQualifiersOptional& SignaturePolicyId::
  sigPolicyQualifiers ()
  {
    return this->SigPolicyQualifiers_;
  }

  void SignaturePolicyId::
  sigPolicyQualifiers (const SigPolicyQualifiersType& x)
  {
    this->SigPolicyQualifiers_.set (x);
  }

  void SignaturePolicyId::
  sigPolicyQualifiers (const SigPolicyQualifiersOptional& x)
  {
    this->SigPolicyQualifiers_ = x;
  }

  void SignaturePolicyId::
  sigPolicyQualifiers (::std::auto_ptr< SigPolicyQualifiersType > x)
  {
    this->SigPolicyQualifiers_.set (x);
  }


  // SigPolicyQualifiersList
  // 

  const SigPolicyQualifiersList::SigPolicyQualifierSequence& SigPolicyQualifiersList::
  sigPolicyQualifier () const
  {
    return this->SigPolicyQualifier_;
  }

  SigPolicyQualifiersList::SigPolicyQualifierSequence& SigPolicyQualifiersList::
  sigPolicyQualifier ()
  {
    return this->SigPolicyQualifier_;
  }

  void SigPolicyQualifiersList::
  sigPolicyQualifier (const SigPolicyQualifierSequence& s)
  {
    this->SigPolicyQualifier_ = s;
  }


  // SPUserNotice
  // 

  const SPUserNotice::NoticeRefOptional& SPUserNotice::
  noticeRef () const
  {
    return this->NoticeRef_;
  }

  SPUserNotice::NoticeRefOptional& SPUserNotice::
  noticeRef ()
  {
    return this->NoticeRef_;
  }

  void SPUserNotice::
  noticeRef (const NoticeRefType& x)
  {
    this->NoticeRef_.set (x);
  }

  void SPUserNotice::
  noticeRef (const NoticeRefOptional& x)
  {
    this->NoticeRef_ = x;
  }

  void SPUserNotice::
  noticeRef (::std::auto_ptr< NoticeRefType > x)
  {
    this->NoticeRef_.set (x);
  }

  const SPUserNotice::ExplicitTextOptional& SPUserNotice::
  explicitText () const
  {
    return this->ExplicitText_;
  }

  SPUserNotice::ExplicitTextOptional& SPUserNotice::
  explicitText ()
  {
    return this->ExplicitText_;
  }

  void SPUserNotice::
  explicitText (const ExplicitTextType& x)
  {
    this->ExplicitText_.set (x);
  }

  void SPUserNotice::
  explicitText (const ExplicitTextOptional& x)
  {
    this->ExplicitText_ = x;
  }

  void SPUserNotice::
  explicitText (::std::auto_ptr< ExplicitTextType > x)
  {
    this->ExplicitText_.set (x);
  }


  // NoticeReference
  // 

  const NoticeReference::OrganizationType& NoticeReference::
  organization () const
  {
    return this->Organization_.get ();
  }

  NoticeReference::OrganizationType& NoticeReference::
  organization ()
  {
    return this->Organization_.get ();
  }

  void NoticeReference::
  organization (const OrganizationType& x)
  {
    this->Organization_.set (x);
  }

  void NoticeReference::
  organization (::std::auto_ptr< OrganizationType > x)
  {
    this->Organization_.set (x);
  }

  const NoticeReference::NoticeNumbersType& NoticeReference::
  noticeNumbers () const
  {
    return this->NoticeNumbers_.get ();
  }

  NoticeReference::NoticeNumbersType& NoticeReference::
  noticeNumbers ()
  {
    return this->NoticeNumbers_.get ();
  }

  void NoticeReference::
  noticeNumbers (const NoticeNumbersType& x)
  {
    this->NoticeNumbers_.set (x);
  }

  void NoticeReference::
  noticeNumbers (::std::auto_ptr< NoticeNumbersType > x)
  {
    this->NoticeNumbers_.set (x);
  }


  // IntegerList
  // 

  const IntegerList::IntSequence& IntegerList::
  int_ () const
  {
    return this->int__;
  }

  IntegerList::IntSequence& IntegerList::
  int_ ()
  {
    return this->int__;
  }

  void IntegerList::
  int_ (const IntSequence& s)
  {
    this->int__ = s;
  }


  // CounterSignature
  // 

  const CounterSignature::SignatureType& CounterSignature::
  signature () const
  {
    return this->Signature_.get ();
  }

  CounterSignature::SignatureType& CounterSignature::
  signature ()
  {
    return this->Signature_.get ();
  }

  void CounterSignature::
  signature (const SignatureType& x)
  {
    this->Signature_.set (x);
  }

  void CounterSignature::
  signature (::std::auto_ptr< SignatureType > x)
  {
    this->Signature_.set (x);
  }


  // DataObjectFormat
  // 

  const DataObjectFormat::DescriptionOptional& DataObjectFormat::
  description () const
  {
    return this->Description_;
  }

  DataObjectFormat::DescriptionOptional& DataObjectFormat::
  description ()
  {
    return this->Description_;
  }

  void DataObjectFormat::
  description (const DescriptionType& x)
  {
    this->Description_.set (x);
  }

  void DataObjectFormat::
  description (const DescriptionOptional& x)
  {
    this->Description_ = x;
  }

  void DataObjectFormat::
  description (::std::auto_ptr< DescriptionType > x)
  {
    this->Description_.set (x);
  }

  const DataObjectFormat::ObjectIdentifierOptional& DataObjectFormat::
  objectIdentifier () const
  {
    return this->ObjectIdentifier_;
  }

  DataObjectFormat::ObjectIdentifierOptional& DataObjectFormat::
  objectIdentifier ()
  {
    return this->ObjectIdentifier_;
  }

  void DataObjectFormat::
  objectIdentifier (const ObjectIdentifierType& x)
  {
    this->ObjectIdentifier_.set (x);
  }

  void DataObjectFormat::
  objectIdentifier (const ObjectIdentifierOptional& x)
  {
    this->ObjectIdentifier_ = x;
  }

  void DataObjectFormat::
  objectIdentifier (::std::auto_ptr< ObjectIdentifierType > x)
  {
    this->ObjectIdentifier_.set (x);
  }

  const DataObjectFormat::MimeTypeOptional& DataObjectFormat::
  mimeType () const
  {
    return this->MimeType_;
  }

  DataObjectFormat::MimeTypeOptional& DataObjectFormat::
  mimeType ()
  {
    return this->MimeType_;
  }

  void DataObjectFormat::
  mimeType (const MimeTypeType& x)
  {
    this->MimeType_.set (x);
  }

  void DataObjectFormat::
  mimeType (const MimeTypeOptional& x)
  {
    this->MimeType_ = x;
  }

  void DataObjectFormat::
  mimeType (::std::auto_ptr< MimeTypeType > x)
  {
    this->MimeType_.set (x);
  }

  const DataObjectFormat::EncodingOptional& DataObjectFormat::
  encoding () const
  {
    return this->Encoding_;
  }

  DataObjectFormat::EncodingOptional& DataObjectFormat::
  encoding ()
  {
    return this->Encoding_;
  }

  void DataObjectFormat::
  encoding (const EncodingType& x)
  {
    this->Encoding_.set (x);
  }

  void DataObjectFormat::
  encoding (const EncodingOptional& x)
  {
    this->Encoding_ = x;
  }

  void DataObjectFormat::
  encoding (::std::auto_ptr< EncodingType > x)
  {
    this->Encoding_.set (x);
  }

  const DataObjectFormat::ObjectReferenceType& DataObjectFormat::
  objectReference () const
  {
    return this->ObjectReference_.get ();
  }

  DataObjectFormat::ObjectReferenceType& DataObjectFormat::
  objectReference ()
  {
    return this->ObjectReference_.get ();
  }

  void DataObjectFormat::
  objectReference (const ObjectReferenceType& x)
  {
    this->ObjectReference_.set (x);
  }

  void DataObjectFormat::
  objectReference (::std::auto_ptr< ObjectReferenceType > x)
  {
    this->ObjectReference_.set (x);
  }


  // CommitmentTypeIndication
  // 

  const CommitmentTypeIndication::CommitmentTypeIdType& CommitmentTypeIndication::
  commitmentTypeId () const
  {
    return this->CommitmentTypeId_.get ();
  }

  CommitmentTypeIndication::CommitmentTypeIdType& CommitmentTypeIndication::
  commitmentTypeId ()
  {
    return this->CommitmentTypeId_.get ();
  }

  void CommitmentTypeIndication::
  commitmentTypeId (const CommitmentTypeIdType& x)
  {
    this->CommitmentTypeId_.set (x);
  }

  void CommitmentTypeIndication::
  commitmentTypeId (::std::auto_ptr< CommitmentTypeIdType > x)
  {
    this->CommitmentTypeId_.set (x);
  }

  const CommitmentTypeIndication::ObjectReferenceSequence& CommitmentTypeIndication::
  objectReference () const
  {
    return this->ObjectReference_;
  }

  CommitmentTypeIndication::ObjectReferenceSequence& CommitmentTypeIndication::
  objectReference ()
  {
    return this->ObjectReference_;
  }

  void CommitmentTypeIndication::
  objectReference (const ObjectReferenceSequence& s)
  {
    this->ObjectReference_ = s;
  }

  const CommitmentTypeIndication::AllSignedDataObjectsOptional& CommitmentTypeIndication::
  allSignedDataObjects () const
  {
    return this->AllSignedDataObjects_;
  }

  CommitmentTypeIndication::AllSignedDataObjectsOptional& CommitmentTypeIndication::
  allSignedDataObjects ()
  {
    return this->AllSignedDataObjects_;
  }

  void CommitmentTypeIndication::
  allSignedDataObjects (const AllSignedDataObjectsType& x)
  {
    this->AllSignedDataObjects_.set (x);
  }

  void CommitmentTypeIndication::
  allSignedDataObjects (const AllSignedDataObjectsOptional& x)
  {
    this->AllSignedDataObjects_ = x;
  }

  void CommitmentTypeIndication::
  allSignedDataObjects (::std::auto_ptr< AllSignedDataObjectsType > x)
  {
    this->AllSignedDataObjects_.set (x);
  }

  const CommitmentTypeIndication::CommitmentTypeQualifiersOptional& CommitmentTypeIndication::
  commitmentTypeQualifiers () const
  {
    return this->CommitmentTypeQualifiers_;
  }

  CommitmentTypeIndication::CommitmentTypeQualifiersOptional& CommitmentTypeIndication::
  commitmentTypeQualifiers ()
  {
    return this->CommitmentTypeQualifiers_;
  }

  void CommitmentTypeIndication::
  commitmentTypeQualifiers (const CommitmentTypeQualifiersType& x)
  {
    this->CommitmentTypeQualifiers_.set (x);
  }

  void CommitmentTypeIndication::
  commitmentTypeQualifiers (const CommitmentTypeQualifiersOptional& x)
  {
    this->CommitmentTypeQualifiers_ = x;
  }

  void CommitmentTypeIndication::
  commitmentTypeQualifiers (::std::auto_ptr< CommitmentTypeQualifiersType > x)
  {
    this->CommitmentTypeQualifiers_.set (x);
  }


  // CommitmentTypeQualifiersList
  // 

  const CommitmentTypeQualifiersList::CommitmentTypeQualifierSequence& CommitmentTypeQualifiersList::
  commitmentTypeQualifier () const
  {
    return this->CommitmentTypeQualifier_;
  }

  CommitmentTypeQualifiersList::CommitmentTypeQualifierSequence& CommitmentTypeQualifiersList::
  commitmentTypeQualifier ()
  {
    return this->CommitmentTypeQualifier_;
  }

  void CommitmentTypeQualifiersList::
  commitmentTypeQualifier (const CommitmentTypeQualifierSequence& s)
  {
    this->CommitmentTypeQualifier_ = s;
  }


  // SignatureProductionPlace
  // 

  const SignatureProductionPlace::CityOptional& SignatureProductionPlace::
  city () const
  {
    return this->City_;
  }

  SignatureProductionPlace::CityOptional& SignatureProductionPlace::
  city ()
  {
    return this->City_;
  }

  void SignatureProductionPlace::
  city (const CityType& x)
  {
    this->City_.set (x);
  }

  void SignatureProductionPlace::
  city (const CityOptional& x)
  {
    this->City_ = x;
  }

  void SignatureProductionPlace::
  city (::std::auto_ptr< CityType > x)
  {
    this->City_.set (x);
  }

  const SignatureProductionPlace::StateOrProvinceOptional& SignatureProductionPlace::
  stateOrProvince () const
  {
    return this->StateOrProvince_;
  }

  SignatureProductionPlace::StateOrProvinceOptional& SignatureProductionPlace::
  stateOrProvince ()
  {
    return this->StateOrProvince_;
  }

  void SignatureProductionPlace::
  stateOrProvince (const StateOrProvinceType& x)
  {
    this->StateOrProvince_.set (x);
  }

  void SignatureProductionPlace::
  stateOrProvince (const StateOrProvinceOptional& x)
  {
    this->StateOrProvince_ = x;
  }

  void SignatureProductionPlace::
  stateOrProvince (::std::auto_ptr< StateOrProvinceType > x)
  {
    this->StateOrProvince_.set (x);
  }

  const SignatureProductionPlace::PostalCodeOptional& SignatureProductionPlace::
  postalCode () const
  {
    return this->PostalCode_;
  }

  SignatureProductionPlace::PostalCodeOptional& SignatureProductionPlace::
  postalCode ()
  {
    return this->PostalCode_;
  }

  void SignatureProductionPlace::
  postalCode (const PostalCodeType& x)
  {
    this->PostalCode_.set (x);
  }

  void SignatureProductionPlace::
  postalCode (const PostalCodeOptional& x)
  {
    this->PostalCode_ = x;
  }

  void SignatureProductionPlace::
  postalCode (::std::auto_ptr< PostalCodeType > x)
  {
    this->PostalCode_.set (x);
  }

  const SignatureProductionPlace::CountryNameOptional& SignatureProductionPlace::
  countryName () const
  {
    return this->CountryName_;
  }

  SignatureProductionPlace::CountryNameOptional& SignatureProductionPlace::
  countryName ()
  {
    return this->CountryName_;
  }

  void SignatureProductionPlace::
  countryName (const CountryNameType& x)
  {
    this->CountryName_.set (x);
  }

  void SignatureProductionPlace::
  countryName (const CountryNameOptional& x)
  {
    this->CountryName_ = x;
  }

  void SignatureProductionPlace::
  countryName (::std::auto_ptr< CountryNameType > x)
  {
    this->CountryName_.set (x);
  }


  // SignerRole
  // 

  const SignerRole::ClaimedRolesOptional& SignerRole::
  claimedRoles () const
  {
    return this->ClaimedRoles_;
  }

  SignerRole::ClaimedRolesOptional& SignerRole::
  claimedRoles ()
  {
    return this->ClaimedRoles_;
  }

  void SignerRole::
  claimedRoles (const ClaimedRolesType& x)
  {
    this->ClaimedRoles_.set (x);
  }

  void SignerRole::
  claimedRoles (const ClaimedRolesOptional& x)
  {
    this->ClaimedRoles_ = x;
  }

  void SignerRole::
  claimedRoles (::std::auto_ptr< ClaimedRolesType > x)
  {
    this->ClaimedRoles_.set (x);
  }

  const SignerRole::CertifiedRolesOptional& SignerRole::
  certifiedRoles () const
  {
    return this->CertifiedRoles_;
  }

  SignerRole::CertifiedRolesOptional& SignerRole::
  certifiedRoles ()
  {
    return this->CertifiedRoles_;
  }

  void SignerRole::
  certifiedRoles (const CertifiedRolesType& x)
  {
    this->CertifiedRoles_.set (x);
  }

  void SignerRole::
  certifiedRoles (const CertifiedRolesOptional& x)
  {
    this->CertifiedRoles_ = x;
  }

  void SignerRole::
  certifiedRoles (::std::auto_ptr< CertifiedRolesType > x)
  {
    this->CertifiedRoles_.set (x);
  }


  // ClaimedRolesList
  // 

  const ClaimedRolesList::ClaimedRoleSequence& ClaimedRolesList::
  claimedRole () const
  {
    return this->ClaimedRole_;
  }

  ClaimedRolesList::ClaimedRoleSequence& ClaimedRolesList::
  claimedRole ()
  {
    return this->ClaimedRole_;
  }

  void ClaimedRolesList::
  claimedRole (const ClaimedRoleSequence& s)
  {
    this->ClaimedRole_ = s;
  }


  // CertifiedRolesList
  // 

  const CertifiedRolesList::CertifiedRoleSequence& CertifiedRolesList::
  certifiedRole () const
  {
    return this->CertifiedRole_;
  }

  CertifiedRolesList::CertifiedRoleSequence& CertifiedRolesList::
  certifiedRole ()
  {
    return this->CertifiedRole_;
  }

  void CertifiedRolesList::
  certifiedRole (const CertifiedRoleSequence& s)
  {
    this->CertifiedRole_ = s;
  }


  // CompleteCertificateRefs
  // 

  const CompleteCertificateRefs::CertRefsType& CompleteCertificateRefs::
  certRefs () const
  {
    return this->CertRefs_.get ();
  }

  CompleteCertificateRefs::CertRefsType& CompleteCertificateRefs::
  certRefs ()
  {
    return this->CertRefs_.get ();
  }

  void CompleteCertificateRefs::
  certRefs (const CertRefsType& x)
  {
    this->CertRefs_.set (x);
  }

  void CompleteCertificateRefs::
  certRefs (::std::auto_ptr< CertRefsType > x)
  {
    this->CertRefs_.set (x);
  }

  const CompleteCertificateRefs::IdOptional& CompleteCertificateRefs::
  id () const
  {
    return this->Id_;
  }

  CompleteCertificateRefs::IdOptional& CompleteCertificateRefs::
  id ()
  {
    return this->Id_;
  }

  void CompleteCertificateRefs::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void CompleteCertificateRefs::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void CompleteCertificateRefs::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // CompleteRevocationRefs
  // 

  const CompleteRevocationRefs::CRLRefsOptional& CompleteRevocationRefs::
  cRLRefs () const
  {
    return this->CRLRefs_;
  }

  CompleteRevocationRefs::CRLRefsOptional& CompleteRevocationRefs::
  cRLRefs ()
  {
    return this->CRLRefs_;
  }

  void CompleteRevocationRefs::
  cRLRefs (const CRLRefsType& x)
  {
    this->CRLRefs_.set (x);
  }

  void CompleteRevocationRefs::
  cRLRefs (const CRLRefsOptional& x)
  {
    this->CRLRefs_ = x;
  }

  void CompleteRevocationRefs::
  cRLRefs (::std::auto_ptr< CRLRefsType > x)
  {
    this->CRLRefs_.set (x);
  }

  const CompleteRevocationRefs::OCSPRefsOptional& CompleteRevocationRefs::
  oCSPRefs () const
  {
    return this->OCSPRefs_;
  }

  CompleteRevocationRefs::OCSPRefsOptional& CompleteRevocationRefs::
  oCSPRefs ()
  {
    return this->OCSPRefs_;
  }

  void CompleteRevocationRefs::
  oCSPRefs (const OCSPRefsType& x)
  {
    this->OCSPRefs_.set (x);
  }

  void CompleteRevocationRefs::
  oCSPRefs (const OCSPRefsOptional& x)
  {
    this->OCSPRefs_ = x;
  }

  void CompleteRevocationRefs::
  oCSPRefs (::std::auto_ptr< OCSPRefsType > x)
  {
    this->OCSPRefs_.set (x);
  }

  const CompleteRevocationRefs::OtherRefsOptional& CompleteRevocationRefs::
  otherRefs () const
  {
    return this->OtherRefs_;
  }

  CompleteRevocationRefs::OtherRefsOptional& CompleteRevocationRefs::
  otherRefs ()
  {
    return this->OtherRefs_;
  }

  void CompleteRevocationRefs::
  otherRefs (const OtherRefsType& x)
  {
    this->OtherRefs_.set (x);
  }

  void CompleteRevocationRefs::
  otherRefs (const OtherRefsOptional& x)
  {
    this->OtherRefs_ = x;
  }

  void CompleteRevocationRefs::
  otherRefs (::std::auto_ptr< OtherRefsType > x)
  {
    this->OtherRefs_.set (x);
  }

  const CompleteRevocationRefs::IdOptional& CompleteRevocationRefs::
  id () const
  {
    return this->Id_;
  }

  CompleteRevocationRefs::IdOptional& CompleteRevocationRefs::
  id ()
  {
    return this->Id_;
  }

  void CompleteRevocationRefs::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void CompleteRevocationRefs::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void CompleteRevocationRefs::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // CRLRefs
  // 

  const CRLRefs::CRLRefSequence& CRLRefs::
  cRLRef () const
  {
    return this->CRLRef_;
  }

  CRLRefs::CRLRefSequence& CRLRefs::
  cRLRef ()
  {
    return this->CRLRef_;
  }

  void CRLRefs::
  cRLRef (const CRLRefSequence& s)
  {
    this->CRLRef_ = s;
  }


  // CRLRef
  // 

  const CRLRef::DigestAlgAndValueType& CRLRef::
  digestAlgAndValue () const
  {
    return this->DigestAlgAndValue_.get ();
  }

  CRLRef::DigestAlgAndValueType& CRLRef::
  digestAlgAndValue ()
  {
    return this->DigestAlgAndValue_.get ();
  }

  void CRLRef::
  digestAlgAndValue (const DigestAlgAndValueType& x)
  {
    this->DigestAlgAndValue_.set (x);
  }

  void CRLRef::
  digestAlgAndValue (::std::auto_ptr< DigestAlgAndValueType > x)
  {
    this->DigestAlgAndValue_.set (x);
  }

  const CRLRef::CRLIdentifierOptional& CRLRef::
  cRLIdentifier () const
  {
    return this->CRLIdentifier_;
  }

  CRLRef::CRLIdentifierOptional& CRLRef::
  cRLIdentifier ()
  {
    return this->CRLIdentifier_;
  }

  void CRLRef::
  cRLIdentifier (const CRLIdentifierType& x)
  {
    this->CRLIdentifier_.set (x);
  }

  void CRLRef::
  cRLIdentifier (const CRLIdentifierOptional& x)
  {
    this->CRLIdentifier_ = x;
  }

  void CRLRef::
  cRLIdentifier (::std::auto_ptr< CRLIdentifierType > x)
  {
    this->CRLIdentifier_.set (x);
  }


  // CRLIdentifier
  // 

  const CRLIdentifier::IssuerType& CRLIdentifier::
  issuer () const
  {
    return this->Issuer_.get ();
  }

  CRLIdentifier::IssuerType& CRLIdentifier::
  issuer ()
  {
    return this->Issuer_.get ();
  }

  void CRLIdentifier::
  issuer (const IssuerType& x)
  {
    this->Issuer_.set (x);
  }

  void CRLIdentifier::
  issuer (::std::auto_ptr< IssuerType > x)
  {
    this->Issuer_.set (x);
  }

  const CRLIdentifier::IssueTimeType& CRLIdentifier::
  issueTime () const
  {
    return this->IssueTime_.get ();
  }

  CRLIdentifier::IssueTimeType& CRLIdentifier::
  issueTime ()
  {
    return this->IssueTime_.get ();
  }

  void CRLIdentifier::
  issueTime (const IssueTimeType& x)
  {
    this->IssueTime_.set (x);
  }

  void CRLIdentifier::
  issueTime (::std::auto_ptr< IssueTimeType > x)
  {
    this->IssueTime_.set (x);
  }

  const CRLIdentifier::NumberOptional& CRLIdentifier::
  number () const
  {
    return this->Number_;
  }

  CRLIdentifier::NumberOptional& CRLIdentifier::
  number ()
  {
    return this->Number_;
  }

  void CRLIdentifier::
  number (const NumberType& x)
  {
    this->Number_.set (x);
  }

  void CRLIdentifier::
  number (const NumberOptional& x)
  {
    this->Number_ = x;
  }

  const CRLIdentifier::URIOptional& CRLIdentifier::
  uRI () const
  {
    return this->URI_;
  }

  CRLIdentifier::URIOptional& CRLIdentifier::
  uRI ()
  {
    return this->URI_;
  }

  void CRLIdentifier::
  uRI (const URIType& x)
  {
    this->URI_.set (x);
  }

  void CRLIdentifier::
  uRI (const URIOptional& x)
  {
    this->URI_ = x;
  }

  void CRLIdentifier::
  uRI (::std::auto_ptr< URIType > x)
  {
    this->URI_.set (x);
  }


  // OCSPRefs
  // 

  const OCSPRefs::OCSPRefSequence& OCSPRefs::
  oCSPRef () const
  {
    return this->OCSPRef_;
  }

  OCSPRefs::OCSPRefSequence& OCSPRefs::
  oCSPRef ()
  {
    return this->OCSPRef_;
  }

  void OCSPRefs::
  oCSPRef (const OCSPRefSequence& s)
  {
    this->OCSPRef_ = s;
  }


  // OCSPRef
  // 

  const OCSPRef::OCSPIdentifierType& OCSPRef::
  oCSPIdentifier () const
  {
    return this->OCSPIdentifier_.get ();
  }

  OCSPRef::OCSPIdentifierType& OCSPRef::
  oCSPIdentifier ()
  {
    return this->OCSPIdentifier_.get ();
  }

  void OCSPRef::
  oCSPIdentifier (const OCSPIdentifierType& x)
  {
    this->OCSPIdentifier_.set (x);
  }

  void OCSPRef::
  oCSPIdentifier (::std::auto_ptr< OCSPIdentifierType > x)
  {
    this->OCSPIdentifier_.set (x);
  }

  const OCSPRef::DigestAlgAndValueOptional& OCSPRef::
  digestAlgAndValue () const
  {
    return this->DigestAlgAndValue_;
  }

  OCSPRef::DigestAlgAndValueOptional& OCSPRef::
  digestAlgAndValue ()
  {
    return this->DigestAlgAndValue_;
  }

  void OCSPRef::
  digestAlgAndValue (const DigestAlgAndValueType& x)
  {
    this->DigestAlgAndValue_.set (x);
  }

  void OCSPRef::
  digestAlgAndValue (const DigestAlgAndValueOptional& x)
  {
    this->DigestAlgAndValue_ = x;
  }

  void OCSPRef::
  digestAlgAndValue (::std::auto_ptr< DigestAlgAndValueType > x)
  {
    this->DigestAlgAndValue_.set (x);
  }


  // ResponderID
  // 

  const ResponderID::ByNameOptional& ResponderID::
  byName () const
  {
    return this->ByName_;
  }

  ResponderID::ByNameOptional& ResponderID::
  byName ()
  {
    return this->ByName_;
  }

  void ResponderID::
  byName (const ByNameType& x)
  {
    this->ByName_.set (x);
  }

  void ResponderID::
  byName (const ByNameOptional& x)
  {
    this->ByName_ = x;
  }

  void ResponderID::
  byName (::std::auto_ptr< ByNameType > x)
  {
    this->ByName_.set (x);
  }

  const ResponderID::ByKeyOptional& ResponderID::
  byKey () const
  {
    return this->ByKey_;
  }

  ResponderID::ByKeyOptional& ResponderID::
  byKey ()
  {
    return this->ByKey_;
  }

  void ResponderID::
  byKey (const ByKeyType& x)
  {
    this->ByKey_.set (x);
  }

  void ResponderID::
  byKey (const ByKeyOptional& x)
  {
    this->ByKey_ = x;
  }

  void ResponderID::
  byKey (::std::auto_ptr< ByKeyType > x)
  {
    this->ByKey_.set (x);
  }


  // OCSPIdentifier
  // 

  const OCSPIdentifier::ResponderIDType& OCSPIdentifier::
  responderID () const
  {
    return this->ResponderID_.get ();
  }

  OCSPIdentifier::ResponderIDType& OCSPIdentifier::
  responderID ()
  {
    return this->ResponderID_.get ();
  }

  void OCSPIdentifier::
  responderID (const ResponderIDType& x)
  {
    this->ResponderID_.set (x);
  }

  void OCSPIdentifier::
  responderID (::std::auto_ptr< ResponderIDType > x)
  {
    this->ResponderID_.set (x);
  }

  const OCSPIdentifier::ProducedAtType& OCSPIdentifier::
  producedAt () const
  {
    return this->ProducedAt_.get ();
  }

  OCSPIdentifier::ProducedAtType& OCSPIdentifier::
  producedAt ()
  {
    return this->ProducedAt_.get ();
  }

  void OCSPIdentifier::
  producedAt (const ProducedAtType& x)
  {
    this->ProducedAt_.set (x);
  }

  void OCSPIdentifier::
  producedAt (::std::auto_ptr< ProducedAtType > x)
  {
    this->ProducedAt_.set (x);
  }

  const OCSPIdentifier::URIOptional& OCSPIdentifier::
  uRI () const
  {
    return this->URI_;
  }

  OCSPIdentifier::URIOptional& OCSPIdentifier::
  uRI ()
  {
    return this->URI_;
  }

  void OCSPIdentifier::
  uRI (const URIType& x)
  {
    this->URI_.set (x);
  }

  void OCSPIdentifier::
  uRI (const URIOptional& x)
  {
    this->URI_ = x;
  }

  void OCSPIdentifier::
  uRI (::std::auto_ptr< URIType > x)
  {
    this->URI_.set (x);
  }


  // OtherCertStatusRefs
  // 

  const OtherCertStatusRefs::OtherRefSequence& OtherCertStatusRefs::
  otherRef () const
  {
    return this->OtherRef_;
  }

  OtherCertStatusRefs::OtherRefSequence& OtherCertStatusRefs::
  otherRef ()
  {
    return this->OtherRef_;
  }

  void OtherCertStatusRefs::
  otherRef (const OtherRefSequence& s)
  {
    this->OtherRef_ = s;
  }


  // CertificateValues
  // 

  const CertificateValues::EncapsulatedX509CertificateSequence& CertificateValues::
  encapsulatedX509Certificate () const
  {
    return this->EncapsulatedX509Certificate_;
  }

  CertificateValues::EncapsulatedX509CertificateSequence& CertificateValues::
  encapsulatedX509Certificate ()
  {
    return this->EncapsulatedX509Certificate_;
  }

  void CertificateValues::
  encapsulatedX509Certificate (const EncapsulatedX509CertificateSequence& s)
  {
    this->EncapsulatedX509Certificate_ = s;
  }

  const CertificateValues::OtherCertificateSequence& CertificateValues::
  otherCertificate () const
  {
    return this->OtherCertificate_;
  }

  CertificateValues::OtherCertificateSequence& CertificateValues::
  otherCertificate ()
  {
    return this->OtherCertificate_;
  }

  void CertificateValues::
  otherCertificate (const OtherCertificateSequence& s)
  {
    this->OtherCertificate_ = s;
  }

  const CertificateValues::IdOptional& CertificateValues::
  id () const
  {
    return this->Id_;
  }

  CertificateValues::IdOptional& CertificateValues::
  id ()
  {
    return this->Id_;
  }

  void CertificateValues::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void CertificateValues::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void CertificateValues::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // RevocationValues
  // 

  const RevocationValues::CRLValuesOptional& RevocationValues::
  cRLValues () const
  {
    return this->CRLValues_;
  }

  RevocationValues::CRLValuesOptional& RevocationValues::
  cRLValues ()
  {
    return this->CRLValues_;
  }

  void RevocationValues::
  cRLValues (const CRLValuesType& x)
  {
    this->CRLValues_.set (x);
  }

  void RevocationValues::
  cRLValues (const CRLValuesOptional& x)
  {
    this->CRLValues_ = x;
  }

  void RevocationValues::
  cRLValues (::std::auto_ptr< CRLValuesType > x)
  {
    this->CRLValues_.set (x);
  }

  const RevocationValues::OCSPValuesOptional& RevocationValues::
  oCSPValues () const
  {
    return this->OCSPValues_;
  }

  RevocationValues::OCSPValuesOptional& RevocationValues::
  oCSPValues ()
  {
    return this->OCSPValues_;
  }

  void RevocationValues::
  oCSPValues (const OCSPValuesType& x)
  {
    this->OCSPValues_.set (x);
  }

  void RevocationValues::
  oCSPValues (const OCSPValuesOptional& x)
  {
    this->OCSPValues_ = x;
  }

  void RevocationValues::
  oCSPValues (::std::auto_ptr< OCSPValuesType > x)
  {
    this->OCSPValues_.set (x);
  }

  const RevocationValues::OtherValuesOptional& RevocationValues::
  otherValues () const
  {
    return this->OtherValues_;
  }

  RevocationValues::OtherValuesOptional& RevocationValues::
  otherValues ()
  {
    return this->OtherValues_;
  }

  void RevocationValues::
  otherValues (const OtherValuesType& x)
  {
    this->OtherValues_.set (x);
  }

  void RevocationValues::
  otherValues (const OtherValuesOptional& x)
  {
    this->OtherValues_ = x;
  }

  void RevocationValues::
  otherValues (::std::auto_ptr< OtherValuesType > x)
  {
    this->OtherValues_.set (x);
  }

  const RevocationValues::IdOptional& RevocationValues::
  id () const
  {
    return this->Id_;
  }

  RevocationValues::IdOptional& RevocationValues::
  id ()
  {
    return this->Id_;
  }

  void RevocationValues::
  id (const IdType& x)
  {
    this->Id_.set (x);
  }

  void RevocationValues::
  id (const IdOptional& x)
  {
    this->Id_ = x;
  }

  void RevocationValues::
  id (::std::auto_ptr< IdType > x)
  {
    this->Id_.set (x);
  }


  // CRLValues
  // 

  const CRLValues::EncapsulatedCRLValueSequence& CRLValues::
  encapsulatedCRLValue () const
  {
    return this->EncapsulatedCRLValue_;
  }

  CRLValues::EncapsulatedCRLValueSequence& CRLValues::
  encapsulatedCRLValue ()
  {
    return this->EncapsulatedCRLValue_;
  }

  void CRLValues::
  encapsulatedCRLValue (const EncapsulatedCRLValueSequence& s)
  {
    this->EncapsulatedCRLValue_ = s;
  }


  // OCSPValues
  // 

  const OCSPValues::EncapsulatedOCSPValueSequence& OCSPValues::
  encapsulatedOCSPValue () const
  {
    return this->EncapsulatedOCSPValue_;
  }

  OCSPValues::EncapsulatedOCSPValueSequence& OCSPValues::
  encapsulatedOCSPValue ()
  {
    return this->EncapsulatedOCSPValue_;
  }

  void OCSPValues::
  encapsulatedOCSPValue (const EncapsulatedOCSPValueSequence& s)
  {
    this->EncapsulatedOCSPValue_ = s;
  }


  // OtherCertStatusValues
  // 

  const OtherCertStatusValues::OtherValueSequence& OtherCertStatusValues::
  otherValue () const
  {
    return this->OtherValue_;
  }

  OtherCertStatusValues::OtherValueSequence& OtherCertStatusValues::
  otherValue ()
  {
    return this->OtherValue_;
  }

  void OtherCertStatusValues::
  otherValue (const OtherValueSequence& s)
  {
    this->OtherValue_ = s;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xades
{
  // Any
  //

  Any::
  Any ()
  : ::xml_schema::Type ()
  {
  }

  Any::
  Any (const Any& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c)
  {
  }

  Any::
  Any (const ::xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Any::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      break;
    }
  }

  Any* Any::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Any (*this, f, c);
  }

  Any::
  ~Any ()
  {
  }

  // ObjectIdentifier
  //

  ObjectIdentifier::
  ObjectIdentifier (const IdentifierType& Identifier)
  : ::xml_schema::Type (),
    Identifier_ (Identifier, ::xml_schema::Flags (), this),
    Description_ (::xml_schema::Flags (), this),
    DocumentationReferences_ (::xml_schema::Flags (), this)
  {
  }

  ObjectIdentifier::
  ObjectIdentifier (::std::auto_ptr< IdentifierType >& Identifier)
  : ::xml_schema::Type (),
    Identifier_ (Identifier, ::xml_schema::Flags (), this),
    Description_ (::xml_schema::Flags (), this),
    DocumentationReferences_ (::xml_schema::Flags (), this)
  {
  }

  ObjectIdentifier::
  ObjectIdentifier (const ObjectIdentifier& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Identifier_ (x.Identifier_, f, this),
    Description_ (x.Description_, f, this),
    DocumentationReferences_ (x.DocumentationReferences_, f, this)
  {
  }

  ObjectIdentifier::
  ObjectIdentifier (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Identifier_ (f, this),
    Description_ (f, this),
    DocumentationReferences_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ObjectIdentifier::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Identifier
      //
      if (n.name () == "Identifier" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< IdentifierType > r (
          IdentifierTraits::create (i, f, this));

        if (!Identifier_.present ())
        {
          this->Identifier_.set (r);
          continue;
        }
      }

      // Description
      //
      if (n.name () == "Description" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< DescriptionType > r (
          DescriptionTraits::create (i, f, this));

        if (!this->Description_)
        {
          this->Description_.set (r);
          continue;
        }
      }

      // DocumentationReferences
      //
      if (n.name () == "DocumentationReferences" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< DocumentationReferencesType > r (
          DocumentationReferencesTraits::create (i, f, this));

        if (!this->DocumentationReferences_)
        {
          this->DocumentationReferences_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Identifier_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Identifier",
        "http://uri.etsi.org/01903/v1.3.2#");
    }
  }

  ObjectIdentifier* ObjectIdentifier::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ObjectIdentifier (*this, f, c);
  }

  ObjectIdentifier::
  ~ObjectIdentifier ()
  {
  }

  // Identifier
  //

  Identifier::
  Identifier (const ::xml_schema::Uri& _xsd_Uri_base)
  : ::xml_schema::Uri (_xsd_Uri_base),
    Qualifier_ (::xml_schema::Flags (), this)
  {
  }

  Identifier::
  Identifier (const Identifier& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Uri (x, f, c),
    Qualifier_ (x.Qualifier_, f, this)
  {
  }

  Identifier::
  Identifier (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Uri (e, f | ::xml_schema::Flags::base, c),
    Qualifier_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void Identifier::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Qualifier" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< QualifierType > r (
          QualifierTraits::create (i, f, this));

        this->Qualifier_.set (r);
        continue;
      }
    }
  }

  Identifier* Identifier::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Identifier (*this, f, c);
  }

  Identifier::
  ~Identifier ()
  {
  }

  // Qualifier
  //

  Qualifier::
  Qualifier (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_Qualifier_convert ();
  }

  Qualifier::
  Qualifier (const ::xercesc::DOMAttr& a,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_Qualifier_convert ();
  }

  Qualifier::
  Qualifier (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_Qualifier_convert ();
  }

  Qualifier* Qualifier::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Qualifier (*this, f, c);
  }

  Qualifier::Value Qualifier::
  _xsd_Qualifier_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Qualifier_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_Qualifier_indexes_,
                      _xsd_Qualifier_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_Qualifier_indexes_ + 2 || _xsd_Qualifier_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const Qualifier::
  _xsd_Qualifier_literals_[2] =
  {
    "OIDAsURI",
    "OIDAsURN"
  };

  const Qualifier::Value Qualifier::
  _xsd_Qualifier_indexes_[2] =
  {
    ::xades::Qualifier::OIDAsURI,
    ::xades::Qualifier::OIDAsURN
  };

  // DocumentationReferences
  //

  DocumentationReferences::
  DocumentationReferences ()
  : ::xml_schema::Type (),
    DocumentationReference_ (::xml_schema::Flags (), this)
  {
  }

  DocumentationReferences::
  DocumentationReferences (const DocumentationReferences& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    DocumentationReference_ (x.DocumentationReference_, f, this)
  {
  }

  DocumentationReferences::
  DocumentationReferences (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    DocumentationReference_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void DocumentationReferences::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DocumentationReference
      //
      if (n.name () == "DocumentationReference" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< DocumentationReferenceType > r (
          DocumentationReferenceTraits::create (i, f, this));

        this->DocumentationReference_.push_back (r);
        continue;
      }

      break;
    }
  }

  DocumentationReferences* DocumentationReferences::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DocumentationReferences (*this, f, c);
  }

  DocumentationReferences::
  ~DocumentationReferences ()
  {
  }

  // EncapsulatedPKIData
  //

  EncapsulatedPKIData::
  EncapsulatedPKIData ()
  : ::xml_schema::Base64Binary (),
    Id_ (::xml_schema::Flags (), this),
    Encoding_ (::xml_schema::Flags (), this)
  {
  }

  EncapsulatedPKIData::
  EncapsulatedPKIData (const ::xml_schema::Base64Binary& _xsd_Base64Binary_base)
  : ::xml_schema::Base64Binary (_xsd_Base64Binary_base),
    Id_ (::xml_schema::Flags (), this),
    Encoding_ (::xml_schema::Flags (), this)
  {
  }

  EncapsulatedPKIData::
  EncapsulatedPKIData (const EncapsulatedPKIData& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Base64Binary (x, f, c),
    Id_ (x.Id_, f, this),
    Encoding_ (x.Encoding_, f, this)
  {
  }

  EncapsulatedPKIData::
  EncapsulatedPKIData (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Base64Binary (e, f | ::xml_schema::Flags::base, c),
    Id_ (f, this),
    Encoding_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void EncapsulatedPKIData::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }

      if (n.name () == "Encoding" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< EncodingType > r (
          EncodingTraits::create (i, f, this));

        this->Encoding_.set (r);
        continue;
      }
    }
  }

  EncapsulatedPKIData* EncapsulatedPKIData::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class EncapsulatedPKIData (*this, f, c);
  }

  EncapsulatedPKIData::
  ~EncapsulatedPKIData ()
  {
  }

  // Include
  //

  Include::
  Include (const URIType& URI)
  : ::xml_schema::Type (),
    URI_ (URI, ::xml_schema::Flags (), this),
    referencedData_ (::xml_schema::Flags (), this)
  {
  }

  Include::
  Include (const Include& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    URI_ (x.URI_, f, this),
    referencedData_ (x.referencedData_, f, this)
  {
  }

  Include::
  Include (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    URI_ (f, this),
    referencedData_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void Include::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "URI" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< URIType > r (
          URITraits::create (i, f, this));

        this->URI_.set (r);
        continue;
      }

      if (n.name () == "referencedData" && n.namespace_ ().empty ())
      {
        this->referencedData_.set (ReferencedDataTraits::create (i, f, this));
        continue;
      }
    }

    if (!URI_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "URI",
        "");
    }
  }

  Include* Include::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Include (*this, f, c);
  }

  Include::
  ~Include ()
  {
  }

  // ReferenceInfo
  //

  ReferenceInfo::
  ReferenceInfo (const DigestMethodType& DigestMethod,
                 const DigestValueType& DigestValue)
  : ::xml_schema::Type (),
    DigestMethod_ (DigestMethod, ::xml_schema::Flags (), this),
    DigestValue_ (DigestValue, ::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this),
    URI_ (::xml_schema::Flags (), this)
  {
  }

  ReferenceInfo::
  ReferenceInfo (::std::auto_ptr< DigestMethodType >& DigestMethod,
                 const DigestValueType& DigestValue)
  : ::xml_schema::Type (),
    DigestMethod_ (DigestMethod, ::xml_schema::Flags (), this),
    DigestValue_ (DigestValue, ::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this),
    URI_ (::xml_schema::Flags (), this)
  {
  }

  ReferenceInfo::
  ReferenceInfo (const ReferenceInfo& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    DigestMethod_ (x.DigestMethod_, f, this),
    DigestValue_ (x.DigestValue_, f, this),
    Id_ (x.Id_, f, this),
    URI_ (x.URI_, f, this)
  {
  }

  ReferenceInfo::
  ReferenceInfo (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    DigestMethod_ (f, this),
    DigestValue_ (f, this),
    Id_ (f, this),
    URI_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void ReferenceInfo::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DigestMethod
      //
      if (n.name () == "DigestMethod" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< DigestMethodType > r (
          DigestMethodTraits::create (i, f, this));

        if (!DigestMethod_.present ())
        {
          this->DigestMethod_.set (r);
          continue;
        }
      }

      // DigestValue
      //
      if (n.name () == "DigestValue" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< DigestValueType > r (
          DigestValueTraits::create (i, f, this));

        if (!DigestValue_.present ())
        {
          this->DigestValue_.set (r);
          continue;
        }
      }

      break;
    }

    if (!DigestMethod_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DigestMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    if (!DigestValue_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DigestValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }

      if (n.name () == "URI" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< URIType > r (
          URITraits::create (i, f, this));

        this->URI_.set (r);
        continue;
      }
    }
  }

  ReferenceInfo* ReferenceInfo::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ReferenceInfo (*this, f, c);
  }

  ReferenceInfo::
  ~ReferenceInfo ()
  {
  }

  // GenericTimeStamp
  //

  GenericTimeStamp::
  GenericTimeStamp ()
  : ::xml_schema::Type (),
    Include_ (::xml_schema::Flags (), this),
    ReferenceInfo_ (::xml_schema::Flags (), this),
    CanonicalizationMethod_ (::xml_schema::Flags (), this),
    EncapsulatedTimeStamp_ (::xml_schema::Flags (), this),
    XMLTimeStamp_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  GenericTimeStamp::
  GenericTimeStamp (const GenericTimeStamp& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Include_ (x.Include_, f, this),
    ReferenceInfo_ (x.ReferenceInfo_, f, this),
    CanonicalizationMethod_ (x.CanonicalizationMethod_, f, this),
    EncapsulatedTimeStamp_ (x.EncapsulatedTimeStamp_, f, this),
    XMLTimeStamp_ (x.XMLTimeStamp_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  GenericTimeStamp::
  GenericTimeStamp (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Include_ (f, this),
    ReferenceInfo_ (f, this),
    CanonicalizationMethod_ (f, this),
    EncapsulatedTimeStamp_ (f, this),
    XMLTimeStamp_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void GenericTimeStamp::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Include
      //
      if (n.name () == "Include" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< IncludeType > r (
          IncludeTraits::create (i, f, this));

        this->Include_.push_back (r);
        continue;
      }

      // ReferenceInfo
      //
      if (n.name () == "ReferenceInfo" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ReferenceInfoType > r (
          ReferenceInfoTraits::create (i, f, this));

        this->ReferenceInfo_.push_back (r);
        continue;
      }

      // CanonicalizationMethod
      //
      if (n.name () == "CanonicalizationMethod" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< CanonicalizationMethodType > r (
          CanonicalizationMethodTraits::create (i, f, this));

        if (!this->CanonicalizationMethod_)
        {
          this->CanonicalizationMethod_.set (r);
          continue;
        }
      }

      // EncapsulatedTimeStamp
      //
      if (n.name () == "EncapsulatedTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< EncapsulatedTimeStampType > r (
          EncapsulatedTimeStampTraits::create (i, f, this));

        this->EncapsulatedTimeStamp_.push_back (r);
        continue;
      }

      // XMLTimeStamp
      //
      if (n.name () == "XMLTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< XMLTimeStampType > r (
          XMLTimeStampTraits::create (i, f, this));

        this->XMLTimeStamp_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  GenericTimeStamp* GenericTimeStamp::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GenericTimeStamp (*this, f, c);
  }

  GenericTimeStamp::
  ~GenericTimeStamp ()
  {
  }

  // XAdESTimeStamp
  //

  XAdESTimeStamp::
  XAdESTimeStamp ()
  : ::xml_schema::Type (),
    Include_ (::xml_schema::Flags (), this),
    CanonicalizationMethod_ (::xml_schema::Flags (), this),
    EncapsulatedTimeStamp_ (::xml_schema::Flags (), this),
    XMLTimeStamp_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  XAdESTimeStamp::
  XAdESTimeStamp (const XAdESTimeStamp& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Include_ (x.Include_, f, this),
    CanonicalizationMethod_ (x.CanonicalizationMethod_, f, this),
    EncapsulatedTimeStamp_ (x.EncapsulatedTimeStamp_, f, this),
    XMLTimeStamp_ (x.XMLTimeStamp_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  XAdESTimeStamp::
  XAdESTimeStamp (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Include_ (f, this),
    CanonicalizationMethod_ (f, this),
    EncapsulatedTimeStamp_ (f, this),
    XMLTimeStamp_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void XAdESTimeStamp::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Include
      //
      if (n.name () == "Include" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< IncludeType > r (
          IncludeTraits::create (i, f, this));

        this->Include_.push_back (r);
        continue;
      }

      // CanonicalizationMethod
      //
      if (n.name () == "CanonicalizationMethod" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< CanonicalizationMethodType > r (
          CanonicalizationMethodTraits::create (i, f, this));

        if (!this->CanonicalizationMethod_)
        {
          this->CanonicalizationMethod_.set (r);
          continue;
        }
      }

      // EncapsulatedTimeStamp
      //
      if (n.name () == "EncapsulatedTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< EncapsulatedTimeStampType > r (
          EncapsulatedTimeStampTraits::create (i, f, this));

        this->EncapsulatedTimeStamp_.push_back (r);
        continue;
      }

      // XMLTimeStamp
      //
      if (n.name () == "XMLTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< XMLTimeStampType > r (
          XMLTimeStampTraits::create (i, f, this));

        this->XMLTimeStamp_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  XAdESTimeStamp* XAdESTimeStamp::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class XAdESTimeStamp (*this, f, c);
  }

  XAdESTimeStamp::
  ~XAdESTimeStamp ()
  {
  }

  // OtherTimeStamp
  //

  OtherTimeStamp::
  OtherTimeStamp ()
  : ::xades::GenericTimeStamp ()
  {
  }

  OtherTimeStamp::
  OtherTimeStamp (const OtherTimeStamp& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xades::GenericTimeStamp (x, f, c)
  {
  }

  OtherTimeStamp::
  OtherTimeStamp (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xades::GenericTimeStamp (e, f, c)
  {
  }

  OtherTimeStamp* OtherTimeStamp::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OtherTimeStamp (*this, f, c);
  }

  OtherTimeStamp::
  ~OtherTimeStamp ()
  {
  }

  // QualifyingProperties
  //

  QualifyingProperties::
  QualifyingProperties (const TargetType& Target)
  : ::xml_schema::Type (),
    SignedProperties_ (::xml_schema::Flags (), this),
    UnsignedProperties_ (::xml_schema::Flags (), this),
    Target_ (Target, ::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  QualifyingProperties::
  QualifyingProperties (const QualifyingProperties& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    SignedProperties_ (x.SignedProperties_, f, this),
    UnsignedProperties_ (x.UnsignedProperties_, f, this),
    Target_ (x.Target_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  QualifyingProperties::
  QualifyingProperties (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    SignedProperties_ (f, this),
    UnsignedProperties_ (f, this),
    Target_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void QualifyingProperties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SignedProperties
      //
      if (n.name () == "SignedProperties" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignedPropertiesType > r (
          SignedPropertiesTraits::create (i, f, this));

        if (!this->SignedProperties_)
        {
          this->SignedProperties_.set (r);
          continue;
        }
      }

      // UnsignedProperties
      //
      if (n.name () == "UnsignedProperties" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< UnsignedPropertiesType > r (
          UnsignedPropertiesTraits::create (i, f, this));

        if (!this->UnsignedProperties_)
        {
          this->UnsignedProperties_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Target" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< TargetType > r (
          TargetTraits::create (i, f, this));

        this->Target_.set (r);
        continue;
      }

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }

    if (!Target_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "Target",
        "");
    }
  }

  QualifyingProperties* QualifyingProperties::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class QualifyingProperties (*this, f, c);
  }

  QualifyingProperties::
  ~QualifyingProperties ()
  {
  }

  // SignedProperties
  //

  SignedProperties::
  SignedProperties (const SignedSignaturePropertiesType& SignedSignatureProperties)
  : ::xml_schema::Type (),
    SignedSignatureProperties_ (SignedSignatureProperties, ::xml_schema::Flags (), this),
    SignedDataObjectProperties_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  SignedProperties::
  SignedProperties (::std::auto_ptr< SignedSignaturePropertiesType >& SignedSignatureProperties)
  : ::xml_schema::Type (),
    SignedSignatureProperties_ (SignedSignatureProperties, ::xml_schema::Flags (), this),
    SignedDataObjectProperties_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  SignedProperties::
  SignedProperties (const SignedProperties& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    SignedSignatureProperties_ (x.SignedSignatureProperties_, f, this),
    SignedDataObjectProperties_ (x.SignedDataObjectProperties_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  SignedProperties::
  SignedProperties (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    SignedSignatureProperties_ (f, this),
    SignedDataObjectProperties_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void SignedProperties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SignedSignatureProperties
      //
      if (n.name () == "SignedSignatureProperties" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignedSignaturePropertiesType > r (
          SignedSignaturePropertiesTraits::create (i, f, this));

        if (!SignedSignatureProperties_.present ())
        {
          this->SignedSignatureProperties_.set (r);
          continue;
        }
      }

      // SignedDataObjectProperties
      //
      if (n.name () == "SignedDataObjectProperties" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignedDataObjectPropertiesType > r (
          SignedDataObjectPropertiesTraits::create (i, f, this));

        if (!this->SignedDataObjectProperties_)
        {
          this->SignedDataObjectProperties_.set (r);
          continue;
        }
      }

      break;
    }

    if (!SignedSignatureProperties_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SignedSignatureProperties",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  SignedProperties* SignedProperties::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SignedProperties (*this, f, c);
  }

  SignedProperties::
  ~SignedProperties ()
  {
  }

  // UnsignedProperties
  //

  UnsignedProperties::
  UnsignedProperties ()
  : ::xml_schema::Type (),
    UnsignedSignatureProperties_ (::xml_schema::Flags (), this),
    UnsignedDataObjectProperties_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  UnsignedProperties::
  UnsignedProperties (const UnsignedProperties& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    UnsignedSignatureProperties_ (x.UnsignedSignatureProperties_, f, this),
    UnsignedDataObjectProperties_ (x.UnsignedDataObjectProperties_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  UnsignedProperties::
  UnsignedProperties (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    UnsignedSignatureProperties_ (f, this),
    UnsignedDataObjectProperties_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void UnsignedProperties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // UnsignedSignatureProperties
      //
      if (n.name () == "UnsignedSignatureProperties" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< UnsignedSignaturePropertiesType > r (
          UnsignedSignaturePropertiesTraits::create (i, f, this));

        if (!this->UnsignedSignatureProperties_)
        {
          this->UnsignedSignatureProperties_.set (r);
          continue;
        }
      }

      // UnsignedDataObjectProperties
      //
      if (n.name () == "UnsignedDataObjectProperties" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< UnsignedDataObjectPropertiesType > r (
          UnsignedDataObjectPropertiesTraits::create (i, f, this));

        if (!this->UnsignedDataObjectProperties_)
        {
          this->UnsignedDataObjectProperties_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  UnsignedProperties* UnsignedProperties::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class UnsignedProperties (*this, f, c);
  }

  UnsignedProperties::
  ~UnsignedProperties ()
  {
  }

  // SignedSignatureProperties
  //

  SignedSignatureProperties::
  SignedSignatureProperties ()
  : ::xml_schema::Type (),
    SigningTime_ (::xml_schema::Flags (), this),
    SigningCertificate_ (::xml_schema::Flags (), this),
    SignaturePolicyIdentifier_ (::xml_schema::Flags (), this),
    SignatureProductionPlace_ (::xml_schema::Flags (), this),
    SignerRole_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  SignedSignatureProperties::
  SignedSignatureProperties (const SignedSignatureProperties& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    SigningTime_ (x.SigningTime_, f, this),
    SigningCertificate_ (x.SigningCertificate_, f, this),
    SignaturePolicyIdentifier_ (x.SignaturePolicyIdentifier_, f, this),
    SignatureProductionPlace_ (x.SignatureProductionPlace_, f, this),
    SignerRole_ (x.SignerRole_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  SignedSignatureProperties::
  SignedSignatureProperties (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    SigningTime_ (f, this),
    SigningCertificate_ (f, this),
    SignaturePolicyIdentifier_ (f, this),
    SignatureProductionPlace_ (f, this),
    SignerRole_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void SignedSignatureProperties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SigningTime
      //
      if (n.name () == "SigningTime" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SigningTimeType > r (
          SigningTimeTraits::create (i, f, this));

        if (!this->SigningTime_)
        {
          this->SigningTime_.set (r);
          continue;
        }
      }

      // SigningCertificate
      //
      if (n.name () == "SigningCertificate" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SigningCertificateType > r (
          SigningCertificateTraits::create (i, f, this));

        if (!this->SigningCertificate_)
        {
          this->SigningCertificate_.set (r);
          continue;
        }
      }

      // SignaturePolicyIdentifier
      //
      if (n.name () == "SignaturePolicyIdentifier" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignaturePolicyIdentifierType > r (
          SignaturePolicyIdentifierTraits::create (i, f, this));

        if (!this->SignaturePolicyIdentifier_)
        {
          this->SignaturePolicyIdentifier_.set (r);
          continue;
        }
      }

      // SignatureProductionPlace
      //
      if (n.name () == "SignatureProductionPlace" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignatureProductionPlaceType > r (
          SignatureProductionPlaceTraits::create (i, f, this));

        if (!this->SignatureProductionPlace_)
        {
          this->SignatureProductionPlace_.set (r);
          continue;
        }
      }

      // SignerRole
      //
      if (n.name () == "SignerRole" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignerRoleType > r (
          SignerRoleTraits::create (i, f, this));

        if (!this->SignerRole_)
        {
          this->SignerRole_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  SignedSignatureProperties* SignedSignatureProperties::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SignedSignatureProperties (*this, f, c);
  }

  SignedSignatureProperties::
  ~SignedSignatureProperties ()
  {
  }

  // SignedDataObjectProperties
  //

  SignedDataObjectProperties::
  SignedDataObjectProperties ()
  : ::xml_schema::Type (),
    DataObjectFormat_ (::xml_schema::Flags (), this),
    CommitmentTypeIndication_ (::xml_schema::Flags (), this),
    AllDataObjectsTimeStamp_ (::xml_schema::Flags (), this),
    IndividualDataObjectsTimeStamp_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  SignedDataObjectProperties::
  SignedDataObjectProperties (const SignedDataObjectProperties& x,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    DataObjectFormat_ (x.DataObjectFormat_, f, this),
    CommitmentTypeIndication_ (x.CommitmentTypeIndication_, f, this),
    AllDataObjectsTimeStamp_ (x.AllDataObjectsTimeStamp_, f, this),
    IndividualDataObjectsTimeStamp_ (x.IndividualDataObjectsTimeStamp_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  SignedDataObjectProperties::
  SignedDataObjectProperties (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    DataObjectFormat_ (f, this),
    CommitmentTypeIndication_ (f, this),
    AllDataObjectsTimeStamp_ (f, this),
    IndividualDataObjectsTimeStamp_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void SignedDataObjectProperties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DataObjectFormat
      //
      if (n.name () == "DataObjectFormat" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< DataObjectFormatType > r (
          DataObjectFormatTraits::create (i, f, this));

        this->DataObjectFormat_.push_back (r);
        continue;
      }

      // CommitmentTypeIndication
      //
      if (n.name () == "CommitmentTypeIndication" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CommitmentTypeIndicationType > r (
          CommitmentTypeIndicationTraits::create (i, f, this));

        this->CommitmentTypeIndication_.push_back (r);
        continue;
      }

      // AllDataObjectsTimeStamp
      //
      if (n.name () == "AllDataObjectsTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< AllDataObjectsTimeStampType > r (
          AllDataObjectsTimeStampTraits::create (i, f, this));

        this->AllDataObjectsTimeStamp_.push_back (r);
        continue;
      }

      // IndividualDataObjectsTimeStamp
      //
      if (n.name () == "IndividualDataObjectsTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< IndividualDataObjectsTimeStampType > r (
          IndividualDataObjectsTimeStampTraits::create (i, f, this));

        this->IndividualDataObjectsTimeStamp_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  SignedDataObjectProperties* SignedDataObjectProperties::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SignedDataObjectProperties (*this, f, c);
  }

  SignedDataObjectProperties::
  ~SignedDataObjectProperties ()
  {
  }

  // UnsignedSignatureProperties
  //

  UnsignedSignatureProperties::
  UnsignedSignatureProperties ()
  : ::xml_schema::Type (),
    CounterSignature_ (::xml_schema::Flags (), this),
    SignatureTimeStamp_ (::xml_schema::Flags (), this),
    CompleteCertificateRefs_ (::xml_schema::Flags (), this),
    CompleteRevocationRefs_ (::xml_schema::Flags (), this),
    AttributeCertificateRefs_ (::xml_schema::Flags (), this),
    AttributeRevocationRefs_ (::xml_schema::Flags (), this),
    SigAndRefsTimeStamp_ (::xml_schema::Flags (), this),
    RefsOnlyTimeStamp_ (::xml_schema::Flags (), this),
    CertificateValues_ (::xml_schema::Flags (), this),
    RevocationValues_ (::xml_schema::Flags (), this),
    AttrAuthoritiesCertValues_ (::xml_schema::Flags (), this),
    AttributeRevocationValues_ (::xml_schema::Flags (), this),
    ArchiveTimeStamp_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  UnsignedSignatureProperties::
  UnsignedSignatureProperties (const UnsignedSignatureProperties& x,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CounterSignature_ (x.CounterSignature_, f, this),
    SignatureTimeStamp_ (x.SignatureTimeStamp_, f, this),
    CompleteCertificateRefs_ (x.CompleteCertificateRefs_, f, this),
    CompleteRevocationRefs_ (x.CompleteRevocationRefs_, f, this),
    AttributeCertificateRefs_ (x.AttributeCertificateRefs_, f, this),
    AttributeRevocationRefs_ (x.AttributeRevocationRefs_, f, this),
    SigAndRefsTimeStamp_ (x.SigAndRefsTimeStamp_, f, this),
    RefsOnlyTimeStamp_ (x.RefsOnlyTimeStamp_, f, this),
    CertificateValues_ (x.CertificateValues_, f, this),
    RevocationValues_ (x.RevocationValues_, f, this),
    AttrAuthoritiesCertValues_ (x.AttrAuthoritiesCertValues_, f, this),
    AttributeRevocationValues_ (x.AttributeRevocationValues_, f, this),
    ArchiveTimeStamp_ (x.ArchiveTimeStamp_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  UnsignedSignatureProperties::
  UnsignedSignatureProperties (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CounterSignature_ (f, this),
    SignatureTimeStamp_ (f, this),
    CompleteCertificateRefs_ (f, this),
    CompleteRevocationRefs_ (f, this),
    AttributeCertificateRefs_ (f, this),
    AttributeRevocationRefs_ (f, this),
    SigAndRefsTimeStamp_ (f, this),
    RefsOnlyTimeStamp_ (f, this),
    CertificateValues_ (f, this),
    RevocationValues_ (f, this),
    AttrAuthoritiesCertValues_ (f, this),
    AttributeRevocationValues_ (f, this),
    ArchiveTimeStamp_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void UnsignedSignatureProperties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CounterSignature
      //
      if (n.name () == "CounterSignature" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CounterSignatureType > r (
          CounterSignatureTraits::create (i, f, this));

        this->CounterSignature_.push_back (r);
        continue;
      }

      // SignatureTimeStamp
      //
      if (n.name () == "SignatureTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignatureTimeStampType > r (
          SignatureTimeStampTraits::create (i, f, this));

        this->SignatureTimeStamp_.push_back (r);
        continue;
      }

      // CompleteCertificateRefs
      //
      if (n.name () == "CompleteCertificateRefs" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CompleteCertificateRefsType > r (
          CompleteCertificateRefsTraits::create (i, f, this));

        this->CompleteCertificateRefs_.push_back (r);
        continue;
      }

      // CompleteRevocationRefs
      //
      if (n.name () == "CompleteRevocationRefs" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CompleteRevocationRefsType > r (
          CompleteRevocationRefsTraits::create (i, f, this));

        this->CompleteRevocationRefs_.push_back (r);
        continue;
      }

      // AttributeCertificateRefs
      //
      if (n.name () == "AttributeCertificateRefs" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< AttributeCertificateRefsType > r (
          AttributeCertificateRefsTraits::create (i, f, this));

        this->AttributeCertificateRefs_.push_back (r);
        continue;
      }

      // AttributeRevocationRefs
      //
      if (n.name () == "AttributeRevocationRefs" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< AttributeRevocationRefsType > r (
          AttributeRevocationRefsTraits::create (i, f, this));

        this->AttributeRevocationRefs_.push_back (r);
        continue;
      }

      // SigAndRefsTimeStamp
      //
      if (n.name () == "SigAndRefsTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SigAndRefsTimeStampType > r (
          SigAndRefsTimeStampTraits::create (i, f, this));

        this->SigAndRefsTimeStamp_.push_back (r);
        continue;
      }

      // RefsOnlyTimeStamp
      //
      if (n.name () == "RefsOnlyTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< RefsOnlyTimeStampType > r (
          RefsOnlyTimeStampTraits::create (i, f, this));

        this->RefsOnlyTimeStamp_.push_back (r);
        continue;
      }

      // CertificateValues
      //
      if (n.name () == "CertificateValues" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CertificateValuesType > r (
          CertificateValuesTraits::create (i, f, this));

        this->CertificateValues_.push_back (r);
        continue;
      }

      // RevocationValues
      //
      if (n.name () == "RevocationValues" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< RevocationValuesType > r (
          RevocationValuesTraits::create (i, f, this));

        this->RevocationValues_.push_back (r);
        continue;
      }

      // AttrAuthoritiesCertValues
      //
      if (n.name () == "AttrAuthoritiesCertValues" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< AttrAuthoritiesCertValuesType > r (
          AttrAuthoritiesCertValuesTraits::create (i, f, this));

        this->AttrAuthoritiesCertValues_.push_back (r);
        continue;
      }

      // AttributeRevocationValues
      //
      if (n.name () == "AttributeRevocationValues" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< AttributeRevocationValuesType > r (
          AttributeRevocationValuesTraits::create (i, f, this));

        this->AttributeRevocationValues_.push_back (r);
        continue;
      }

      // ArchiveTimeStamp
      //
      if (n.name () == "ArchiveTimeStamp" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ArchiveTimeStampType > r (
          ArchiveTimeStampTraits::create (i, f, this));

        this->ArchiveTimeStamp_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  UnsignedSignatureProperties* UnsignedSignatureProperties::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class UnsignedSignatureProperties (*this, f, c);
  }

  UnsignedSignatureProperties::
  ~UnsignedSignatureProperties ()
  {
  }

  // UnsignedDataObjectProperties
  //

  UnsignedDataObjectProperties::
  UnsignedDataObjectProperties ()
  : ::xml_schema::Type (),
    UnsignedDataObjectProperty_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  UnsignedDataObjectProperties::
  UnsignedDataObjectProperties (const UnsignedDataObjectProperties& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    UnsignedDataObjectProperty_ (x.UnsignedDataObjectProperty_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  UnsignedDataObjectProperties::
  UnsignedDataObjectProperties (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    UnsignedDataObjectProperty_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void UnsignedDataObjectProperties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // UnsignedDataObjectProperty
      //
      if (n.name () == "UnsignedDataObjectProperty" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< UnsignedDataObjectPropertyType > r (
          UnsignedDataObjectPropertyTraits::create (i, f, this));

        this->UnsignedDataObjectProperty_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  UnsignedDataObjectProperties* UnsignedDataObjectProperties::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class UnsignedDataObjectProperties (*this, f, c);
  }

  UnsignedDataObjectProperties::
  ~UnsignedDataObjectProperties ()
  {
  }

  // QualifyingPropertiesReference
  //

  QualifyingPropertiesReference::
  QualifyingPropertiesReference (const URIType& URI)
  : ::xml_schema::Type (),
    URI_ (URI, ::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  QualifyingPropertiesReference::
  QualifyingPropertiesReference (const QualifyingPropertiesReference& x,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    URI_ (x.URI_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  QualifyingPropertiesReference::
  QualifyingPropertiesReference (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    URI_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void QualifyingPropertiesReference::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "URI" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< URIType > r (
          URITraits::create (i, f, this));

        this->URI_.set (r);
        continue;
      }

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }

    if (!URI_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "URI",
        "");
    }
  }

  QualifyingPropertiesReference* QualifyingPropertiesReference::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class QualifyingPropertiesReference (*this, f, c);
  }

  QualifyingPropertiesReference::
  ~QualifyingPropertiesReference ()
  {
  }

  // CertIDList
  //

  CertIDList::
  CertIDList ()
  : ::xml_schema::Type (),
    Cert_ (::xml_schema::Flags (), this)
  {
  }

  CertIDList::
  CertIDList (const CertIDList& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Cert_ (x.Cert_, f, this)
  {
  }

  CertIDList::
  CertIDList (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Cert_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CertIDList::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Cert
      //
      if (n.name () == "Cert" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CertType > r (
          CertTraits::create (i, f, this));

        this->Cert_.push_back (r);
        continue;
      }

      break;
    }
  }

  CertIDList* CertIDList::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CertIDList (*this, f, c);
  }

  CertIDList::
  ~CertIDList ()
  {
  }

  // CertID
  //

  CertID::
  CertID (const CertDigestType& CertDigest,
          const IssuerSerialType& IssuerSerial)
  : ::xml_schema::Type (),
    CertDigest_ (CertDigest, ::xml_schema::Flags (), this),
    IssuerSerial_ (IssuerSerial, ::xml_schema::Flags (), this),
    URI_ (::xml_schema::Flags (), this)
  {
  }

  CertID::
  CertID (::std::auto_ptr< CertDigestType >& CertDigest,
          ::std::auto_ptr< IssuerSerialType >& IssuerSerial)
  : ::xml_schema::Type (),
    CertDigest_ (CertDigest, ::xml_schema::Flags (), this),
    IssuerSerial_ (IssuerSerial, ::xml_schema::Flags (), this),
    URI_ (::xml_schema::Flags (), this)
  {
  }

  CertID::
  CertID (const CertID& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CertDigest_ (x.CertDigest_, f, this),
    IssuerSerial_ (x.IssuerSerial_, f, this),
    URI_ (x.URI_, f, this)
  {
  }

  CertID::
  CertID (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CertDigest_ (f, this),
    IssuerSerial_ (f, this),
    URI_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void CertID::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CertDigest
      //
      if (n.name () == "CertDigest" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CertDigestType > r (
          CertDigestTraits::create (i, f, this));

        if (!CertDigest_.present ())
        {
          this->CertDigest_.set (r);
          continue;
        }
      }

      // IssuerSerial
      //
      if (n.name () == "IssuerSerial" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< IssuerSerialType > r (
          IssuerSerialTraits::create (i, f, this));

        if (!IssuerSerial_.present ())
        {
          this->IssuerSerial_.set (r);
          continue;
        }
      }

      break;
    }

    if (!CertDigest_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "CertDigest",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    if (!IssuerSerial_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IssuerSerial",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "URI" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< URIType > r (
          URITraits::create (i, f, this));

        this->URI_.set (r);
        continue;
      }
    }
  }

  CertID* CertID::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CertID (*this, f, c);
  }

  CertID::
  ~CertID ()
  {
  }

  // DigestAlgAndValue
  //

  DigestAlgAndValue::
  DigestAlgAndValue (const DigestMethodType& DigestMethod,
                     const DigestValueType& DigestValue)
  : ::xml_schema::Type (),
    DigestMethod_ (DigestMethod, ::xml_schema::Flags (), this),
    DigestValue_ (DigestValue, ::xml_schema::Flags (), this)
  {
  }

  DigestAlgAndValue::
  DigestAlgAndValue (::std::auto_ptr< DigestMethodType >& DigestMethod,
                     const DigestValueType& DigestValue)
  : ::xml_schema::Type (),
    DigestMethod_ (DigestMethod, ::xml_schema::Flags (), this),
    DigestValue_ (DigestValue, ::xml_schema::Flags (), this)
  {
  }

  DigestAlgAndValue::
  DigestAlgAndValue (const DigestAlgAndValue& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    DigestMethod_ (x.DigestMethod_, f, this),
    DigestValue_ (x.DigestValue_, f, this)
  {
  }

  DigestAlgAndValue::
  DigestAlgAndValue (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    DigestMethod_ (f, this),
    DigestValue_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void DigestAlgAndValue::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DigestMethod
      //
      if (n.name () == "DigestMethod" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< DigestMethodType > r (
          DigestMethodTraits::create (i, f, this));

        if (!DigestMethod_.present ())
        {
          this->DigestMethod_.set (r);
          continue;
        }
      }

      // DigestValue
      //
      if (n.name () == "DigestValue" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< DigestValueType > r (
          DigestValueTraits::create (i, f, this));

        if (!DigestValue_.present ())
        {
          this->DigestValue_.set (r);
          continue;
        }
      }

      break;
    }

    if (!DigestMethod_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DigestMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    if (!DigestValue_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DigestValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  DigestAlgAndValue* DigestAlgAndValue::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DigestAlgAndValue (*this, f, c);
  }

  DigestAlgAndValue::
  ~DigestAlgAndValue ()
  {
  }

  // SignaturePolicyIdentifier
  //

  SignaturePolicyIdentifier::
  SignaturePolicyIdentifier ()
  : ::xml_schema::Type (),
    SignaturePolicyId_ (::xml_schema::Flags (), this),
    SignaturePolicyImplied_ (::xml_schema::Flags (), this)
  {
  }

  SignaturePolicyIdentifier::
  SignaturePolicyIdentifier (const SignaturePolicyIdentifier& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    SignaturePolicyId_ (x.SignaturePolicyId_, f, this),
    SignaturePolicyImplied_ (x.SignaturePolicyImplied_, f, this)
  {
  }

  SignaturePolicyIdentifier::
  SignaturePolicyIdentifier (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    SignaturePolicyId_ (f, this),
    SignaturePolicyImplied_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void SignaturePolicyIdentifier::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SignaturePolicyId
      //
      if (n.name () == "SignaturePolicyId" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignaturePolicyIdType > r (
          SignaturePolicyIdTraits::create (i, f, this));

        if (!this->SignaturePolicyId_)
        {
          this->SignaturePolicyId_.set (r);
          continue;
        }
      }

      // SignaturePolicyImplied
      //
      if (n.name () == "SignaturePolicyImplied" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SignaturePolicyImpliedType > r (
          SignaturePolicyImpliedTraits::create (i, f, this));

        if (!this->SignaturePolicyImplied_)
        {
          this->SignaturePolicyImplied_.set (r);
          continue;
        }
      }

      break;
    }
  }

  SignaturePolicyIdentifier* SignaturePolicyIdentifier::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SignaturePolicyIdentifier (*this, f, c);
  }

  SignaturePolicyIdentifier::
  ~SignaturePolicyIdentifier ()
  {
  }

  // SignaturePolicyId
  //

  SignaturePolicyId::
  SignaturePolicyId (const SigPolicyIdType& SigPolicyId,
                     const SigPolicyHashType& SigPolicyHash)
  : ::xml_schema::Type (),
    SigPolicyId_ (SigPolicyId, ::xml_schema::Flags (), this),
    Transforms_ (::xml_schema::Flags (), this),
    SigPolicyHash_ (SigPolicyHash, ::xml_schema::Flags (), this),
    SigPolicyQualifiers_ (::xml_schema::Flags (), this)
  {
  }

  SignaturePolicyId::
  SignaturePolicyId (::std::auto_ptr< SigPolicyIdType >& SigPolicyId,
                     ::std::auto_ptr< SigPolicyHashType >& SigPolicyHash)
  : ::xml_schema::Type (),
    SigPolicyId_ (SigPolicyId, ::xml_schema::Flags (), this),
    Transforms_ (::xml_schema::Flags (), this),
    SigPolicyHash_ (SigPolicyHash, ::xml_schema::Flags (), this),
    SigPolicyQualifiers_ (::xml_schema::Flags (), this)
  {
  }

  SignaturePolicyId::
  SignaturePolicyId (const SignaturePolicyId& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    SigPolicyId_ (x.SigPolicyId_, f, this),
    Transforms_ (x.Transforms_, f, this),
    SigPolicyHash_ (x.SigPolicyHash_, f, this),
    SigPolicyQualifiers_ (x.SigPolicyQualifiers_, f, this)
  {
  }

  SignaturePolicyId::
  SignaturePolicyId (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    SigPolicyId_ (f, this),
    Transforms_ (f, this),
    SigPolicyHash_ (f, this),
    SigPolicyQualifiers_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void SignaturePolicyId::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SigPolicyId
      //
      if (n.name () == "SigPolicyId" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SigPolicyIdType > r (
          SigPolicyIdTraits::create (i, f, this));

        if (!SigPolicyId_.present ())
        {
          this->SigPolicyId_.set (r);
          continue;
        }
      }

      // Transforms
      //
      if (n.name () == "Transforms" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< TransformsType > r (
          TransformsTraits::create (i, f, this));

        if (!this->Transforms_)
        {
          this->Transforms_.set (r);
          continue;
        }
      }

      // SigPolicyHash
      //
      if (n.name () == "SigPolicyHash" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SigPolicyHashType > r (
          SigPolicyHashTraits::create (i, f, this));

        if (!SigPolicyHash_.present ())
        {
          this->SigPolicyHash_.set (r);
          continue;
        }
      }

      // SigPolicyQualifiers
      //
      if (n.name () == "SigPolicyQualifiers" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SigPolicyQualifiersType > r (
          SigPolicyQualifiersTraits::create (i, f, this));

        if (!this->SigPolicyQualifiers_)
        {
          this->SigPolicyQualifiers_.set (r);
          continue;
        }
      }

      break;
    }

    if (!SigPolicyId_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SigPolicyId",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    if (!SigPolicyHash_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SigPolicyHash",
        "http://uri.etsi.org/01903/v1.3.2#");
    }
  }

  SignaturePolicyId* SignaturePolicyId::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SignaturePolicyId (*this, f, c);
  }

  SignaturePolicyId::
  ~SignaturePolicyId ()
  {
  }

  // SigPolicyQualifiersList
  //

  SigPolicyQualifiersList::
  SigPolicyQualifiersList ()
  : ::xml_schema::Type (),
    SigPolicyQualifier_ (::xml_schema::Flags (), this)
  {
  }

  SigPolicyQualifiersList::
  SigPolicyQualifiersList (const SigPolicyQualifiersList& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    SigPolicyQualifier_ (x.SigPolicyQualifier_, f, this)
  {
  }

  SigPolicyQualifiersList::
  SigPolicyQualifiersList (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    SigPolicyQualifier_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void SigPolicyQualifiersList::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SigPolicyQualifier
      //
      if (n.name () == "SigPolicyQualifier" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< SigPolicyQualifierType > r (
          SigPolicyQualifierTraits::create (i, f, this));

        this->SigPolicyQualifier_.push_back (r);
        continue;
      }

      break;
    }
  }

  SigPolicyQualifiersList* SigPolicyQualifiersList::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SigPolicyQualifiersList (*this, f, c);
  }

  SigPolicyQualifiersList::
  ~SigPolicyQualifiersList ()
  {
  }

  // SPUserNotice
  //

  SPUserNotice::
  SPUserNotice ()
  : ::xml_schema::Type (),
    NoticeRef_ (::xml_schema::Flags (), this),
    ExplicitText_ (::xml_schema::Flags (), this)
  {
  }

  SPUserNotice::
  SPUserNotice (const SPUserNotice& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    NoticeRef_ (x.NoticeRef_, f, this),
    ExplicitText_ (x.ExplicitText_, f, this)
  {
  }

  SPUserNotice::
  SPUserNotice (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    NoticeRef_ (f, this),
    ExplicitText_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void SPUserNotice::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // NoticeRef
      //
      if (n.name () == "NoticeRef" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< NoticeRefType > r (
          NoticeRefTraits::create (i, f, this));

        if (!this->NoticeRef_)
        {
          this->NoticeRef_.set (r);
          continue;
        }
      }

      // ExplicitText
      //
      if (n.name () == "ExplicitText" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ExplicitTextType > r (
          ExplicitTextTraits::create (i, f, this));

        if (!this->ExplicitText_)
        {
          this->ExplicitText_.set (r);
          continue;
        }
      }

      break;
    }
  }

  SPUserNotice* SPUserNotice::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SPUserNotice (*this, f, c);
  }

  SPUserNotice::
  ~SPUserNotice ()
  {
  }

  // NoticeReference
  //

  NoticeReference::
  NoticeReference (const OrganizationType& Organization,
                   const NoticeNumbersType& NoticeNumbers)
  : ::xml_schema::Type (),
    Organization_ (Organization, ::xml_schema::Flags (), this),
    NoticeNumbers_ (NoticeNumbers, ::xml_schema::Flags (), this)
  {
  }

  NoticeReference::
  NoticeReference (const OrganizationType& Organization,
                   ::std::auto_ptr< NoticeNumbersType >& NoticeNumbers)
  : ::xml_schema::Type (),
    Organization_ (Organization, ::xml_schema::Flags (), this),
    NoticeNumbers_ (NoticeNumbers, ::xml_schema::Flags (), this)
  {
  }

  NoticeReference::
  NoticeReference (const NoticeReference& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Organization_ (x.Organization_, f, this),
    NoticeNumbers_ (x.NoticeNumbers_, f, this)
  {
  }

  NoticeReference::
  NoticeReference (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Organization_ (f, this),
    NoticeNumbers_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void NoticeReference::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Organization
      //
      if (n.name () == "Organization" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OrganizationType > r (
          OrganizationTraits::create (i, f, this));

        if (!Organization_.present ())
        {
          this->Organization_.set (r);
          continue;
        }
      }

      // NoticeNumbers
      //
      if (n.name () == "NoticeNumbers" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< NoticeNumbersType > r (
          NoticeNumbersTraits::create (i, f, this));

        if (!NoticeNumbers_.present ())
        {
          this->NoticeNumbers_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Organization_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Organization",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    if (!NoticeNumbers_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "NoticeNumbers",
        "http://uri.etsi.org/01903/v1.3.2#");
    }
  }

  NoticeReference* NoticeReference::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class NoticeReference (*this, f, c);
  }

  NoticeReference::
  ~NoticeReference ()
  {
  }

  // IntegerList
  //

  IntegerList::
  IntegerList ()
  : ::xml_schema::Type (),
    int__ (::xml_schema::Flags (), this)
  {
  }

  IntegerList::
  IntegerList (const IntegerList& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    int__ (x.int__, f, this)
  {
  }

  IntegerList::
  IntegerList (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    int__ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void IntegerList::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // int
      //
      if (n.name () == "int" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        this->int__.push_back (IntTraits::create (i, f, this));
        continue;
      }

      break;
    }
  }

  IntegerList* IntegerList::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class IntegerList (*this, f, c);
  }

  IntegerList::
  ~IntegerList ()
  {
  }

  // CounterSignature
  //

  CounterSignature::
  CounterSignature (const SignatureType& Signature)
  : ::xml_schema::Type (),
    Signature_ (Signature, ::xml_schema::Flags (), this)
  {
  }

  CounterSignature::
  CounterSignature (::std::auto_ptr< SignatureType >& Signature)
  : ::xml_schema::Type (),
    Signature_ (Signature, ::xml_schema::Flags (), this)
  {
  }

  CounterSignature::
  CounterSignature (const CounterSignature& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Signature_ (x.Signature_, f, this)
  {
  }

  CounterSignature::
  CounterSignature (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Signature_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CounterSignature::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Signature
      //
      if (n.name () == "Signature" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< SignatureType > r (
          SignatureTraits::create (i, f, this));

        if (!Signature_.present ())
        {
          this->Signature_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Signature_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Signature",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  CounterSignature* CounterSignature::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CounterSignature (*this, f, c);
  }

  CounterSignature::
  ~CounterSignature ()
  {
  }

  // DataObjectFormat
  //

  DataObjectFormat::
  DataObjectFormat (const ObjectReferenceType& ObjectReference)
  : ::xml_schema::Type (),
    Description_ (::xml_schema::Flags (), this),
    ObjectIdentifier_ (::xml_schema::Flags (), this),
    MimeType_ (::xml_schema::Flags (), this),
    Encoding_ (::xml_schema::Flags (), this),
    ObjectReference_ (ObjectReference, ::xml_schema::Flags (), this)
  {
  }

  DataObjectFormat::
  DataObjectFormat (const DataObjectFormat& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Description_ (x.Description_, f, this),
    ObjectIdentifier_ (x.ObjectIdentifier_, f, this),
    MimeType_ (x.MimeType_, f, this),
    Encoding_ (x.Encoding_, f, this),
    ObjectReference_ (x.ObjectReference_, f, this)
  {
  }

  DataObjectFormat::
  DataObjectFormat (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Description_ (f, this),
    ObjectIdentifier_ (f, this),
    MimeType_ (f, this),
    Encoding_ (f, this),
    ObjectReference_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void DataObjectFormat::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Description
      //
      if (n.name () == "Description" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< DescriptionType > r (
          DescriptionTraits::create (i, f, this));

        if (!this->Description_)
        {
          this->Description_.set (r);
          continue;
        }
      }

      // ObjectIdentifier
      //
      if (n.name () == "ObjectIdentifier" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ObjectIdentifierType > r (
          ObjectIdentifierTraits::create (i, f, this));

        if (!this->ObjectIdentifier_)
        {
          this->ObjectIdentifier_.set (r);
          continue;
        }
      }

      // MimeType
      //
      if (n.name () == "MimeType" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< MimeTypeType > r (
          MimeTypeTraits::create (i, f, this));

        if (!this->MimeType_)
        {
          this->MimeType_.set (r);
          continue;
        }
      }

      // Encoding
      //
      if (n.name () == "Encoding" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< EncodingType > r (
          EncodingTraits::create (i, f, this));

        if (!this->Encoding_)
        {
          this->Encoding_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "ObjectReference" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ObjectReferenceType > r (
          ObjectReferenceTraits::create (i, f, this));

        this->ObjectReference_.set (r);
        continue;
      }
    }

    if (!ObjectReference_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "ObjectReference",
        "");
    }
  }

  DataObjectFormat* DataObjectFormat::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DataObjectFormat (*this, f, c);
  }

  DataObjectFormat::
  ~DataObjectFormat ()
  {
  }

  // CommitmentTypeIndication
  //

  CommitmentTypeIndication::
  CommitmentTypeIndication (const CommitmentTypeIdType& CommitmentTypeId)
  : ::xml_schema::Type (),
    CommitmentTypeId_ (CommitmentTypeId, ::xml_schema::Flags (), this),
    ObjectReference_ (::xml_schema::Flags (), this),
    AllSignedDataObjects_ (::xml_schema::Flags (), this),
    CommitmentTypeQualifiers_ (::xml_schema::Flags (), this)
  {
  }

  CommitmentTypeIndication::
  CommitmentTypeIndication (::std::auto_ptr< CommitmentTypeIdType >& CommitmentTypeId)
  : ::xml_schema::Type (),
    CommitmentTypeId_ (CommitmentTypeId, ::xml_schema::Flags (), this),
    ObjectReference_ (::xml_schema::Flags (), this),
    AllSignedDataObjects_ (::xml_schema::Flags (), this),
    CommitmentTypeQualifiers_ (::xml_schema::Flags (), this)
  {
  }

  CommitmentTypeIndication::
  CommitmentTypeIndication (const CommitmentTypeIndication& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CommitmentTypeId_ (x.CommitmentTypeId_, f, this),
    ObjectReference_ (x.ObjectReference_, f, this),
    AllSignedDataObjects_ (x.AllSignedDataObjects_, f, this),
    CommitmentTypeQualifiers_ (x.CommitmentTypeQualifiers_, f, this)
  {
  }

  CommitmentTypeIndication::
  CommitmentTypeIndication (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CommitmentTypeId_ (f, this),
    ObjectReference_ (f, this),
    AllSignedDataObjects_ (f, this),
    CommitmentTypeQualifiers_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CommitmentTypeIndication::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CommitmentTypeId
      //
      if (n.name () == "CommitmentTypeId" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CommitmentTypeIdType > r (
          CommitmentTypeIdTraits::create (i, f, this));

        if (!CommitmentTypeId_.present ())
        {
          this->CommitmentTypeId_.set (r);
          continue;
        }
      }

      // ObjectReference
      //
      if (n.name () == "ObjectReference" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ObjectReferenceType > r (
          ObjectReferenceTraits::create (i, f, this));

        this->ObjectReference_.push_back (r);
        continue;
      }

      // AllSignedDataObjects
      //
      if (n.name () == "AllSignedDataObjects" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< AllSignedDataObjectsType > r (
          AllSignedDataObjectsTraits::create (i, f, this));

        if (!this->AllSignedDataObjects_)
        {
          this->AllSignedDataObjects_.set (r);
          continue;
        }
      }

      // CommitmentTypeQualifiers
      //
      if (n.name () == "CommitmentTypeQualifiers" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CommitmentTypeQualifiersType > r (
          CommitmentTypeQualifiersTraits::create (i, f, this));

        if (!this->CommitmentTypeQualifiers_)
        {
          this->CommitmentTypeQualifiers_.set (r);
          continue;
        }
      }

      break;
    }

    if (!CommitmentTypeId_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "CommitmentTypeId",
        "http://uri.etsi.org/01903/v1.3.2#");
    }
  }

  CommitmentTypeIndication* CommitmentTypeIndication::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CommitmentTypeIndication (*this, f, c);
  }

  CommitmentTypeIndication::
  ~CommitmentTypeIndication ()
  {
  }

  // CommitmentTypeQualifiersList
  //

  CommitmentTypeQualifiersList::
  CommitmentTypeQualifiersList ()
  : ::xml_schema::Type (),
    CommitmentTypeQualifier_ (::xml_schema::Flags (), this)
  {
  }

  CommitmentTypeQualifiersList::
  CommitmentTypeQualifiersList (const CommitmentTypeQualifiersList& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CommitmentTypeQualifier_ (x.CommitmentTypeQualifier_, f, this)
  {
  }

  CommitmentTypeQualifiersList::
  CommitmentTypeQualifiersList (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CommitmentTypeQualifier_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CommitmentTypeQualifiersList::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CommitmentTypeQualifier
      //
      if (n.name () == "CommitmentTypeQualifier" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CommitmentTypeQualifierType > r (
          CommitmentTypeQualifierTraits::create (i, f, this));

        this->CommitmentTypeQualifier_.push_back (r);
        continue;
      }

      break;
    }
  }

  CommitmentTypeQualifiersList* CommitmentTypeQualifiersList::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CommitmentTypeQualifiersList (*this, f, c);
  }

  CommitmentTypeQualifiersList::
  ~CommitmentTypeQualifiersList ()
  {
  }

  // SignatureProductionPlace
  //

  SignatureProductionPlace::
  SignatureProductionPlace ()
  : ::xml_schema::Type (),
    City_ (::xml_schema::Flags (), this),
    StateOrProvince_ (::xml_schema::Flags (), this),
    PostalCode_ (::xml_schema::Flags (), this),
    CountryName_ (::xml_schema::Flags (), this)
  {
  }

  SignatureProductionPlace::
  SignatureProductionPlace (const SignatureProductionPlace& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    City_ (x.City_, f, this),
    StateOrProvince_ (x.StateOrProvince_, f, this),
    PostalCode_ (x.PostalCode_, f, this),
    CountryName_ (x.CountryName_, f, this)
  {
  }

  SignatureProductionPlace::
  SignatureProductionPlace (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    City_ (f, this),
    StateOrProvince_ (f, this),
    PostalCode_ (f, this),
    CountryName_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void SignatureProductionPlace::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // City
      //
      if (n.name () == "City" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CityType > r (
          CityTraits::create (i, f, this));

        if (!this->City_)
        {
          this->City_.set (r);
          continue;
        }
      }

      // StateOrProvince
      //
      if (n.name () == "StateOrProvince" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< StateOrProvinceType > r (
          StateOrProvinceTraits::create (i, f, this));

        if (!this->StateOrProvince_)
        {
          this->StateOrProvince_.set (r);
          continue;
        }
      }

      // PostalCode
      //
      if (n.name () == "PostalCode" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< PostalCodeType > r (
          PostalCodeTraits::create (i, f, this));

        if (!this->PostalCode_)
        {
          this->PostalCode_.set (r);
          continue;
        }
      }

      // CountryName
      //
      if (n.name () == "CountryName" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CountryNameType > r (
          CountryNameTraits::create (i, f, this));

        if (!this->CountryName_)
        {
          this->CountryName_.set (r);
          continue;
        }
      }

      break;
    }
  }

  SignatureProductionPlace* SignatureProductionPlace::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SignatureProductionPlace (*this, f, c);
  }

  SignatureProductionPlace::
  ~SignatureProductionPlace ()
  {
  }

  // SignerRole
  //

  SignerRole::
  SignerRole ()
  : ::xml_schema::Type (),
    ClaimedRoles_ (::xml_schema::Flags (), this),
    CertifiedRoles_ (::xml_schema::Flags (), this)
  {
  }

  SignerRole::
  SignerRole (const SignerRole& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    ClaimedRoles_ (x.ClaimedRoles_, f, this),
    CertifiedRoles_ (x.CertifiedRoles_, f, this)
  {
  }

  SignerRole::
  SignerRole (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    ClaimedRoles_ (f, this),
    CertifiedRoles_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void SignerRole::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ClaimedRoles
      //
      if (n.name () == "ClaimedRoles" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ClaimedRolesType > r (
          ClaimedRolesTraits::create (i, f, this));

        if (!this->ClaimedRoles_)
        {
          this->ClaimedRoles_.set (r);
          continue;
        }
      }

      // CertifiedRoles
      //
      if (n.name () == "CertifiedRoles" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CertifiedRolesType > r (
          CertifiedRolesTraits::create (i, f, this));

        if (!this->CertifiedRoles_)
        {
          this->CertifiedRoles_.set (r);
          continue;
        }
      }

      break;
    }
  }

  SignerRole* SignerRole::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SignerRole (*this, f, c);
  }

  SignerRole::
  ~SignerRole ()
  {
  }

  // ClaimedRolesList
  //

  ClaimedRolesList::
  ClaimedRolesList ()
  : ::xml_schema::Type (),
    ClaimedRole_ (::xml_schema::Flags (), this)
  {
  }

  ClaimedRolesList::
  ClaimedRolesList (const ClaimedRolesList& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    ClaimedRole_ (x.ClaimedRole_, f, this)
  {
  }

  ClaimedRolesList::
  ClaimedRolesList (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    ClaimedRole_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ClaimedRolesList::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ClaimedRole
      //
      if (n.name () == "ClaimedRole" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ClaimedRoleType > r (
          ClaimedRoleTraits::create (i, f, this));

        this->ClaimedRole_.push_back (r);
        continue;
      }

      break;
    }
  }

  ClaimedRolesList* ClaimedRolesList::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ClaimedRolesList (*this, f, c);
  }

  ClaimedRolesList::
  ~ClaimedRolesList ()
  {
  }

  // CertifiedRolesList
  //

  CertifiedRolesList::
  CertifiedRolesList ()
  : ::xml_schema::Type (),
    CertifiedRole_ (::xml_schema::Flags (), this)
  {
  }

  CertifiedRolesList::
  CertifiedRolesList (const CertifiedRolesList& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CertifiedRole_ (x.CertifiedRole_, f, this)
  {
  }

  CertifiedRolesList::
  CertifiedRolesList (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CertifiedRole_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CertifiedRolesList::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CertifiedRole
      //
      if (n.name () == "CertifiedRole" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CertifiedRoleType > r (
          CertifiedRoleTraits::create (i, f, this));

        this->CertifiedRole_.push_back (r);
        continue;
      }

      break;
    }
  }

  CertifiedRolesList* CertifiedRolesList::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CertifiedRolesList (*this, f, c);
  }

  CertifiedRolesList::
  ~CertifiedRolesList ()
  {
  }

  // CompleteCertificateRefs
  //

  CompleteCertificateRefs::
  CompleteCertificateRefs (const CertRefsType& CertRefs)
  : ::xml_schema::Type (),
    CertRefs_ (CertRefs, ::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  CompleteCertificateRefs::
  CompleteCertificateRefs (::std::auto_ptr< CertRefsType >& CertRefs)
  : ::xml_schema::Type (),
    CertRefs_ (CertRefs, ::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  CompleteCertificateRefs::
  CompleteCertificateRefs (const CompleteCertificateRefs& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CertRefs_ (x.CertRefs_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  CompleteCertificateRefs::
  CompleteCertificateRefs (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CertRefs_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void CompleteCertificateRefs::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CertRefs
      //
      if (n.name () == "CertRefs" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CertRefsType > r (
          CertRefsTraits::create (i, f, this));

        if (!CertRefs_.present ())
        {
          this->CertRefs_.set (r);
          continue;
        }
      }

      break;
    }

    if (!CertRefs_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "CertRefs",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  CompleteCertificateRefs* CompleteCertificateRefs::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CompleteCertificateRefs (*this, f, c);
  }

  CompleteCertificateRefs::
  ~CompleteCertificateRefs ()
  {
  }

  // CompleteRevocationRefs
  //

  CompleteRevocationRefs::
  CompleteRevocationRefs ()
  : ::xml_schema::Type (),
    CRLRefs_ (::xml_schema::Flags (), this),
    OCSPRefs_ (::xml_schema::Flags (), this),
    OtherRefs_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  CompleteRevocationRefs::
  CompleteRevocationRefs (const CompleteRevocationRefs& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CRLRefs_ (x.CRLRefs_, f, this),
    OCSPRefs_ (x.OCSPRefs_, f, this),
    OtherRefs_ (x.OtherRefs_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  CompleteRevocationRefs::
  CompleteRevocationRefs (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CRLRefs_ (f, this),
    OCSPRefs_ (f, this),
    OtherRefs_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void CompleteRevocationRefs::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CRLRefs
      //
      if (n.name () == "CRLRefs" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CRLRefsType > r (
          CRLRefsTraits::create (i, f, this));

        if (!this->CRLRefs_)
        {
          this->CRLRefs_.set (r);
          continue;
        }
      }

      // OCSPRefs
      //
      if (n.name () == "OCSPRefs" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OCSPRefsType > r (
          OCSPRefsTraits::create (i, f, this));

        if (!this->OCSPRefs_)
        {
          this->OCSPRefs_.set (r);
          continue;
        }
      }

      // OtherRefs
      //
      if (n.name () == "OtherRefs" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OtherRefsType > r (
          OtherRefsTraits::create (i, f, this));

        if (!this->OtherRefs_)
        {
          this->OtherRefs_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  CompleteRevocationRefs* CompleteRevocationRefs::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CompleteRevocationRefs (*this, f, c);
  }

  CompleteRevocationRefs::
  ~CompleteRevocationRefs ()
  {
  }

  // CRLRefs
  //

  CRLRefs::
  CRLRefs ()
  : ::xml_schema::Type (),
    CRLRef_ (::xml_schema::Flags (), this)
  {
  }

  CRLRefs::
  CRLRefs (const CRLRefs& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CRLRef_ (x.CRLRef_, f, this)
  {
  }

  CRLRefs::
  CRLRefs (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CRLRef_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CRLRefs::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CRLRef
      //
      if (n.name () == "CRLRef" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CRLRefType > r (
          CRLRefTraits::create (i, f, this));

        this->CRLRef_.push_back (r);
        continue;
      }

      break;
    }
  }

  CRLRefs* CRLRefs::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CRLRefs (*this, f, c);
  }

  CRLRefs::
  ~CRLRefs ()
  {
  }

  // CRLRef
  //

  CRLRef::
  CRLRef (const DigestAlgAndValueType& DigestAlgAndValue)
  : ::xml_schema::Type (),
    DigestAlgAndValue_ (DigestAlgAndValue, ::xml_schema::Flags (), this),
    CRLIdentifier_ (::xml_schema::Flags (), this)
  {
  }

  CRLRef::
  CRLRef (::std::auto_ptr< DigestAlgAndValueType >& DigestAlgAndValue)
  : ::xml_schema::Type (),
    DigestAlgAndValue_ (DigestAlgAndValue, ::xml_schema::Flags (), this),
    CRLIdentifier_ (::xml_schema::Flags (), this)
  {
  }

  CRLRef::
  CRLRef (const CRLRef& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    DigestAlgAndValue_ (x.DigestAlgAndValue_, f, this),
    CRLIdentifier_ (x.CRLIdentifier_, f, this)
  {
  }

  CRLRef::
  CRLRef (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    DigestAlgAndValue_ (f, this),
    CRLIdentifier_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CRLRef::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DigestAlgAndValue
      //
      if (n.name () == "DigestAlgAndValue" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< DigestAlgAndValueType > r (
          DigestAlgAndValueTraits::create (i, f, this));

        if (!DigestAlgAndValue_.present ())
        {
          this->DigestAlgAndValue_.set (r);
          continue;
        }
      }

      // CRLIdentifier
      //
      if (n.name () == "CRLIdentifier" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CRLIdentifierType > r (
          CRLIdentifierTraits::create (i, f, this));

        if (!this->CRLIdentifier_)
        {
          this->CRLIdentifier_.set (r);
          continue;
        }
      }

      break;
    }

    if (!DigestAlgAndValue_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DigestAlgAndValue",
        "http://uri.etsi.org/01903/v1.3.2#");
    }
  }

  CRLRef* CRLRef::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CRLRef (*this, f, c);
  }

  CRLRef::
  ~CRLRef ()
  {
  }

  // CRLIdentifier
  //

  CRLIdentifier::
  CRLIdentifier (const IssuerType& Issuer,
                 const IssueTimeType& IssueTime)
  : ::xml_schema::Type (),
    Issuer_ (Issuer, ::xml_schema::Flags (), this),
    IssueTime_ (IssueTime, ::xml_schema::Flags (), this),
    Number_ (::xml_schema::Flags (), this),
    URI_ (::xml_schema::Flags (), this)
  {
  }

  CRLIdentifier::
  CRLIdentifier (const CRLIdentifier& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Issuer_ (x.Issuer_, f, this),
    IssueTime_ (x.IssueTime_, f, this),
    Number_ (x.Number_, f, this),
    URI_ (x.URI_, f, this)
  {
  }

  CRLIdentifier::
  CRLIdentifier (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Issuer_ (f, this),
    IssueTime_ (f, this),
    Number_ (f, this),
    URI_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void CRLIdentifier::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Issuer
      //
      if (n.name () == "Issuer" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< IssuerType > r (
          IssuerTraits::create (i, f, this));

        if (!Issuer_.present ())
        {
          this->Issuer_.set (r);
          continue;
        }
      }

      // IssueTime
      //
      if (n.name () == "IssueTime" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< IssueTimeType > r (
          IssueTimeTraits::create (i, f, this));

        if (!IssueTime_.present ())
        {
          this->IssueTime_.set (r);
          continue;
        }
      }

      // Number
      //
      if (n.name () == "Number" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        if (!this->Number_)
        {
          this->Number_.set (NumberTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!Issuer_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Issuer",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    if (!IssueTime_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IssueTime",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "URI" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< URIType > r (
          URITraits::create (i, f, this));

        this->URI_.set (r);
        continue;
      }
    }
  }

  CRLIdentifier* CRLIdentifier::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CRLIdentifier (*this, f, c);
  }

  CRLIdentifier::
  ~CRLIdentifier ()
  {
  }

  // OCSPRefs
  //

  OCSPRefs::
  OCSPRefs ()
  : ::xml_schema::Type (),
    OCSPRef_ (::xml_schema::Flags (), this)
  {
  }

  OCSPRefs::
  OCSPRefs (const OCSPRefs& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    OCSPRef_ (x.OCSPRef_, f, this)
  {
  }

  OCSPRefs::
  OCSPRefs (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    OCSPRef_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void OCSPRefs::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OCSPRef
      //
      if (n.name () == "OCSPRef" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OCSPRefType > r (
          OCSPRefTraits::create (i, f, this));

        this->OCSPRef_.push_back (r);
        continue;
      }

      break;
    }
  }

  OCSPRefs* OCSPRefs::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OCSPRefs (*this, f, c);
  }

  OCSPRefs::
  ~OCSPRefs ()
  {
  }

  // OCSPRef
  //

  OCSPRef::
  OCSPRef (const OCSPIdentifierType& OCSPIdentifier)
  : ::xml_schema::Type (),
    OCSPIdentifier_ (OCSPIdentifier, ::xml_schema::Flags (), this),
    DigestAlgAndValue_ (::xml_schema::Flags (), this)
  {
  }

  OCSPRef::
  OCSPRef (::std::auto_ptr< OCSPIdentifierType >& OCSPIdentifier)
  : ::xml_schema::Type (),
    OCSPIdentifier_ (OCSPIdentifier, ::xml_schema::Flags (), this),
    DigestAlgAndValue_ (::xml_schema::Flags (), this)
  {
  }

  OCSPRef::
  OCSPRef (const OCSPRef& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    OCSPIdentifier_ (x.OCSPIdentifier_, f, this),
    DigestAlgAndValue_ (x.DigestAlgAndValue_, f, this)
  {
  }

  OCSPRef::
  OCSPRef (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    OCSPIdentifier_ (f, this),
    DigestAlgAndValue_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void OCSPRef::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OCSPIdentifier
      //
      if (n.name () == "OCSPIdentifier" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OCSPIdentifierType > r (
          OCSPIdentifierTraits::create (i, f, this));

        if (!OCSPIdentifier_.present ())
        {
          this->OCSPIdentifier_.set (r);
          continue;
        }
      }

      // DigestAlgAndValue
      //
      if (n.name () == "DigestAlgAndValue" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< DigestAlgAndValueType > r (
          DigestAlgAndValueTraits::create (i, f, this));

        if (!this->DigestAlgAndValue_)
        {
          this->DigestAlgAndValue_.set (r);
          continue;
        }
      }

      break;
    }

    if (!OCSPIdentifier_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OCSPIdentifier",
        "http://uri.etsi.org/01903/v1.3.2#");
    }
  }

  OCSPRef* OCSPRef::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OCSPRef (*this, f, c);
  }

  OCSPRef::
  ~OCSPRef ()
  {
  }

  // ResponderID
  //

  ResponderID::
  ResponderID ()
  : ::xml_schema::Type (),
    ByName_ (::xml_schema::Flags (), this),
    ByKey_ (::xml_schema::Flags (), this)
  {
  }

  ResponderID::
  ResponderID (const ResponderID& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    ByName_ (x.ByName_, f, this),
    ByKey_ (x.ByKey_, f, this)
  {
  }

  ResponderID::
  ResponderID (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    ByName_ (f, this),
    ByKey_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ResponderID::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ByName
      //
      if (n.name () == "ByName" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ByNameType > r (
          ByNameTraits::create (i, f, this));

        if (!this->ByName_)
        {
          this->ByName_.set (r);
          continue;
        }
      }

      // ByKey
      //
      if (n.name () == "ByKey" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ByKeyType > r (
          ByKeyTraits::create (i, f, this));

        if (!this->ByKey_)
        {
          this->ByKey_.set (r);
          continue;
        }
      }

      break;
    }
  }

  ResponderID* ResponderID::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ResponderID (*this, f, c);
  }

  ResponderID::
  ~ResponderID ()
  {
  }

  // OCSPIdentifier
  //

  OCSPIdentifier::
  OCSPIdentifier (const ResponderIDType& ResponderID,
                  const ProducedAtType& ProducedAt)
  : ::xml_schema::Type (),
    ResponderID_ (ResponderID, ::xml_schema::Flags (), this),
    ProducedAt_ (ProducedAt, ::xml_schema::Flags (), this),
    URI_ (::xml_schema::Flags (), this)
  {
  }

  OCSPIdentifier::
  OCSPIdentifier (::std::auto_ptr< ResponderIDType >& ResponderID,
                  const ProducedAtType& ProducedAt)
  : ::xml_schema::Type (),
    ResponderID_ (ResponderID, ::xml_schema::Flags (), this),
    ProducedAt_ (ProducedAt, ::xml_schema::Flags (), this),
    URI_ (::xml_schema::Flags (), this)
  {
  }

  OCSPIdentifier::
  OCSPIdentifier (const OCSPIdentifier& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    ResponderID_ (x.ResponderID_, f, this),
    ProducedAt_ (x.ProducedAt_, f, this),
    URI_ (x.URI_, f, this)
  {
  }

  OCSPIdentifier::
  OCSPIdentifier (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    ResponderID_ (f, this),
    ProducedAt_ (f, this),
    URI_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void OCSPIdentifier::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ResponderID
      //
      if (n.name () == "ResponderID" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ResponderIDType > r (
          ResponderIDTraits::create (i, f, this));

        if (!ResponderID_.present ())
        {
          this->ResponderID_.set (r);
          continue;
        }
      }

      // ProducedAt
      //
      if (n.name () == "ProducedAt" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< ProducedAtType > r (
          ProducedAtTraits::create (i, f, this));

        if (!ProducedAt_.present ())
        {
          this->ProducedAt_.set (r);
          continue;
        }
      }

      break;
    }

    if (!ResponderID_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ResponderID",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    if (!ProducedAt_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ProducedAt",
        "http://uri.etsi.org/01903/v1.3.2#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "URI" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< URIType > r (
          URITraits::create (i, f, this));

        this->URI_.set (r);
        continue;
      }
    }
  }

  OCSPIdentifier* OCSPIdentifier::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OCSPIdentifier (*this, f, c);
  }

  OCSPIdentifier::
  ~OCSPIdentifier ()
  {
  }

  // OtherCertStatusRefs
  //

  OtherCertStatusRefs::
  OtherCertStatusRefs ()
  : ::xml_schema::Type (),
    OtherRef_ (::xml_schema::Flags (), this)
  {
  }

  OtherCertStatusRefs::
  OtherCertStatusRefs (const OtherCertStatusRefs& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    OtherRef_ (x.OtherRef_, f, this)
  {
  }

  OtherCertStatusRefs::
  OtherCertStatusRefs (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    OtherRef_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void OtherCertStatusRefs::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OtherRef
      //
      if (n.name () == "OtherRef" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OtherRefType > r (
          OtherRefTraits::create (i, f, this));

        this->OtherRef_.push_back (r);
        continue;
      }

      break;
    }
  }

  OtherCertStatusRefs* OtherCertStatusRefs::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OtherCertStatusRefs (*this, f, c);
  }

  OtherCertStatusRefs::
  ~OtherCertStatusRefs ()
  {
  }

  // CertificateValues
  //

  CertificateValues::
  CertificateValues ()
  : ::xml_schema::Type (),
    EncapsulatedX509Certificate_ (::xml_schema::Flags (), this),
    OtherCertificate_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  CertificateValues::
  CertificateValues (const CertificateValues& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    EncapsulatedX509Certificate_ (x.EncapsulatedX509Certificate_, f, this),
    OtherCertificate_ (x.OtherCertificate_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  CertificateValues::
  CertificateValues (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    EncapsulatedX509Certificate_ (f, this),
    OtherCertificate_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void CertificateValues::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // EncapsulatedX509Certificate
      //
      if (n.name () == "EncapsulatedX509Certificate" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< EncapsulatedX509CertificateType > r (
          EncapsulatedX509CertificateTraits::create (i, f, this));

        this->EncapsulatedX509Certificate_.push_back (r);
        continue;
      }

      // OtherCertificate
      //
      if (n.name () == "OtherCertificate" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OtherCertificateType > r (
          OtherCertificateTraits::create (i, f, this));

        this->OtherCertificate_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  CertificateValues* CertificateValues::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CertificateValues (*this, f, c);
  }

  CertificateValues::
  ~CertificateValues ()
  {
  }

  // RevocationValues
  //

  RevocationValues::
  RevocationValues ()
  : ::xml_schema::Type (),
    CRLValues_ (::xml_schema::Flags (), this),
    OCSPValues_ (::xml_schema::Flags (), this),
    OtherValues_ (::xml_schema::Flags (), this),
    Id_ (::xml_schema::Flags (), this)
  {
  }

  RevocationValues::
  RevocationValues (const RevocationValues& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CRLValues_ (x.CRLValues_, f, this),
    OCSPValues_ (x.OCSPValues_, f, this),
    OtherValues_ (x.OtherValues_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  RevocationValues::
  RevocationValues (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CRLValues_ (f, this),
    OCSPValues_ (f, this),
    OtherValues_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void RevocationValues::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CRLValues
      //
      if (n.name () == "CRLValues" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< CRLValuesType > r (
          CRLValuesTraits::create (i, f, this));

        if (!this->CRLValues_)
        {
          this->CRLValues_.set (r);
          continue;
        }
      }

      // OCSPValues
      //
      if (n.name () == "OCSPValues" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OCSPValuesType > r (
          OCSPValuesTraits::create (i, f, this));

        if (!this->OCSPValues_)
        {
          this->OCSPValues_.set (r);
          continue;
        }
      }

      // OtherValues
      //
      if (n.name () == "OtherValues" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OtherValuesType > r (
          OtherValuesTraits::create (i, f, this));

        if (!this->OtherValues_)
        {
          this->OtherValues_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->Id_.set (r);
        continue;
      }
    }
  }

  RevocationValues* RevocationValues::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class RevocationValues (*this, f, c);
  }

  RevocationValues::
  ~RevocationValues ()
  {
  }

  // CRLValues
  //

  CRLValues::
  CRLValues ()
  : ::xml_schema::Type (),
    EncapsulatedCRLValue_ (::xml_schema::Flags (), this)
  {
  }

  CRLValues::
  CRLValues (const CRLValues& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    EncapsulatedCRLValue_ (x.EncapsulatedCRLValue_, f, this)
  {
  }

  CRLValues::
  CRLValues (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    EncapsulatedCRLValue_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CRLValues::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // EncapsulatedCRLValue
      //
      if (n.name () == "EncapsulatedCRLValue" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< EncapsulatedCRLValueType > r (
          EncapsulatedCRLValueTraits::create (i, f, this));

        this->EncapsulatedCRLValue_.push_back (r);
        continue;
      }

      break;
    }
  }

  CRLValues* CRLValues::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CRLValues (*this, f, c);
  }

  CRLValues::
  ~CRLValues ()
  {
  }

  // OCSPValues
  //

  OCSPValues::
  OCSPValues ()
  : ::xml_schema::Type (),
    EncapsulatedOCSPValue_ (::xml_schema::Flags (), this)
  {
  }

  OCSPValues::
  OCSPValues (const OCSPValues& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    EncapsulatedOCSPValue_ (x.EncapsulatedOCSPValue_, f, this)
  {
  }

  OCSPValues::
  OCSPValues (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    EncapsulatedOCSPValue_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void OCSPValues::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // EncapsulatedOCSPValue
      //
      if (n.name () == "EncapsulatedOCSPValue" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< EncapsulatedOCSPValueType > r (
          EncapsulatedOCSPValueTraits::create (i, f, this));

        this->EncapsulatedOCSPValue_.push_back (r);
        continue;
      }

      break;
    }
  }

  OCSPValues* OCSPValues::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OCSPValues (*this, f, c);
  }

  OCSPValues::
  ~OCSPValues ()
  {
  }

  // OtherCertStatusValues
  //

  OtherCertStatusValues::
  OtherCertStatusValues ()
  : ::xml_schema::Type (),
    OtherValue_ (::xml_schema::Flags (), this)
  {
  }

  OtherCertStatusValues::
  OtherCertStatusValues (const OtherCertStatusValues& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    OtherValue_ (x.OtherValue_, f, this)
  {
  }

  OtherCertStatusValues::
  OtherCertStatusValues (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    OtherValue_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void OtherCertStatusValues::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OtherValue
      //
      if (n.name () == "OtherValue" && n.namespace_ () == "http://uri.etsi.org/01903/v1.3.2#")
      {
        ::std::auto_ptr< OtherValueType > r (
          OtherValueTraits::create (i, f, this));

        this->OtherValue_.push_back (r);
        continue;
      }

      break;
    }
  }

  OtherCertStatusValues* OtherCertStatusValues::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OtherCertStatusValues (*this, f, c);
  }

  OtherCertStatusValues::
  ~OtherCertStatusValues ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xades
{
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xades
{
  void
  operator<< (::xercesc::DOMElement& e, const Any& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const ObjectIdentifier& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Identifier
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Identifier",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.identifier ();
    }

    // Description
    //
    if (i.description ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Description",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.description ();
    }

    // DocumentationReferences
    //
    if (i.documentationReferences ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DocumentationReferences",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.documentationReferences ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Identifier& i)
  {
    e << static_cast< const ::xml_schema::Uri& > (i);

    // Qualifier
    //
    if (i.qualifier ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Qualifier",
          e));

      a << *i.qualifier ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Qualifier& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const Qualifier& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const Qualifier& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const DocumentationReferences& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // DocumentationReference
    //
    for (DocumentationReferences::DocumentationReferenceConstIterator
         b (i.documentationReference ().begin ()), n (i.documentationReference ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DocumentationReference",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const EncapsulatedPKIData& i)
  {
    e << static_cast< const ::xml_schema::Base64Binary& > (i);

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }

    // Encoding
    //
    if (i.encoding ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Encoding",
          e));

      a << *i.encoding ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Include& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // URI
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "URI",
          e));

      a << i.uRI ();
    }

    // referencedData
    //
    if (i.referencedData ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "referencedData",
          e));

      a << *i.referencedData ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ReferenceInfo& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // DigestMethod
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DigestMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.digestMethod ();
    }

    // DigestValue
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DigestValue",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.digestValue ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }

    // URI
    //
    if (i.uRI ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "URI",
          e));

      a << *i.uRI ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GenericTimeStamp& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Include
    //
    for (GenericTimeStamp::IncludeConstIterator
         b (i.include ().begin ()), n (i.include ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Include",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // ReferenceInfo
    //
    for (GenericTimeStamp::ReferenceInfoConstIterator
         b (i.referenceInfo ().begin ()), n (i.referenceInfo ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ReferenceInfo",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // CanonicalizationMethod
    //
    if (i.canonicalizationMethod ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CanonicalizationMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.canonicalizationMethod ();
    }

    // EncapsulatedTimeStamp
    //
    for (GenericTimeStamp::EncapsulatedTimeStampConstIterator
         b (i.encapsulatedTimeStamp ().begin ()), n (i.encapsulatedTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EncapsulatedTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // XMLTimeStamp
    //
    for (GenericTimeStamp::XMLTimeStampConstIterator
         b (i.xMLTimeStamp ().begin ()), n (i.xMLTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "XMLTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const XAdESTimeStamp& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Include
    //
    for (XAdESTimeStamp::IncludeConstIterator
         b (i.include ().begin ()), n (i.include ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Include",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // CanonicalizationMethod
    //
    if (i.canonicalizationMethod ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CanonicalizationMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.canonicalizationMethod ();
    }

    // EncapsulatedTimeStamp
    //
    for (XAdESTimeStamp::EncapsulatedTimeStampConstIterator
         b (i.encapsulatedTimeStamp ().begin ()), n (i.encapsulatedTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EncapsulatedTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // XMLTimeStamp
    //
    for (XAdESTimeStamp::XMLTimeStampConstIterator
         b (i.xMLTimeStamp ().begin ()), n (i.xMLTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "XMLTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OtherTimeStamp& i)
  {
    e << static_cast< const ::xades::GenericTimeStamp& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const QualifyingProperties& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // SignedProperties
    //
    if (i.signedProperties ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignedProperties",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signedProperties ();
    }

    // UnsignedProperties
    //
    if (i.unsignedProperties ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UnsignedProperties",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.unsignedProperties ();
    }

    // Target
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Target",
          e));

      a << i.target ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignedProperties& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // SignedSignatureProperties
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignedSignatureProperties",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.signedSignatureProperties ();
    }

    // SignedDataObjectProperties
    //
    if (i.signedDataObjectProperties ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignedDataObjectProperties",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signedDataObjectProperties ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const UnsignedProperties& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // UnsignedSignatureProperties
    //
    if (i.unsignedSignatureProperties ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UnsignedSignatureProperties",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.unsignedSignatureProperties ();
    }

    // UnsignedDataObjectProperties
    //
    if (i.unsignedDataObjectProperties ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UnsignedDataObjectProperties",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.unsignedDataObjectProperties ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignedSignatureProperties& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // SigningTime
    //
    if (i.signingTime ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SigningTime",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signingTime ();
    }

    // SigningCertificate
    //
    if (i.signingCertificate ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SigningCertificate",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signingCertificate ();
    }

    // SignaturePolicyIdentifier
    //
    if (i.signaturePolicyIdentifier ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignaturePolicyIdentifier",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signaturePolicyIdentifier ();
    }

    // SignatureProductionPlace
    //
    if (i.signatureProductionPlace ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignatureProductionPlace",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signatureProductionPlace ();
    }

    // SignerRole
    //
    if (i.signerRole ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignerRole",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signerRole ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignedDataObjectProperties& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // DataObjectFormat
    //
    for (SignedDataObjectProperties::DataObjectFormatConstIterator
         b (i.dataObjectFormat ().begin ()), n (i.dataObjectFormat ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DataObjectFormat",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // CommitmentTypeIndication
    //
    for (SignedDataObjectProperties::CommitmentTypeIndicationConstIterator
         b (i.commitmentTypeIndication ().begin ()), n (i.commitmentTypeIndication ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CommitmentTypeIndication",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // AllDataObjectsTimeStamp
    //
    for (SignedDataObjectProperties::AllDataObjectsTimeStampConstIterator
         b (i.allDataObjectsTimeStamp ().begin ()), n (i.allDataObjectsTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AllDataObjectsTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // IndividualDataObjectsTimeStamp
    //
    for (SignedDataObjectProperties::IndividualDataObjectsTimeStampConstIterator
         b (i.individualDataObjectsTimeStamp ().begin ()), n (i.individualDataObjectsTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IndividualDataObjectsTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const UnsignedSignatureProperties& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CounterSignature
    //
    for (UnsignedSignatureProperties::CounterSignatureConstIterator
         b (i.counterSignature ().begin ()), n (i.counterSignature ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CounterSignature",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // SignatureTimeStamp
    //
    for (UnsignedSignatureProperties::SignatureTimeStampConstIterator
         b (i.signatureTimeStamp ().begin ()), n (i.signatureTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignatureTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // CompleteCertificateRefs
    //
    for (UnsignedSignatureProperties::CompleteCertificateRefsConstIterator
         b (i.completeCertificateRefs ().begin ()), n (i.completeCertificateRefs ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CompleteCertificateRefs",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // CompleteRevocationRefs
    //
    for (UnsignedSignatureProperties::CompleteRevocationRefsConstIterator
         b (i.completeRevocationRefs ().begin ()), n (i.completeRevocationRefs ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CompleteRevocationRefs",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // AttributeCertificateRefs
    //
    for (UnsignedSignatureProperties::AttributeCertificateRefsConstIterator
         b (i.attributeCertificateRefs ().begin ()), n (i.attributeCertificateRefs ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AttributeCertificateRefs",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // AttributeRevocationRefs
    //
    for (UnsignedSignatureProperties::AttributeRevocationRefsConstIterator
         b (i.attributeRevocationRefs ().begin ()), n (i.attributeRevocationRefs ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AttributeRevocationRefs",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // SigAndRefsTimeStamp
    //
    for (UnsignedSignatureProperties::SigAndRefsTimeStampConstIterator
         b (i.sigAndRefsTimeStamp ().begin ()), n (i.sigAndRefsTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SigAndRefsTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // RefsOnlyTimeStamp
    //
    for (UnsignedSignatureProperties::RefsOnlyTimeStampConstIterator
         b (i.refsOnlyTimeStamp ().begin ()), n (i.refsOnlyTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "RefsOnlyTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // CertificateValues
    //
    for (UnsignedSignatureProperties::CertificateValuesConstIterator
         b (i.certificateValues ().begin ()), n (i.certificateValues ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CertificateValues",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // RevocationValues
    //
    for (UnsignedSignatureProperties::RevocationValuesConstIterator
         b (i.revocationValues ().begin ()), n (i.revocationValues ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "RevocationValues",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // AttrAuthoritiesCertValues
    //
    for (UnsignedSignatureProperties::AttrAuthoritiesCertValuesConstIterator
         b (i.attrAuthoritiesCertValues ().begin ()), n (i.attrAuthoritiesCertValues ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AttrAuthoritiesCertValues",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // AttributeRevocationValues
    //
    for (UnsignedSignatureProperties::AttributeRevocationValuesConstIterator
         b (i.attributeRevocationValues ().begin ()), n (i.attributeRevocationValues ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AttributeRevocationValues",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // ArchiveTimeStamp
    //
    for (UnsignedSignatureProperties::ArchiveTimeStampConstIterator
         b (i.archiveTimeStamp ().begin ()), n (i.archiveTimeStamp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ArchiveTimeStamp",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const UnsignedDataObjectProperties& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // UnsignedDataObjectProperty
    //
    for (UnsignedDataObjectProperties::UnsignedDataObjectPropertyConstIterator
         b (i.unsignedDataObjectProperty ().begin ()), n (i.unsignedDataObjectProperty ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UnsignedDataObjectProperty",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const QualifyingPropertiesReference& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // URI
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "URI",
          e));

      a << i.uRI ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CertIDList& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Cert
    //
    for (CertIDList::CertConstIterator
         b (i.cert ().begin ()), n (i.cert ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Cert",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CertID& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CertDigest
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CertDigest",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.certDigest ();
    }

    // IssuerSerial
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IssuerSerial",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.issuerSerial ();
    }

    // URI
    //
    if (i.uRI ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "URI",
          e));

      a << *i.uRI ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const DigestAlgAndValue& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // DigestMethod
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DigestMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.digestMethod ();
    }

    // DigestValue
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DigestValue",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.digestValue ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignaturePolicyIdentifier& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // SignaturePolicyId
    //
    if (i.signaturePolicyId ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignaturePolicyId",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signaturePolicyId ();
    }

    // SignaturePolicyImplied
    //
    if (i.signaturePolicyImplied ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignaturePolicyImplied",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.signaturePolicyImplied ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignaturePolicyId& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // SigPolicyId
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SigPolicyId",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.sigPolicyId ();
    }

    // Transforms
    //
    if (i.transforms ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Transforms",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.transforms ();
    }

    // SigPolicyHash
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SigPolicyHash",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.sigPolicyHash ();
    }

    // SigPolicyQualifiers
    //
    if (i.sigPolicyQualifiers ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SigPolicyQualifiers",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.sigPolicyQualifiers ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SigPolicyQualifiersList& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // SigPolicyQualifier
    //
    for (SigPolicyQualifiersList::SigPolicyQualifierConstIterator
         b (i.sigPolicyQualifier ().begin ()), n (i.sigPolicyQualifier ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SigPolicyQualifier",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SPUserNotice& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // NoticeRef
    //
    if (i.noticeRef ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "NoticeRef",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.noticeRef ();
    }

    // ExplicitText
    //
    if (i.explicitText ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ExplicitText",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.explicitText ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const NoticeReference& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Organization
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Organization",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.organization ();
    }

    // NoticeNumbers
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "NoticeNumbers",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.noticeNumbers ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const IntegerList& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // int
    //
    for (IntegerList::IntConstIterator
         b (i.int_ ().begin ()), n (i.int_ ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "int",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CounterSignature& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Signature
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Signature",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.signature ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const DataObjectFormat& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Description
    //
    if (i.description ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Description",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.description ();
    }

    // ObjectIdentifier
    //
    if (i.objectIdentifier ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ObjectIdentifier",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.objectIdentifier ();
    }

    // MimeType
    //
    if (i.mimeType ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MimeType",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.mimeType ();
    }

    // Encoding
    //
    if (i.encoding ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Encoding",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.encoding ();
    }

    // ObjectReference
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "ObjectReference",
          e));

      a << i.objectReference ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CommitmentTypeIndication& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CommitmentTypeId
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CommitmentTypeId",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.commitmentTypeId ();
    }

    // ObjectReference
    //
    for (CommitmentTypeIndication::ObjectReferenceConstIterator
         b (i.objectReference ().begin ()), n (i.objectReference ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ObjectReference",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // AllSignedDataObjects
    //
    if (i.allSignedDataObjects ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AllSignedDataObjects",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.allSignedDataObjects ();
    }

    // CommitmentTypeQualifiers
    //
    if (i.commitmentTypeQualifiers ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CommitmentTypeQualifiers",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.commitmentTypeQualifiers ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CommitmentTypeQualifiersList& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CommitmentTypeQualifier
    //
    for (CommitmentTypeQualifiersList::CommitmentTypeQualifierConstIterator
         b (i.commitmentTypeQualifier ().begin ()), n (i.commitmentTypeQualifier ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CommitmentTypeQualifier",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignatureProductionPlace& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // City
    //
    if (i.city ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "City",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.city ();
    }

    // StateOrProvince
    //
    if (i.stateOrProvince ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "StateOrProvince",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.stateOrProvince ();
    }

    // PostalCode
    //
    if (i.postalCode ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PostalCode",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.postalCode ();
    }

    // CountryName
    //
    if (i.countryName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CountryName",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.countryName ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignerRole& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // ClaimedRoles
    //
    if (i.claimedRoles ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ClaimedRoles",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.claimedRoles ();
    }

    // CertifiedRoles
    //
    if (i.certifiedRoles ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CertifiedRoles",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.certifiedRoles ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ClaimedRolesList& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // ClaimedRole
    //
    for (ClaimedRolesList::ClaimedRoleConstIterator
         b (i.claimedRole ().begin ()), n (i.claimedRole ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ClaimedRole",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CertifiedRolesList& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CertifiedRole
    //
    for (CertifiedRolesList::CertifiedRoleConstIterator
         b (i.certifiedRole ().begin ()), n (i.certifiedRole ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CertifiedRole",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CompleteCertificateRefs& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CertRefs
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CertRefs",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.certRefs ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CompleteRevocationRefs& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CRLRefs
    //
    if (i.cRLRefs ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CRLRefs",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.cRLRefs ();
    }

    // OCSPRefs
    //
    if (i.oCSPRefs ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OCSPRefs",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.oCSPRefs ();
    }

    // OtherRefs
    //
    if (i.otherRefs ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OtherRefs",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.otherRefs ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CRLRefs& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CRLRef
    //
    for (CRLRefs::CRLRefConstIterator
         b (i.cRLRef ().begin ()), n (i.cRLRef ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CRLRef",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CRLRef& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // DigestAlgAndValue
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DigestAlgAndValue",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.digestAlgAndValue ();
    }

    // CRLIdentifier
    //
    if (i.cRLIdentifier ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CRLIdentifier",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.cRLIdentifier ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CRLIdentifier& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Issuer
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Issuer",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.issuer ();
    }

    // IssueTime
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IssueTime",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.issueTime ();
    }

    // Number
    //
    if (i.number ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Number",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.number ();
    }

    // URI
    //
    if (i.uRI ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "URI",
          e));

      a << *i.uRI ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OCSPRefs& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // OCSPRef
    //
    for (OCSPRefs::OCSPRefConstIterator
         b (i.oCSPRef ().begin ()), n (i.oCSPRef ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OCSPRef",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OCSPRef& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // OCSPIdentifier
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OCSPIdentifier",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.oCSPIdentifier ();
    }

    // DigestAlgAndValue
    //
    if (i.digestAlgAndValue ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DigestAlgAndValue",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.digestAlgAndValue ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ResponderID& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // ByName
    //
    if (i.byName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ByName",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.byName ();
    }

    // ByKey
    //
    if (i.byKey ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ByKey",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.byKey ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OCSPIdentifier& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // ResponderID
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ResponderID",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.responderID ();
    }

    // ProducedAt
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ProducedAt",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << i.producedAt ();
    }

    // URI
    //
    if (i.uRI ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "URI",
          e));

      a << *i.uRI ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OtherCertStatusRefs& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // OtherRef
    //
    for (OtherCertStatusRefs::OtherRefConstIterator
         b (i.otherRef ().begin ()), n (i.otherRef ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OtherRef",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CertificateValues& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // EncapsulatedX509Certificate
    //
    for (CertificateValues::EncapsulatedX509CertificateConstIterator
         b (i.encapsulatedX509Certificate ().begin ()), n (i.encapsulatedX509Certificate ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EncapsulatedX509Certificate",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // OtherCertificate
    //
    for (CertificateValues::OtherCertificateConstIterator
         b (i.otherCertificate ().begin ()), n (i.otherCertificate ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OtherCertificate",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const RevocationValues& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CRLValues
    //
    if (i.cRLValues ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CRLValues",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.cRLValues ();
    }

    // OCSPValues
    //
    if (i.oCSPValues ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OCSPValues",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.oCSPValues ();
    }

    // OtherValues
    //
    if (i.otherValues ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OtherValues",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *i.otherValues ();
    }

    // Id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CRLValues& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // EncapsulatedCRLValue
    //
    for (CRLValues::EncapsulatedCRLValueConstIterator
         b (i.encapsulatedCRLValue ().begin ()), n (i.encapsulatedCRLValue ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EncapsulatedCRLValue",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OCSPValues& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // EncapsulatedOCSPValue
    //
    for (OCSPValues::EncapsulatedOCSPValueConstIterator
         b (i.encapsulatedOCSPValue ().begin ()), n (i.encapsulatedOCSPValue ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EncapsulatedOCSPValue",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OtherCertStatusValues& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // OtherValue
    //
    for (OtherCertStatusValues::OtherValueConstIterator
         b (i.otherValue ().begin ()), n (i.otherValue ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OtherValue",
          "http://uri.etsi.org/01903/v1.3.2#",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

