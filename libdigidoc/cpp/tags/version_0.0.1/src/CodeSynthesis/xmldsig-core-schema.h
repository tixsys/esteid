// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XMLDSIG_CORE_SCHEMA_HXX
#define XMLDSIG_CORE_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
// anyType and anySimpleType.
//
typedef ::xsd::cxx::tree::type Type;
typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;
typedef ::xsd::cxx::tree::type Container;

// 8-bit
//
typedef signed char Byte;
typedef unsigned char UnsignedByte;

// 16-bit
//
typedef short Short;
typedef unsigned short UnsignedShort;

// 32-bit
//
typedef int Int;
typedef unsigned int UnsignedInt;

// 64-bit
//
typedef long long Long;
typedef unsigned long long UnsignedLong;

// Supposed to be arbitrary-length integral types.
//
typedef long long Integer;
typedef long long NonPositiveInteger;
typedef unsigned long long NonNegativeInteger;
typedef unsigned long long PositiveInteger;
typedef long long NegativeInteger;

// Boolean.
//
typedef bool Boolean;

// Floating-point types.
//
typedef float Float;
typedef double Double;
typedef double Decimal;

// String types.
//
typedef ::xsd::cxx::tree::string< char, SimpleType > String;
typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;
typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;
typedef ::xsd::cxx::tree::name< char, Token > Name;
typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;
typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;
typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;
typedef ::xsd::cxx::tree::language< char, Token > Language;

// ID/IDREF.
//
typedef ::xsd::cxx::tree::id< char, Ncname > Id;
typedef ::xsd::cxx::tree::idref< Type, char, Ncname > Idref;
typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;

// URI.
//
typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;

// Qualified name.
//
typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;

// Binary.
//
typedef ::xsd::cxx::tree::buffer< char > Buffer;
typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;
typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;

// Date/time.
//
typedef ::xsd::cxx::tree::time_zone TimeZone;
typedef ::xsd::cxx::tree::date< char, SimpleType > Date;
typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;
typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;
typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;
typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;
typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;
typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;
typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;
typedef ::xsd::cxx::tree::time< char, SimpleType > Time;

// Entity.
//
typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;
typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;

// Namespace information and list stream. Used in
// serialization functions.
//
typedef ::xsd::cxx::xml::dom::namespace_info < char > NamespaceInfo;
typedef ::xsd::cxx::xml::dom::namespace_infomap < char > NamespaceInfomap;
typedef ::xsd::cxx::tree::list_stream < char > ListStream;
typedef ::xsd::cxx::tree::as_double < Double > AsDouble;
typedef ::xsd::cxx::tree::as_decimal < Decimal > AsDecimal;
typedef ::xsd::cxx::tree::facet Facet;

// Flags and properties.
//
typedef ::xsd::cxx::tree::flags Flags;
typedef ::xsd::cxx::tree::properties< char > Properties;

// Exceptions.
//
typedef ::xsd::cxx::tree::exception< char > Exception;
typedef ::xsd::cxx::tree::bounds< char > Bounds;
typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;
typedef ::xsd::cxx::tree::parsing< char > Parsing;
typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;
typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;
typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;
typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;
typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;
typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;
typedef ::xsd::cxx::tree::serialization< char > Serialization;

// Parsing/serialization diagnostics.
//
typedef ::xsd::cxx::tree::severity Severity;
typedef ::xsd::cxx::tree::error< char > Error;
typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

// Error handler callback interface.
//
typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

// DOM interaction.
//
namespace dom
{
// Automatic pointer for DOMDocument.
//
using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
// DOM user data key for back pointers to tree nodes.
//
const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
}
}

// Forward declarations.
//
namespace ds
{
extern char const* XMLNS; // http://www.w3.org/2000/09/xmldsig#
class CryptoBinary;
class Signature;
class SignatureValue;
class SignedInfo;
class CanonicalizationMethod;
class SignatureMethod;
class Reference;
class Transforms;
class Transform;
class DigestMethod;
class DigestValue;
class KeyInfo;
class KeyValue;
class RetrievalMethod;
class X509Data;
class X509IssuerSerial;
class PGPData;
class SPKIData;
class Object;
class Manifest;
class SignatureProperties;
class SignatureProperty;
class HMACOutputLength;
class DSAKeyValue;
class RSAKeyValue;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace ds
{
class CryptoBinary: public ::xml_schema::Base64Binary
{
public:
	// Constructors.
	//
	CryptoBinary();

	CryptoBinary( const ::xml_schema::Base64Binary& );

	CryptoBinary( const ::xercesc::DOMElement& e
	        , ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CryptoBinary( const ::xercesc::DOMAttr& a, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CryptoBinary( const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CryptoBinary( const CryptoBinary& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CryptoBinary* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CryptoBinary();
};

class Signature: public ::xml_schema::Type
{
public:
	// SignedInfo
	//
	typedef ::ds::SignedInfo SignedInfoType;
	typedef ::xsd::cxx::tree::traits< SignedInfoType, char > SignedInfoTraits;

	const SignedInfoType& signedInfo() const;

	SignedInfoType& signedInfo();

	void signedInfo( const SignedInfoType& x );

	void signedInfo( ::std::auto_ptr< SignedInfoType > p );

	// SignatureValue
	//
	typedef ::ds::SignatureValue SignatureValueType;
	typedef ::xsd::cxx::tree::traits< SignatureValueType, char > SignatureValueTraits;

	const SignatureValueType& signatureValue() const;

	SignatureValueType& signatureValue();

	void signatureValue( const SignatureValueType& x );

	void signatureValue( ::std::auto_ptr< SignatureValueType > p );

	// KeyInfo
	//
	typedef ::ds::KeyInfo KeyInfoType;
	typedef ::xsd::cxx::tree::optional< KeyInfoType > KeyInfoOptional;
	typedef ::xsd::cxx::tree::traits< KeyInfoType, char > KeyInfoTraits;

	const KeyInfoOptional& keyInfo() const;

	KeyInfoOptional& keyInfo();

	void keyInfo( const KeyInfoType& x );

	void keyInfo( const KeyInfoOptional& x );

	void keyInfo( ::std::auto_ptr< KeyInfoType > p );

	// Object
	//
	typedef ::ds::Object ObjectType;
	typedef ::xsd::cxx::tree::sequence< ObjectType > ObjectSequence;
	typedef ObjectSequence::iterator ObjectIterator;
	typedef ObjectSequence::const_iterator ObjectConstIterator;
	typedef ::xsd::cxx::tree::traits< ObjectType, char > ObjectTraits;

	const ObjectSequence& object() const;

	ObjectSequence& object();

	void object( const ObjectSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	Signature( const SignedInfoType&, const SignatureValueType& );

	Signature( ::std::auto_ptr< SignedInfoType >&, ::std::auto_ptr< SignatureValueType >& );

	Signature( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Signature( const Signature& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Signature* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~Signature();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< SignedInfoType > SignedInfo_;
	::xsd::cxx::tree::one< SignatureValueType > SignatureValue_;
	KeyInfoOptional KeyInfo_;
	ObjectSequence Object_;
	IdOptional Id_;
};

class SignatureValue: public ::xml_schema::Base64Binary
{
public:
	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	SignatureValue();

	SignatureValue( const ::xml_schema::Base64Binary& );

	SignatureValue( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignatureValue( const SignatureValue& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignatureValue* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignatureValue();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	IdOptional Id_;
};

class SignedInfo: public ::xml_schema::Type
{
public:
	// CanonicalizationMethod
	//
	typedef ::ds::CanonicalizationMethod CanonicalizationMethodType;
	typedef ::xsd::cxx::tree::traits< CanonicalizationMethodType, char > CanonicalizationMethodTraits;

	const CanonicalizationMethodType& canonicalizationMethod() const;

	CanonicalizationMethodType& canonicalizationMethod();

	void canonicalizationMethod( const CanonicalizationMethodType& x );

	void canonicalizationMethod( ::std::auto_ptr< CanonicalizationMethodType > p );

	// SignatureMethod
	//
	typedef ::ds::SignatureMethod SignatureMethodType;
	typedef ::xsd::cxx::tree::traits< SignatureMethodType, char > SignatureMethodTraits;

	const SignatureMethodType& signatureMethod() const;

	SignatureMethodType& signatureMethod();

	void signatureMethod( const SignatureMethodType& x );

	void signatureMethod( ::std::auto_ptr< SignatureMethodType > p );

	// Reference
	//
	typedef ::ds::Reference ReferenceType;
	typedef ::xsd::cxx::tree::sequence< ReferenceType > ReferenceSequence;
	typedef ReferenceSequence::iterator ReferenceIterator;
	typedef ReferenceSequence::const_iterator ReferenceConstIterator;
	typedef ::xsd::cxx::tree::traits< ReferenceType, char > ReferenceTraits;

	const ReferenceSequence& reference() const;

	ReferenceSequence& reference();

	void reference( const ReferenceSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	SignedInfo( const CanonicalizationMethodType&, const SignatureMethodType& );

	SignedInfo( ::std::auto_ptr< CanonicalizationMethodType >&, ::std::auto_ptr< SignatureMethodType >& );

	SignedInfo( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignedInfo( const SignedInfo& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignedInfo* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignedInfo();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< CanonicalizationMethodType > CanonicalizationMethod_;
	::xsd::cxx::tree::one< SignatureMethodType > SignatureMethod_;
	ReferenceSequence Reference_;
	IdOptional Id_;
};

class CanonicalizationMethod: public ::xml_schema::Type
{
public:
	// Algorithm
	//
	typedef ::xml_schema::Uri AlgorithmType;
	typedef ::xsd::cxx::tree::traits< AlgorithmType, char > AlgorithmTraits;

	const AlgorithmType& algorithm() const;

	AlgorithmType& algorithm();

	void algorithm( const AlgorithmType& x );

	void algorithm( ::std::auto_ptr< AlgorithmType > p );

	// Constructors.
	//
	CanonicalizationMethod( const AlgorithmType& );

	CanonicalizationMethod( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CanonicalizationMethod( const CanonicalizationMethod& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CanonicalizationMethod* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CanonicalizationMethod();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< AlgorithmType > Algorithm_;
};

class SignatureMethod: public ::xml_schema::Type
{
public:
	// HMACOutputLength
	//
	typedef ::ds::HMACOutputLength HMACOutputLengthType;
	typedef ::xsd::cxx::tree::optional< HMACOutputLengthType > HMACOutputLengthOptional;
	typedef ::xsd::cxx::tree::traits< HMACOutputLengthType, char > HMACOutputLengthTraits;

	const HMACOutputLengthOptional& hMACOutputLength() const;

	HMACOutputLengthOptional& hMACOutputLength();

	void hMACOutputLength( const HMACOutputLengthType& x );

	void hMACOutputLength( const HMACOutputLengthOptional& x );

	void hMACOutputLength( ::std::auto_ptr< HMACOutputLengthType > p );

	// Algorithm
	//
	typedef ::xml_schema::Uri AlgorithmType;
	typedef ::xsd::cxx::tree::traits< AlgorithmType, char > AlgorithmTraits;

	const AlgorithmType& algorithm() const;

	AlgorithmType& algorithm();

	void algorithm( const AlgorithmType& x );

	void algorithm( ::std::auto_ptr< AlgorithmType > p );

	// Constructors.
	//
	SignatureMethod( const AlgorithmType& );

	SignatureMethod( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignatureMethod( const SignatureMethod& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignatureMethod* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignatureMethod();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	HMACOutputLengthOptional HMACOutputLength_;
	::xsd::cxx::tree::one< AlgorithmType > Algorithm_;
};

class Reference: public ::xml_schema::Type
{
public:
	// Transforms
	//
	typedef ::ds::Transforms TransformsType;
	typedef ::xsd::cxx::tree::optional< TransformsType > TransformsOptional;
	typedef ::xsd::cxx::tree::traits< TransformsType, char > TransformsTraits;

	const TransformsOptional& transforms() const;

	TransformsOptional& transforms();

	void transforms( const TransformsType& x );

	void transforms( const TransformsOptional& x );

	void transforms( ::std::auto_ptr< TransformsType > p );

	// DigestMethod
	//
	typedef ::ds::DigestMethod DigestMethodType;
	typedef ::xsd::cxx::tree::traits< DigestMethodType, char > DigestMethodTraits;

	const DigestMethodType& digestMethod() const;

	DigestMethodType& digestMethod();

	void digestMethod( const DigestMethodType& x );

	void digestMethod( ::std::auto_ptr< DigestMethodType > p );

	// DigestValue
	//
	typedef ::ds::DigestValue DigestValueType;
	typedef ::xsd::cxx::tree::traits< DigestValueType, char > DigestValueTraits;

	const DigestValueType& digestValue() const;

	DigestValueType& digestValue();

	void digestValue( const DigestValueType& x );

	void digestValue( ::std::auto_ptr< DigestValueType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// URI
	//
	typedef ::xml_schema::Uri URIType;
	typedef ::xsd::cxx::tree::optional< URIType > URIOptional;
	typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

	const URIOptional& uRI() const;

	URIOptional& uRI();

	void uRI( const URIType& x );

	void uRI( const URIOptional& x );

	void uRI( ::std::auto_ptr< URIType > p );

	// Type
	//
	typedef ::xml_schema::Uri TypeType;
	typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;
	typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

	const TypeOptional& type() const;

	TypeOptional& type();

	void type( const TypeType& x );

	void type( const TypeOptional& x );

	void type( ::std::auto_ptr< TypeType > p );

	// Constructors.
	//
	Reference( const DigestMethodType&, const DigestValueType& );

	Reference( ::std::auto_ptr< DigestMethodType >&, const DigestValueType& );

	Reference( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Reference( const Reference& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Reference* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~Reference();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	TransformsOptional Transforms_;
	::xsd::cxx::tree::one< DigestMethodType > DigestMethod_;
	::xsd::cxx::tree::one< DigestValueType > DigestValue_;
	IdOptional Id_;
	URIOptional URI_;
	TypeOptional Type_;
};

class Transforms: public ::xml_schema::Type
{
public:
	// Transform
	//
	typedef ::ds::Transform TransformType;
	typedef ::xsd::cxx::tree::sequence< TransformType > TransformSequence;
	typedef TransformSequence::iterator TransformIterator;
	typedef TransformSequence::const_iterator TransformConstIterator;
	typedef ::xsd::cxx::tree::traits< TransformType, char > TransformTraits;

	const TransformSequence& transform() const;

	TransformSequence& transform();

	void transform( const TransformSequence& s );

	// Constructors.
	//
	Transforms();

	Transforms( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Transforms( const Transforms& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Transforms* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~Transforms();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	TransformSequence Transform_;
};

class Transform: public ::xml_schema::Type
{
public:
	// XPath
	//
	typedef ::xml_schema::String XPathType;
	typedef ::xsd::cxx::tree::sequence< XPathType > XPathSequence;
	typedef XPathSequence::iterator XPathIterator;
	typedef XPathSequence::const_iterator XPathConstIterator;
	typedef ::xsd::cxx::tree::traits< XPathType, char > XPathTraits;

	const XPathSequence& xPath() const;

	XPathSequence& xPath();

	void xPath( const XPathSequence& s );

	// Algorithm
	//
	typedef ::xml_schema::Uri AlgorithmType;
	typedef ::xsd::cxx::tree::traits< AlgorithmType, char > AlgorithmTraits;

	const AlgorithmType& algorithm() const;

	AlgorithmType& algorithm();

	void algorithm( const AlgorithmType& x );

	void algorithm( ::std::auto_ptr< AlgorithmType > p );

	// Constructors.
	//
	Transform( const AlgorithmType& );

	Transform( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Transform( const Transform& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Transform* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~Transform();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	XPathSequence XPath_;
	::xsd::cxx::tree::one< AlgorithmType > Algorithm_;
};

class DigestMethod: public ::xml_schema::Type
{
public:
	// Algorithm
	//
	typedef ::xml_schema::Uri AlgorithmType;
	typedef ::xsd::cxx::tree::traits< AlgorithmType, char > AlgorithmTraits;

	const AlgorithmType& algorithm() const;

	AlgorithmType& algorithm();

	void algorithm( const AlgorithmType& x );

	void algorithm( ::std::auto_ptr< AlgorithmType > p );

	// Constructors.
	//
	DigestMethod( const AlgorithmType& );

	DigestMethod( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	DigestMethod( const DigestMethod& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual DigestMethod* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~DigestMethod();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< AlgorithmType > Algorithm_;
};

class DigestValue: public ::xml_schema::Base64Binary
{
public:
	// Constructors.
	//
	DigestValue();

	DigestValue( const ::xml_schema::Base64Binary& );

	DigestValue( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	DigestValue( const ::xercesc::DOMAttr& a, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	DigestValue( const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	DigestValue( const DigestValue& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual DigestValue* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~DigestValue();
};

class KeyInfo: public ::xml_schema::Type
{
public:
	// KeyName
	//
	typedef ::xml_schema::String KeyNameType;
	typedef ::xsd::cxx::tree::sequence< KeyNameType > KeyNameSequence;
	typedef KeyNameSequence::iterator KeyNameIterator;
	typedef KeyNameSequence::const_iterator KeyNameConstIterator;
	typedef ::xsd::cxx::tree::traits< KeyNameType, char > KeyNameTraits;

	const KeyNameSequence& keyName() const;

	KeyNameSequence& keyName();

	void keyName( const KeyNameSequence& s );

	// KeyValue
	//
	typedef ::ds::KeyValue KeyValueType;
	typedef ::xsd::cxx::tree::sequence< KeyValueType > KeyValueSequence;
	typedef KeyValueSequence::iterator KeyValueIterator;
	typedef KeyValueSequence::const_iterator KeyValueConstIterator;
	typedef ::xsd::cxx::tree::traits< KeyValueType, char > KeyValueTraits;

	const KeyValueSequence& keyValue() const;

	KeyValueSequence& keyValue();

	void keyValue( const KeyValueSequence& s );

	// RetrievalMethod
	//
	typedef ::ds::RetrievalMethod RetrievalMethodType;
	typedef ::xsd::cxx::tree::sequence< RetrievalMethodType > RetrievalMethodSequence;
	typedef RetrievalMethodSequence::iterator RetrievalMethodIterator;
	typedef RetrievalMethodSequence::const_iterator RetrievalMethodConstIterator;
	typedef ::xsd::cxx::tree::traits< RetrievalMethodType, char > RetrievalMethodTraits;

	const RetrievalMethodSequence& retrievalMethod() const;

	RetrievalMethodSequence& retrievalMethod();

	void retrievalMethod( const RetrievalMethodSequence& s );

	// X509Data
	//
	typedef ::ds::X509Data X509DataType;
	typedef ::xsd::cxx::tree::sequence< X509DataType > X509DataSequence;
	typedef X509DataSequence::iterator X509DataIterator;
	typedef X509DataSequence::const_iterator X509DataConstIterator;
	typedef ::xsd::cxx::tree::traits< X509DataType, char > X509DataTraits;

	const X509DataSequence& x509Data() const;

	X509DataSequence& x509Data();

	void x509Data( const X509DataSequence& s );

	// PGPData
	//
	typedef ::ds::PGPData PGPDataType;
	typedef ::xsd::cxx::tree::sequence< PGPDataType > PGPDataSequence;
	typedef PGPDataSequence::iterator PGPDataIterator;
	typedef PGPDataSequence::const_iterator PGPDataConstIterator;
	typedef ::xsd::cxx::tree::traits< PGPDataType, char > PGPDataTraits;

	const PGPDataSequence& pGPData() const;

	PGPDataSequence& pGPData();

	void pGPData( const PGPDataSequence& s );

	// SPKIData
	//
	typedef ::ds::SPKIData SPKIDataType;
	typedef ::xsd::cxx::tree::sequence< SPKIDataType > SPKIDataSequence;
	typedef SPKIDataSequence::iterator SPKIDataIterator;
	typedef SPKIDataSequence::const_iterator SPKIDataConstIterator;
	typedef ::xsd::cxx::tree::traits< SPKIDataType, char > SPKIDataTraits;

	const SPKIDataSequence& sPKIData() const;

	SPKIDataSequence& sPKIData();

	void sPKIData( const SPKIDataSequence& s );

	// MgmtData
	//
	typedef ::xml_schema::String MgmtDataType;
	typedef ::xsd::cxx::tree::sequence< MgmtDataType > MgmtDataSequence;
	typedef MgmtDataSequence::iterator MgmtDataIterator;
	typedef MgmtDataSequence::const_iterator MgmtDataConstIterator;
	typedef ::xsd::cxx::tree::traits< MgmtDataType, char > MgmtDataTraits;

	const MgmtDataSequence& mgmtData() const;

	MgmtDataSequence& mgmtData();

	void mgmtData( const MgmtDataSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	KeyInfo();

	KeyInfo( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	KeyInfo( const KeyInfo& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual KeyInfo* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~KeyInfo();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	KeyNameSequence KeyName_;
	KeyValueSequence KeyValue_;
	RetrievalMethodSequence RetrievalMethod_;
	X509DataSequence X509Data_;
	PGPDataSequence PGPData_;
	SPKIDataSequence SPKIData_;
	MgmtDataSequence MgmtData_;
	IdOptional Id_;
};

class KeyValue: public ::xml_schema::Type
{
public:
	// DSAKeyValue
	//
	typedef ::ds::DSAKeyValue DSAKeyValueType;
	typedef ::xsd::cxx::tree::optional< DSAKeyValueType > DSAKeyValueOptional;
	typedef ::xsd::cxx::tree::traits< DSAKeyValueType, char > DSAKeyValueTraits;

	const DSAKeyValueOptional& dSAKeyValue() const;

	DSAKeyValueOptional& dSAKeyValue();

	void dSAKeyValue( const DSAKeyValueType& x );

	void dSAKeyValue( const DSAKeyValueOptional& x );

	void dSAKeyValue( ::std::auto_ptr< DSAKeyValueType > p );

	// RSAKeyValue
	//
	typedef ::ds::RSAKeyValue RSAKeyValueType;
	typedef ::xsd::cxx::tree::optional< RSAKeyValueType > RSAKeyValueOptional;
	typedef ::xsd::cxx::tree::traits< RSAKeyValueType, char > RSAKeyValueTraits;

	const RSAKeyValueOptional& rSAKeyValue() const;

	RSAKeyValueOptional& rSAKeyValue();

	void rSAKeyValue( const RSAKeyValueType& x );

	void rSAKeyValue( const RSAKeyValueOptional& x );

	void rSAKeyValue( ::std::auto_ptr< RSAKeyValueType > p );

	// Constructors.
	//
	KeyValue();

	KeyValue( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	KeyValue( const KeyValue& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual KeyValue* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~KeyValue();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	DSAKeyValueOptional DSAKeyValue_;
	RSAKeyValueOptional RSAKeyValue_;
};

class RetrievalMethod: public ::xml_schema::Type
{
public:
	// Transforms
	//
	typedef ::ds::Transforms TransformsType;
	typedef ::xsd::cxx::tree::optional< TransformsType > TransformsOptional;
	typedef ::xsd::cxx::tree::traits< TransformsType, char > TransformsTraits;

	const TransformsOptional& transforms() const;

	TransformsOptional& transforms();

	void transforms( const TransformsType& x );

	void transforms( const TransformsOptional& x );

	void transforms( ::std::auto_ptr< TransformsType > p );

	// URI
	//
	typedef ::xml_schema::Uri URIType;
	typedef ::xsd::cxx::tree::optional< URIType > URIOptional;
	typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

	const URIOptional& uRI() const;

	URIOptional& uRI();

	void uRI( const URIType& x );

	void uRI( const URIOptional& x );

	void uRI( ::std::auto_ptr< URIType > p );

	// Type
	//
	typedef ::xml_schema::Uri TypeType;
	typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;
	typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

	const TypeOptional& type() const;

	TypeOptional& type();

	void type( const TypeType& x );

	void type( const TypeOptional& x );

	void type( ::std::auto_ptr< TypeType > p );

	// Constructors.
	//
	RetrievalMethod();

	RetrievalMethod( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	RetrievalMethod( const RetrievalMethod& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual RetrievalMethod* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~RetrievalMethod();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	TransformsOptional Transforms_;
	URIOptional URI_;
	TypeOptional Type_;
};

class X509Data: public ::xml_schema::Type
{
public:
	// X509IssuerSerial
	//
	typedef ::ds::X509IssuerSerial X509IssuerSerialType;
	typedef ::xsd::cxx::tree::sequence< X509IssuerSerialType > X509IssuerSerialSequence;
	typedef X509IssuerSerialSequence::iterator X509IssuerSerialIterator;
	typedef X509IssuerSerialSequence::const_iterator X509IssuerSerialConstIterator;
	typedef ::xsd::cxx::tree::traits< X509IssuerSerialType, char > X509IssuerSerialTraits;

	const X509IssuerSerialSequence& x509IssuerSerial() const;

	X509IssuerSerialSequence& x509IssuerSerial();

	void x509IssuerSerial( const X509IssuerSerialSequence& s );

	// X509SKI
	//
	typedef ::xml_schema::Base64Binary X509SKIType;
	typedef ::xsd::cxx::tree::sequence< X509SKIType > X509SKISequence;
	typedef X509SKISequence::iterator X509SKIIterator;
	typedef X509SKISequence::const_iterator X509SKIConstIterator;
	typedef ::xsd::cxx::tree::traits< X509SKIType, char > X509SKITraits;

	const X509SKISequence& x509SKI() const;

	X509SKISequence& x509SKI();

	void x509SKI( const X509SKISequence& s );

	// X509SubjectName
	//
	typedef ::xml_schema::String X509SubjectNameType;
	typedef ::xsd::cxx::tree::sequence< X509SubjectNameType > X509SubjectNameSequence;
	typedef X509SubjectNameSequence::iterator X509SubjectNameIterator;
	typedef X509SubjectNameSequence::const_iterator X509SubjectNameConstIterator;
	typedef ::xsd::cxx::tree::traits< X509SubjectNameType, char > X509SubjectNameTraits;

	const X509SubjectNameSequence& x509SubjectName() const;

	X509SubjectNameSequence& x509SubjectName();

	void x509SubjectName( const X509SubjectNameSequence& s );

	// X509Certificate
	//
	typedef ::xml_schema::Base64Binary X509CertificateType;
	typedef ::xsd::cxx::tree::sequence< X509CertificateType > X509CertificateSequence;
	typedef X509CertificateSequence::iterator X509CertificateIterator;
	typedef X509CertificateSequence::const_iterator X509CertificateConstIterator;
	typedef ::xsd::cxx::tree::traits< X509CertificateType, char > X509CertificateTraits;

	const X509CertificateSequence& x509Certificate() const;

	X509CertificateSequence& x509Certificate();

	void x509Certificate( const X509CertificateSequence& s );

	// X509CRL
	//
	typedef ::xml_schema::Base64Binary X509CRLType;
	typedef ::xsd::cxx::tree::sequence< X509CRLType > X509CRLSequence;
	typedef X509CRLSequence::iterator X509CRLIterator;
	typedef X509CRLSequence::const_iterator X509CRLConstIterator;
	typedef ::xsd::cxx::tree::traits< X509CRLType, char > X509CRLTraits;

	const X509CRLSequence& x509CRL() const;

	X509CRLSequence& x509CRL();

	void x509CRL( const X509CRLSequence& s );

	// Constructors.
	//
	X509Data();

	X509Data( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	X509Data( const X509Data& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual X509Data* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~X509Data();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	X509IssuerSerialSequence X509IssuerSerial_;
	X509SKISequence X509SKI_;
	X509SubjectNameSequence X509SubjectName_;
	X509CertificateSequence X509Certificate_;
	X509CRLSequence X509CRL_;
};

class X509IssuerSerial: public ::xml_schema::Type
{
public:
	// X509IssuerName
	//
	typedef ::xml_schema::String X509IssuerNameType;
	typedef ::xsd::cxx::tree::traits< X509IssuerNameType, char > X509IssuerNameTraits;

	const X509IssuerNameType& x509IssuerName() const;

	X509IssuerNameType& x509IssuerName();

	void x509IssuerName( const X509IssuerNameType& x );

	void x509IssuerName( ::std::auto_ptr< X509IssuerNameType > p );

	// X509SerialNumber
	//
	typedef ::xml_schema::Integer X509SerialNumberType;
	typedef ::xsd::cxx::tree::traits< X509SerialNumberType, char > X509SerialNumberTraits;

	const X509SerialNumberType& x509SerialNumber() const;

	X509SerialNumberType& x509SerialNumber();

	void x509SerialNumber( const X509SerialNumberType& x );

	// Constructors.
	//
	X509IssuerSerial( const X509IssuerNameType&, const X509SerialNumberType& );

	X509IssuerSerial( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	X509IssuerSerial( const X509IssuerSerial& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual X509IssuerSerial* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~X509IssuerSerial();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< X509IssuerNameType > X509IssuerName_;
	::xsd::cxx::tree::one< X509SerialNumberType > X509SerialNumber_;
};

class PGPData: public ::xml_schema::Type
{
public:
	// PGPKeyID
	//
	typedef ::xml_schema::Base64Binary PGPKeyIDType;
	typedef ::xsd::cxx::tree::optional< PGPKeyIDType > PGPKeyIDOptional;
	typedef ::xsd::cxx::tree::traits< PGPKeyIDType, char > PGPKeyIDTraits;

	const PGPKeyIDOptional& pGPKeyID() const;

	PGPKeyIDOptional& pGPKeyID();

	void pGPKeyID( const PGPKeyIDType& x );

	void pGPKeyID( const PGPKeyIDOptional& x );

	void pGPKeyID( ::std::auto_ptr< PGPKeyIDType > p );

	// PGPKeyPacket
	//
	typedef ::xml_schema::Base64Binary PGPKeyPacketType;
	typedef ::xsd::cxx::tree::optional< PGPKeyPacketType > PGPKeyPacketOptional;
	typedef ::xsd::cxx::tree::traits< PGPKeyPacketType, char > PGPKeyPacketTraits;

	const PGPKeyPacketOptional& pGPKeyPacket() const;

	PGPKeyPacketOptional& pGPKeyPacket();

	void pGPKeyPacket( const PGPKeyPacketType& x );

	void pGPKeyPacket( const PGPKeyPacketOptional& x );

	void pGPKeyPacket( ::std::auto_ptr< PGPKeyPacketType > p );

	// Constructors.
	//
	PGPData();

	PGPData( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	PGPData( const PGPData& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual PGPData* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~PGPData();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	PGPKeyIDOptional PGPKeyID_;
	PGPKeyPacketOptional PGPKeyPacket_;
};

class SPKIData: public ::xml_schema::Type
{
public:
	// SPKISexp
	//
	typedef ::xml_schema::Base64Binary SPKISexpType;
	typedef ::xsd::cxx::tree::sequence< SPKISexpType > SPKISexpSequence;
	typedef SPKISexpSequence::iterator SPKISexpIterator;
	typedef SPKISexpSequence::const_iterator SPKISexpConstIterator;
	typedef ::xsd::cxx::tree::traits< SPKISexpType, char > SPKISexpTraits;

	const SPKISexpSequence& sPKISexp() const;

	SPKISexpSequence& sPKISexp();

	void sPKISexp( const SPKISexpSequence& s );

	// Constructors.
	//
	SPKIData();

	SPKIData( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SPKIData( const SPKIData& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SPKIData* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SPKIData();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	SPKISexpSequence SPKISexp_;
};

class Object: public ::xml_schema::Type
{
public:
	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// MimeType
	//
	typedef ::xml_schema::String MimeTypeType;
	typedef ::xsd::cxx::tree::optional< MimeTypeType > MimeTypeOptional;
	typedef ::xsd::cxx::tree::traits< MimeTypeType, char > MimeTypeTraits;

	const MimeTypeOptional& mimeType() const;

	MimeTypeOptional& mimeType();

	void mimeType( const MimeTypeType& x );

	void mimeType( const MimeTypeOptional& x );

	void mimeType( ::std::auto_ptr< MimeTypeType > p );

	// Encoding
	//
	typedef ::xml_schema::Uri EncodingType;
	typedef ::xsd::cxx::tree::optional< EncodingType > EncodingOptional;
	typedef ::xsd::cxx::tree::traits< EncodingType, char > EncodingTraits;

	const EncodingOptional& encoding() const;

	EncodingOptional& encoding();

	void encoding( const EncodingType& x );

	void encoding( const EncodingOptional& x );

	void encoding( ::std::auto_ptr< EncodingType > p );

	// Constructors.
	//
	Object();

	Object( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Object( const Object& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Object* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~Object();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	IdOptional Id_;
	MimeTypeOptional MimeType_;
	EncodingOptional Encoding_;
};

class Manifest: public ::xml_schema::Type
{
public:
	// Reference
	//
	typedef ::ds::Reference ReferenceType;
	typedef ::xsd::cxx::tree::sequence< ReferenceType > ReferenceSequence;
	typedef ReferenceSequence::iterator ReferenceIterator;
	typedef ReferenceSequence::const_iterator ReferenceConstIterator;
	typedef ::xsd::cxx::tree::traits< ReferenceType, char > ReferenceTraits;

	const ReferenceSequence& reference() const;

	ReferenceSequence& reference();

	void reference( const ReferenceSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	Manifest();

	Manifest( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Manifest( const Manifest& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Manifest* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~Manifest();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	ReferenceSequence Reference_;
	IdOptional Id_;
};

class SignatureProperties: public ::xml_schema::Type
{
public:
	// SignatureProperty
	//
	typedef ::ds::SignatureProperty SignaturePropertyType;
	typedef ::xsd::cxx::tree::sequence< SignaturePropertyType > SignaturePropertySequence;
	typedef SignaturePropertySequence::iterator SignaturePropertyIterator;
	typedef SignaturePropertySequence::const_iterator SignaturePropertyConstIterator;
	typedef ::xsd::cxx::tree::traits< SignaturePropertyType, char > SignaturePropertyTraits;

	const SignaturePropertySequence& signatureProperty() const;

	SignaturePropertySequence& signatureProperty();

	void signatureProperty( const SignaturePropertySequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	SignatureProperties();

	SignatureProperties( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignatureProperties( const SignatureProperties& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignatureProperties* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignatureProperties();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	SignaturePropertySequence SignatureProperty_;
	IdOptional Id_;
};

class SignatureProperty: public ::xml_schema::Type
{
public:
	// Target
	//
	typedef ::xml_schema::Uri TargetType;
	typedef ::xsd::cxx::tree::traits< TargetType, char > TargetTraits;

	const TargetType& target() const;

	TargetType& target();

	void target( const TargetType& x );

	void target( ::std::auto_ptr< TargetType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	SignatureProperty( const TargetType& );

	SignatureProperty( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignatureProperty( const SignatureProperty& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignatureProperty* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignatureProperty();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< TargetType > Target_;
	IdOptional Id_;
};

class HMACOutputLength: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Integer, char, ::xml_schema::SimpleType >
{
public:
	// Constructors.
	//
	HMACOutputLength( const ::xml_schema::Integer& );

	HMACOutputLength( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	HMACOutputLength( const ::xercesc::DOMAttr& a, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	HMACOutputLength( const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	HMACOutputLength( const HMACOutputLength& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual HMACOutputLength* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~HMACOutputLength();
};

class DSAKeyValue: public ::xml_schema::Type
{
public:
	// P
	//
	typedef ::ds::CryptoBinary PType;
	typedef ::xsd::cxx::tree::optional< PType > POptional;
	typedef ::xsd::cxx::tree::traits< PType, char > PTraits;

	const POptional& p() const;

	POptional& p();

	void p( const PType& x );

	void p( const POptional& x );

	void p( ::std::auto_ptr< PType > p );

	// Q
	//
	typedef ::ds::CryptoBinary QType;
	typedef ::xsd::cxx::tree::optional< QType > QOptional;
	typedef ::xsd::cxx::tree::traits< QType, char > QTraits;

	const QOptional& q() const;

	QOptional& q();

	void q( const QType& x );

	void q( const QOptional& x );

	void q( ::std::auto_ptr< QType > p );

	// G
	//
	typedef ::ds::CryptoBinary GType;
	typedef ::xsd::cxx::tree::optional< GType > GOptional;
	typedef ::xsd::cxx::tree::traits< GType, char > GTraits;

	const GOptional& g() const;

	GOptional& g();

	void g( const GType& x );

	void g( const GOptional& x );

	void g( ::std::auto_ptr< GType > p );

	// Y
	//
	typedef ::ds::CryptoBinary YType;
	typedef ::xsd::cxx::tree::traits< YType, char > YTraits;

	const YType& y() const;

	YType& y();

	void y( const YType& x );

	void y( ::std::auto_ptr< YType > p );

	// J
	//
	typedef ::ds::CryptoBinary JType;
	typedef ::xsd::cxx::tree::optional< JType > JOptional;
	typedef ::xsd::cxx::tree::traits< JType, char > JTraits;

	const JOptional& j() const;

	JOptional& j();

	void j( const JType& x );

	void j( const JOptional& x );

	void j( ::std::auto_ptr< JType > p );

	// Seed
	//
	typedef ::ds::CryptoBinary SeedType;
	typedef ::xsd::cxx::tree::optional< SeedType > SeedOptional;
	typedef ::xsd::cxx::tree::traits< SeedType, char > SeedTraits;

	const SeedOptional& seed() const;

	SeedOptional& seed();

	void seed( const SeedType& x );

	void seed( const SeedOptional& x );

	void seed( ::std::auto_ptr< SeedType > p );

	// PgenCounter
	//
	typedef ::ds::CryptoBinary PgenCounterType;
	typedef ::xsd::cxx::tree::optional< PgenCounterType > PgenCounterOptional;
	typedef ::xsd::cxx::tree::traits< PgenCounterType, char > PgenCounterTraits;

	const PgenCounterOptional& pgenCounter() const;

	PgenCounterOptional& pgenCounter();

	void pgenCounter( const PgenCounterType& x );

	void pgenCounter( const PgenCounterOptional& x );

	void pgenCounter( ::std::auto_ptr< PgenCounterType > p );

	// Constructors.
	//
	DSAKeyValue( const YType& );

	DSAKeyValue( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	DSAKeyValue( const DSAKeyValue& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual DSAKeyValue* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~DSAKeyValue();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	POptional P_;
	QOptional Q_;
	GOptional G_;
	::xsd::cxx::tree::one< YType > Y_;
	JOptional J_;
	SeedOptional Seed_;
	PgenCounterOptional PgenCounter_;
};

class RSAKeyValue: public ::xml_schema::Type
{
public:
	// Modulus
	//
	typedef ::ds::CryptoBinary ModulusType;
	typedef ::xsd::cxx::tree::traits< ModulusType, char > ModulusTraits;

	const ModulusType& modulus() const;

	ModulusType& modulus();

	void modulus( const ModulusType& x );

	void modulus( ::std::auto_ptr< ModulusType > p );

	// Exponent
	//
	typedef ::ds::CryptoBinary ExponentType;
	typedef ::xsd::cxx::tree::traits< ExponentType, char > ExponentTraits;

	const ExponentType& exponent() const;

	ExponentType& exponent();

	void exponent( const ExponentType& x );

	void exponent( ::std::auto_ptr< ExponentType > p );

	// Constructors.
	//
	RSAKeyValue( const ModulusType&, const ExponentType& );

	RSAKeyValue( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	RSAKeyValue( const RSAKeyValue& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual RSAKeyValue* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~RSAKeyValue();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< ModulusType > Modulus_;
	::xsd::cxx::tree::one< ExponentType > Exponent_;
};
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace ds
{
// Parse a URI or a local file.
//

::std::auto_ptr< ::ds::Signature > signature( const ::std::string& uri, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( const ::std::string& uri, ::xml_schema::ErrorHandler& eh, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( const ::std::string& uri, ::xercesc::DOMErrorHandler& eh, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

// Parse std::istream.
//

::std::auto_ptr< ::ds::Signature > signature( ::std::istream& is, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( ::std::istream& is, ::xml_schema::ErrorHandler& eh, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( ::std::istream& is, ::xercesc::DOMErrorHandler& eh, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( ::std::istream& is, const ::std::string& id, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( ::std::istream& is, const ::std::string& id, ::xml_schema::ErrorHandler& eh, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( ::std::istream& is, const ::std::string& id, ::xercesc::DOMErrorHandler& eh, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::ds::Signature > signature( ::xercesc::InputSource& is, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( ::xercesc::InputSource& is, ::xml_schema::ErrorHandler& eh, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( ::xercesc::InputSource& is, ::xercesc::DOMErrorHandler& eh, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::ds::Signature > signature( const ::xercesc::DOMDocument& d, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );

::std::auto_ptr< ::ds::Signature > signature( ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d, ::xml_schema::Flags f = 0, const ::xml_schema::Properties& p = ::xml_schema::Properties() );
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace ds
{
void operator<< ( ::xercesc::DOMElement&, const CryptoBinary& );

void operator<< ( ::xercesc::DOMAttr&, const CryptoBinary& );

void operator<< ( ::xml_schema::ListStream&, const CryptoBinary& );

// Serialize to std::ostream.
//

void signature( ::std::ostream& os, const ::ds::Signature& x, const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap(), const ::std::string& e = "UTF-8", ::xml_schema::Flags f = 0 );

void signature( ::std::ostream& os, const ::ds::Signature& x, ::xml_schema::ErrorHandler& eh, const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap(), const ::std::string& e = "UTF-8", ::xml_schema::Flags f = 0 );

void signature( ::std::ostream& os, const ::ds::Signature& x, ::xercesc::DOMErrorHandler& eh, const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap(), const ::std::string& e = "UTF-8", ::xml_schema::Flags f = 0 );

// Serialize to xercesc::XMLFormatTarget.
//

void signature( ::xercesc::XMLFormatTarget& ft, const ::ds::Signature& x, const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap(), const ::std::string& e = "UTF-8", ::xml_schema::Flags f = 0 );

void signature( ::xercesc::XMLFormatTarget& ft, const ::ds::Signature& x, ::xml_schema::ErrorHandler& eh, const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap(), const ::std::string& e = "UTF-8", ::xml_schema::Flags f = 0 );

void signature( ::xercesc::XMLFormatTarget& ft, const ::ds::Signature& x, ::xercesc::DOMErrorHandler& eh, const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap(), const ::std::string& e = "UTF-8", ::xml_schema::Flags f = 0 );

// Serialize to an existing xercesc::DOMDocument.
//

void signature( ::xercesc::DOMDocument& d, const ::ds::Signature& x, ::xml_schema::Flags f = 0 );

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > signature( const ::ds::Signature& x, const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap(), ::xml_schema::Flags f = 0 );

void operator<< ( ::xercesc::DOMElement&, const Signature& );

void operator<< ( ::xercesc::DOMElement&, const SignatureValue& );

void operator<< ( ::xercesc::DOMElement&, const SignedInfo& );

void operator<< ( ::xercesc::DOMElement&, const CanonicalizationMethod& );

void operator<< ( ::xercesc::DOMElement&, const SignatureMethod& );

void operator<< ( ::xercesc::DOMElement&, const Reference& );

void operator<< ( ::xercesc::DOMElement&, const Transforms& );

void operator<< ( ::xercesc::DOMElement&, const Transform& );

void operator<< ( ::xercesc::DOMElement&, const DigestMethod& );

void operator<< ( ::xercesc::DOMElement&, const DigestValue& );

void operator<< ( ::xercesc::DOMAttr&, const DigestValue& );

void operator<< ( ::xml_schema::ListStream&, const DigestValue& );

void operator<< ( ::xercesc::DOMElement&, const KeyInfo& );

void operator<< ( ::xercesc::DOMElement&, const KeyValue& );

void operator<< ( ::xercesc::DOMElement&, const RetrievalMethod& );

void operator<< ( ::xercesc::DOMElement&, const X509Data& );

void operator<< ( ::xercesc::DOMElement&, const X509IssuerSerial& );

void operator<< ( ::xercesc::DOMElement&, const PGPData& );

void operator<< ( ::xercesc::DOMElement&, const SPKIData& );

void operator<< ( ::xercesc::DOMElement&, const Object& );

void operator<< ( ::xercesc::DOMElement&, const Manifest& );

void operator<< ( ::xercesc::DOMElement&, const SignatureProperties& );

void operator<< ( ::xercesc::DOMElement&, const SignatureProperty& );

void operator<< ( ::xercesc::DOMElement&, const HMACOutputLength& );

void operator<< ( ::xercesc::DOMAttr&, const HMACOutputLength& );

void operator<< ( ::xml_schema::ListStream&, const HMACOutputLength& );

void operator<< ( ::xercesc::DOMElement&, const DSAKeyValue& );

void operator<< ( ::xercesc::DOMElement&, const RSAKeyValue& );
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XMLDSIG_CORE_SCHEMA_HXX
