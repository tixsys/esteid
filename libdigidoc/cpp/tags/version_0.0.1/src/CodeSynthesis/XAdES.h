// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XAD_ES_HXX
#define XAD_ES_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

// Forward declarations.
//
namespace xades
{
extern char const* XMLNS; // http://uri.etsi.org/01903/v1.3.2#
class Any;
class ObjectIdentifier;
class Identifier;
class Qualifier;
class DocumentationReferences;
class EncapsulatedPKIData;
class Include;
class ReferenceInfo;
class GenericTimeStamp;
class XAdESTimeStamp;
class OtherTimeStamp;
class QualifyingProperties;
class SignedProperties;
class UnsignedProperties;
class SignedSignatureProperties;
class SignedDataObjectProperties;
class UnsignedSignatureProperties;
class UnsignedDataObjectProperties;
class QualifyingPropertiesReference;
class CertIDList;
class CertID;
class DigestAlgAndValue;
class SignaturePolicyIdentifier;
class SignaturePolicyId;
class SigPolicyQualifiersList;
class SPUserNotice;
class NoticeReference;
class IntegerList;
class CounterSignature;
class DataObjectFormat;
class CommitmentTypeIndication;
class CommitmentTypeQualifiersList;
class SignatureProductionPlace;
class SignerRole;
class ClaimedRolesList;
class CertifiedRolesList;
class CompleteCertificateRefs;
class CompleteRevocationRefs;
class CRLRefs;
class CRLRef;
class CRLIdentifier;
class OCSPRefs;
class OCSPRef;
class ResponderID;
class OCSPIdentifier;
class OtherCertStatusRefs;
class CertificateValues;
class RevocationValues;
class CRLValues;
class OCSPValues;
class OtherCertStatusValues;
}

#include "xmldsig-core-schema.h"

namespace xades
{
class Any: public ::xml_schema::Type
{
public:
	// Constructors.
	//
	Any();

	Any( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Any( const Any& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Any* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~Any();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&,  ::xml_schema::Flags );

};

class ObjectIdentifier: public ::xml_schema::Type
{
public:
	// Identifier
	//
	typedef ::xades::Identifier IdentifierType;
	typedef ::xsd::cxx::tree::traits< IdentifierType, char > IdentifierTraits;

	const IdentifierType& identifier() const;

	IdentifierType& identifier();

	void identifier( const IdentifierType& x );

	void identifier( ::std::auto_ptr< IdentifierType > p );

	// Description
	//
	typedef ::xml_schema::String DescriptionType;
	typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;
	typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

	const DescriptionOptional& description() const;

	DescriptionOptional& description();

	void description( const DescriptionType& x );

	void description( const DescriptionOptional& x );

	void description( ::std::auto_ptr< DescriptionType > p );

	// DocumentationReferences
	//
	typedef ::xades::DocumentationReferences DocumentationReferencesType;
	typedef ::xsd::cxx::tree::optional< DocumentationReferencesType > DocumentationReferencesOptional;
	typedef ::xsd::cxx::tree::traits< DocumentationReferencesType, char > DocumentationReferencesTraits;

	const DocumentationReferencesOptional& documentationReferences() const;

	DocumentationReferencesOptional& documentationReferences();

	void documentationReferences( const DocumentationReferencesType& x );

	void documentationReferences( const DocumentationReferencesOptional& x );

	void documentationReferences( ::std::auto_ptr< DocumentationReferencesType > p );

	// Constructors.
	//
	ObjectIdentifier( const IdentifierType& );

	ObjectIdentifier( ::std::auto_ptr< IdentifierType >& );

	ObjectIdentifier( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	ObjectIdentifier( const ObjectIdentifier& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual ObjectIdentifier* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~ObjectIdentifier();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< IdentifierType > Identifier_;
	DescriptionOptional Description_;
	DocumentationReferencesOptional DocumentationReferences_;
};

class Identifier: public ::xml_schema::Uri
{
public:
	// Qualifier
	//
	typedef ::xades::Qualifier QualifierType;
	typedef ::xsd::cxx::tree::optional< QualifierType > QualifierOptional;
	typedef ::xsd::cxx::tree::traits< QualifierType, char > QualifierTraits;

	const QualifierOptional& qualifier() const;

	QualifierOptional& qualifier();

	void qualifier( const QualifierType& x );

	void qualifier( const QualifierOptional& x );

	void qualifier( ::std::auto_ptr< QualifierType > p );

	// Constructors.
	//
	Identifier( const ::xml_schema::Uri& );

	Identifier( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Identifier( const Identifier& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Identifier* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual	~Identifier();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	QualifierOptional Qualifier_;
};

class Qualifier: public ::xml_schema::String
{
public:
	enum Value
	{
		OIDAsURI, OIDAsURN
	};

	Qualifier( Value v );

	Qualifier( const char* v );

	Qualifier( const ::std::string& v );

	Qualifier( const ::xml_schema::String& v );

	Qualifier( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Qualifier( const ::xercesc::DOMAttr& a, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Qualifier( const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Qualifier( const Qualifier& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Qualifier* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	Qualifier& operator= ( Value v );

	virtual operator Value() const
	{
		return _xsd_Qualifier_convert();
	}

	static const char* const _xsd_Qualifier_literals_[2];
	static const Value _xsd_Qualifier_indexes_[2];

private:
	Value _xsd_Qualifier_convert() const;

};

class DocumentationReferences: public ::xml_schema::Type
{
public:
	// DocumentationReference
	//
	typedef ::xml_schema::Uri DocumentationReferenceType;
	typedef ::xsd::cxx::tree::sequence< DocumentationReferenceType > DocumentationReferenceSequence;
	typedef DocumentationReferenceSequence::iterator DocumentationReferenceIterator;
	typedef DocumentationReferenceSequence::const_iterator DocumentationReferenceConstIterator;
	typedef ::xsd::cxx::tree::traits< DocumentationReferenceType, char > DocumentationReferenceTraits;

	const DocumentationReferenceSequence& documentationReference() const;

	DocumentationReferenceSequence& documentationReference();

	void documentationReference( const DocumentationReferenceSequence& s );

	// Constructors.
	//
	DocumentationReferences();

	DocumentationReferences( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	DocumentationReferences( const DocumentationReferences& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual DocumentationReferences* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~DocumentationReferences();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	DocumentationReferenceSequence DocumentationReference_;
};

class EncapsulatedPKIData: public ::xml_schema::Base64Binary
{
public:
	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Encoding
	//
	typedef ::xml_schema::Uri EncodingType;
	typedef ::xsd::cxx::tree::optional< EncodingType > EncodingOptional;
	typedef ::xsd::cxx::tree::traits< EncodingType, char > EncodingTraits;

	const EncodingOptional& encoding() const;

	EncodingOptional& encoding();

	void encoding( const EncodingType& x );

	void encoding( const EncodingOptional& x );

	void encoding( ::std::auto_ptr< EncodingType > p );

	// Constructors.
	//
	EncapsulatedPKIData();

	EncapsulatedPKIData( const ::xml_schema::Base64Binary& );

	EncapsulatedPKIData( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	EncapsulatedPKIData( const EncapsulatedPKIData& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual EncapsulatedPKIData* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~EncapsulatedPKIData();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	IdOptional Id_;
	EncodingOptional Encoding_;
};

class Include: public ::xml_schema::Type
{
public:
	// URI
	//
	typedef ::xml_schema::Uri URIType;
	typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

	const URIType& uRI() const;

	URIType& uRI();

	void uRI( const URIType& x );

	void uRI( ::std::auto_ptr< URIType > p );

	// referencedData
	//
	typedef ::xml_schema::Boolean ReferencedDataType;
	typedef ::xsd::cxx::tree::optional< ReferencedDataType > ReferencedDataOptional;
	typedef ::xsd::cxx::tree::traits< ReferencedDataType, char > ReferencedDataTraits;

	const ReferencedDataOptional& referencedData() const;

	ReferencedDataOptional& referencedData();

	void referencedData( const ReferencedDataType& x );

	void referencedData( const ReferencedDataOptional& x );

	// Constructors.
	//
	Include( const URIType& );

	Include( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	Include( const Include& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual Include* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~Include();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< URIType > URI_;
	ReferencedDataOptional referencedData_;
};

class ReferenceInfo: public ::xml_schema::Type
{
public:
	// DigestMethod
	//
	typedef ::ds::DigestMethod DigestMethodType;
	typedef ::xsd::cxx::tree::traits< DigestMethodType, char > DigestMethodTraits;

	const DigestMethodType& digestMethod() const;

	DigestMethodType& digestMethod();

	void digestMethod( const DigestMethodType& x );

	void digestMethod( ::std::auto_ptr< DigestMethodType > p );

	// DigestValue
	//
	typedef ::ds::DigestValue DigestValueType;
	typedef ::xsd::cxx::tree::traits< DigestValueType, char > DigestValueTraits;

	const DigestValueType& digestValue() const;

	DigestValueType& digestValue();

	void digestValue( const DigestValueType& x );

	void digestValue( ::std::auto_ptr< DigestValueType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// URI
	//
	typedef ::xml_schema::Uri URIType;
	typedef ::xsd::cxx::tree::optional< URIType > URIOptional;
	typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

	const URIOptional& uRI() const;

	URIOptional& uRI();

	void uRI( const URIType& x );

	void uRI( const URIOptional& x );

	void uRI( ::std::auto_ptr< URIType > p );

	// Constructors.
	//
	ReferenceInfo( const DigestMethodType&, const DigestValueType& );

	ReferenceInfo( ::std::auto_ptr< DigestMethodType >&, const DigestValueType& );

	ReferenceInfo( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	ReferenceInfo( const ReferenceInfo& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual ReferenceInfo* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~ReferenceInfo();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< DigestMethodType > DigestMethod_;
	::xsd::cxx::tree::one< DigestValueType > DigestValue_;
	IdOptional Id_;
	URIOptional URI_;
};

class GenericTimeStamp: public ::xml_schema::Type
{
public:
	// Include
	//
	typedef ::xades::Include IncludeType;
	typedef ::xsd::cxx::tree::sequence< IncludeType > IncludeSequence;
	typedef IncludeSequence::iterator IncludeIterator;
	typedef IncludeSequence::const_iterator IncludeConstIterator;
	typedef ::xsd::cxx::tree::traits< IncludeType, char > IncludeTraits;

	const IncludeSequence& include() const;

	IncludeSequence& include();

	void include( const IncludeSequence& s );

	// ReferenceInfo
	//
	typedef ::xades::ReferenceInfo ReferenceInfoType;
	typedef ::xsd::cxx::tree::sequence< ReferenceInfoType > ReferenceInfoSequence;
	typedef ReferenceInfoSequence::iterator ReferenceInfoIterator;
	typedef ReferenceInfoSequence::const_iterator ReferenceInfoConstIterator;
	typedef ::xsd::cxx::tree::traits< ReferenceInfoType, char > ReferenceInfoTraits;

	const ReferenceInfoSequence& referenceInfo() const;

	ReferenceInfoSequence& referenceInfo();

	void referenceInfo( const ReferenceInfoSequence& s );

	// CanonicalizationMethod
	//
	typedef ::ds::CanonicalizationMethod CanonicalizationMethodType;
	typedef ::xsd::cxx::tree::optional< CanonicalizationMethodType > CanonicalizationMethodOptional;
	typedef ::xsd::cxx::tree::traits< CanonicalizationMethodType, char > CanonicalizationMethodTraits;

	const CanonicalizationMethodOptional& canonicalizationMethod() const;

	CanonicalizationMethodOptional& canonicalizationMethod();

	void canonicalizationMethod( const CanonicalizationMethodType& x );

	void canonicalizationMethod( const CanonicalizationMethodOptional& x );

	void canonicalizationMethod( ::std::auto_ptr< CanonicalizationMethodType > p );

	// EncapsulatedTimeStamp
	//
	typedef ::xades::EncapsulatedPKIData EncapsulatedTimeStampType;
	typedef ::xsd::cxx::tree::sequence< EncapsulatedTimeStampType > EncapsulatedTimeStampSequence;
	typedef EncapsulatedTimeStampSequence::iterator EncapsulatedTimeStampIterator;
	typedef EncapsulatedTimeStampSequence::const_iterator EncapsulatedTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< EncapsulatedTimeStampType, char > EncapsulatedTimeStampTraits;

	const EncapsulatedTimeStampSequence& encapsulatedTimeStamp() const;

	EncapsulatedTimeStampSequence& encapsulatedTimeStamp();

	void encapsulatedTimeStamp( const EncapsulatedTimeStampSequence& s );

	// XMLTimeStamp
	//
	typedef ::xades::Any XMLTimeStampType;
	typedef ::xsd::cxx::tree::sequence< XMLTimeStampType > XMLTimeStampSequence;
	typedef XMLTimeStampSequence::iterator XMLTimeStampIterator;
	typedef XMLTimeStampSequence::const_iterator XMLTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< XMLTimeStampType, char > XMLTimeStampTraits;

	const XMLTimeStampSequence& xMLTimeStamp() const;

	XMLTimeStampSequence& xMLTimeStamp();

	void xMLTimeStamp( const XMLTimeStampSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	GenericTimeStamp();

	GenericTimeStamp( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	GenericTimeStamp( const GenericTimeStamp& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual GenericTimeStamp* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~GenericTimeStamp();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	IncludeSequence Include_;
	ReferenceInfoSequence ReferenceInfo_;
	CanonicalizationMethodOptional CanonicalizationMethod_;
	EncapsulatedTimeStampSequence EncapsulatedTimeStamp_;
	XMLTimeStampSequence XMLTimeStamp_;
	IdOptional Id_;
};

class XAdESTimeStamp: public ::xml_schema::Type
{
public:
	// Include
	//
	typedef ::xades::Include IncludeType;
	typedef ::xsd::cxx::tree::sequence< IncludeType > IncludeSequence;
	typedef IncludeSequence::iterator IncludeIterator;
	typedef IncludeSequence::const_iterator IncludeConstIterator;
	typedef ::xsd::cxx::tree::traits< IncludeType, char > IncludeTraits;

	const IncludeSequence& include() const;

	IncludeSequence& include();

	void include( const IncludeSequence& s );

	// CanonicalizationMethod
	//
	typedef ::ds::CanonicalizationMethod CanonicalizationMethodType;
	typedef ::xsd::cxx::tree::optional< CanonicalizationMethodType > CanonicalizationMethodOptional;
	typedef ::xsd::cxx::tree::traits< CanonicalizationMethodType, char > CanonicalizationMethodTraits;

	const CanonicalizationMethodOptional& canonicalizationMethod() const;

	CanonicalizationMethodOptional& canonicalizationMethod();

	void canonicalizationMethod( const CanonicalizationMethodType& x );

	void canonicalizationMethod( const CanonicalizationMethodOptional& x );

	void canonicalizationMethod( ::std::auto_ptr< CanonicalizationMethodType > p );

	// EncapsulatedTimeStamp
	//
	typedef ::xades::EncapsulatedPKIData EncapsulatedTimeStampType;
	typedef ::xsd::cxx::tree::sequence< EncapsulatedTimeStampType > EncapsulatedTimeStampSequence;
	typedef EncapsulatedTimeStampSequence::iterator EncapsulatedTimeStampIterator;
	typedef EncapsulatedTimeStampSequence::const_iterator EncapsulatedTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< EncapsulatedTimeStampType, char > EncapsulatedTimeStampTraits;

	const EncapsulatedTimeStampSequence& encapsulatedTimeStamp() const;

	EncapsulatedTimeStampSequence& encapsulatedTimeStamp();

	void encapsulatedTimeStamp( const EncapsulatedTimeStampSequence& s );

	// XMLTimeStamp
	//
	typedef ::xades::Any XMLTimeStampType;
	typedef ::xsd::cxx::tree::sequence< XMLTimeStampType > XMLTimeStampSequence;
	typedef XMLTimeStampSequence::iterator XMLTimeStampIterator;
	typedef XMLTimeStampSequence::const_iterator XMLTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< XMLTimeStampType, char > XMLTimeStampTraits;

	const XMLTimeStampSequence& xMLTimeStamp() const;

	XMLTimeStampSequence& xMLTimeStamp();

	void xMLTimeStamp( const XMLTimeStampSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	XAdESTimeStamp();

	XAdESTimeStamp( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	XAdESTimeStamp( const XAdESTimeStamp& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual XAdESTimeStamp* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~XAdESTimeStamp();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	IncludeSequence Include_;
	CanonicalizationMethodOptional CanonicalizationMethod_;
	EncapsulatedTimeStampSequence EncapsulatedTimeStamp_;
	XMLTimeStampSequence XMLTimeStamp_;
	IdOptional Id_;
};

class OtherTimeStamp: public ::xades::GenericTimeStamp
{
public:
	// Constructors.
	//
	OtherTimeStamp();

	OtherTimeStamp( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	OtherTimeStamp( const OtherTimeStamp& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual OtherTimeStamp* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~OtherTimeStamp();
};

class QualifyingProperties: public ::xml_schema::Type
{
public:
	// SignedProperties
	//
	typedef ::xades::SignedProperties SignedPropertiesType;
	typedef ::xsd::cxx::tree::optional< SignedPropertiesType > SignedPropertiesOptional;
	typedef ::xsd::cxx::tree::traits< SignedPropertiesType, char > SignedPropertiesTraits;

	const SignedPropertiesOptional& signedProperties() const;

	SignedPropertiesOptional& signedProperties();

	void signedProperties( const SignedPropertiesType& x );

	void signedProperties( const SignedPropertiesOptional& x );

	void signedProperties( ::std::auto_ptr< SignedPropertiesType > p );

	// UnsignedProperties
	//
	typedef ::xades::UnsignedProperties UnsignedPropertiesType;
	typedef ::xsd::cxx::tree::optional< UnsignedPropertiesType > UnsignedPropertiesOptional;
	typedef ::xsd::cxx::tree::traits< UnsignedPropertiesType, char > UnsignedPropertiesTraits;

	const UnsignedPropertiesOptional& unsignedProperties() const;

	UnsignedPropertiesOptional& unsignedProperties();

	void unsignedProperties( const UnsignedPropertiesType& x );

	void unsignedProperties( const UnsignedPropertiesOptional& x );

	void unsignedProperties( ::std::auto_ptr< UnsignedPropertiesType > p );

	// Target
	//
	typedef ::xml_schema::Uri TargetType;
	typedef ::xsd::cxx::tree::traits< TargetType, char > TargetTraits;

	const TargetType& target() const;

	TargetType& target();

	void target( const TargetType& x );

	void target( ::std::auto_ptr< TargetType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	QualifyingProperties( const TargetType& );

	QualifyingProperties( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	QualifyingProperties( const QualifyingProperties& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual QualifyingProperties* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~QualifyingProperties();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	SignedPropertiesOptional SignedProperties_;
	UnsignedPropertiesOptional UnsignedProperties_;
	::xsd::cxx::tree::one< TargetType > Target_;
	IdOptional Id_;
};

class SignedProperties: public ::xml_schema::Type
{
public:
	// SignedSignatureProperties
	//
	typedef ::xades::SignedSignatureProperties SignedSignaturePropertiesType;
	typedef ::xsd::cxx::tree::traits< SignedSignaturePropertiesType, char > SignedSignaturePropertiesTraits;

	const SignedSignaturePropertiesType& signedSignatureProperties() const;

	SignedSignaturePropertiesType& signedSignatureProperties();

	void signedSignatureProperties( const SignedSignaturePropertiesType& x );

	void signedSignatureProperties( ::std::auto_ptr< SignedSignaturePropertiesType > p );

	// SignedDataObjectProperties
	//
	typedef ::xades::SignedDataObjectProperties SignedDataObjectPropertiesType;
	typedef ::xsd::cxx::tree::optional< SignedDataObjectPropertiesType > SignedDataObjectPropertiesOptional;
	typedef ::xsd::cxx::tree::traits< SignedDataObjectPropertiesType, char > SignedDataObjectPropertiesTraits;

	const SignedDataObjectPropertiesOptional& signedDataObjectProperties() const;

	SignedDataObjectPropertiesOptional& signedDataObjectProperties();

	void signedDataObjectProperties( const SignedDataObjectPropertiesType& x );

	void signedDataObjectProperties( const SignedDataObjectPropertiesOptional& x );

	void signedDataObjectProperties( ::std::auto_ptr< SignedDataObjectPropertiesType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	SignedProperties( const SignedSignaturePropertiesType& );

	SignedProperties( ::std::auto_ptr< SignedSignaturePropertiesType >& );

	SignedProperties( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignedProperties( const SignedProperties& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignedProperties* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignedProperties();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< SignedSignaturePropertiesType > SignedSignatureProperties_;
	SignedDataObjectPropertiesOptional SignedDataObjectProperties_;
	IdOptional Id_;
};

class UnsignedProperties: public ::xml_schema::Type
{
public:
	// UnsignedSignatureProperties
	//
	typedef ::xades::UnsignedSignatureProperties UnsignedSignaturePropertiesType;
	typedef ::xsd::cxx::tree::optional< UnsignedSignaturePropertiesType > UnsignedSignaturePropertiesOptional;
	typedef ::xsd::cxx::tree::traits< UnsignedSignaturePropertiesType, char > UnsignedSignaturePropertiesTraits;

	const UnsignedSignaturePropertiesOptional& unsignedSignatureProperties() const;

	UnsignedSignaturePropertiesOptional& unsignedSignatureProperties();

	void unsignedSignatureProperties( const UnsignedSignaturePropertiesType& x );

	void unsignedSignatureProperties( const UnsignedSignaturePropertiesOptional& x );

	void unsignedSignatureProperties( ::std::auto_ptr< UnsignedSignaturePropertiesType > p );

	// UnsignedDataObjectProperties
	//
	typedef ::xades::UnsignedDataObjectProperties UnsignedDataObjectPropertiesType;
	typedef ::xsd::cxx::tree::optional< UnsignedDataObjectPropertiesType > UnsignedDataObjectPropertiesOptional;
	typedef ::xsd::cxx::tree::traits< UnsignedDataObjectPropertiesType, char > UnsignedDataObjectPropertiesTraits;

	const UnsignedDataObjectPropertiesOptional& unsignedDataObjectProperties() const;

	UnsignedDataObjectPropertiesOptional& unsignedDataObjectProperties();

	void unsignedDataObjectProperties( const UnsignedDataObjectPropertiesType& x );

	void unsignedDataObjectProperties( const UnsignedDataObjectPropertiesOptional& x );

	void unsignedDataObjectProperties( ::std::auto_ptr< UnsignedDataObjectPropertiesType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	UnsignedProperties();

	UnsignedProperties( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	UnsignedProperties( const UnsignedProperties& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual UnsignedProperties* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~UnsignedProperties();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	UnsignedSignaturePropertiesOptional UnsignedSignatureProperties_;
	UnsignedDataObjectPropertiesOptional UnsignedDataObjectProperties_;
	IdOptional Id_;
};

class SignedSignatureProperties: public ::xml_schema::Type
{
public:
	// SigningTime
	//
	typedef ::xml_schema::DateTime SigningTimeType;
	typedef ::xsd::cxx::tree::optional< SigningTimeType > SigningTimeOptional;
	typedef ::xsd::cxx::tree::traits< SigningTimeType, char > SigningTimeTraits;

	const SigningTimeOptional& signingTime() const;

	SigningTimeOptional& signingTime();

	void signingTime( const SigningTimeType& x );

	void signingTime( const SigningTimeOptional& x );

	void signingTime( ::std::auto_ptr< SigningTimeType > p );

	// SigningCertificate
	//
	typedef ::xades::CertIDList SigningCertificateType;
	typedef ::xsd::cxx::tree::optional< SigningCertificateType > SigningCertificateOptional;
	typedef ::xsd::cxx::tree::traits< SigningCertificateType, char > SigningCertificateTraits;

	const SigningCertificateOptional& signingCertificate() const;

	SigningCertificateOptional& signingCertificate();

	void signingCertificate( const SigningCertificateType& x );

	void signingCertificate( const SigningCertificateOptional& x );

	void signingCertificate( ::std::auto_ptr< SigningCertificateType > p );

	// SignaturePolicyIdentifier
	//
	typedef ::xades::SignaturePolicyIdentifier SignaturePolicyIdentifierType;
	typedef ::xsd::cxx::tree::optional< SignaturePolicyIdentifierType > SignaturePolicyIdentifierOptional;
	typedef ::xsd::cxx::tree::traits< SignaturePolicyIdentifierType, char > SignaturePolicyIdentifierTraits;

	const SignaturePolicyIdentifierOptional& signaturePolicyIdentifier() const;

	SignaturePolicyIdentifierOptional& signaturePolicyIdentifier();

	void signaturePolicyIdentifier( const SignaturePolicyIdentifierType& x );

	void signaturePolicyIdentifier( const SignaturePolicyIdentifierOptional& x );

	void signaturePolicyIdentifier( ::std::auto_ptr< SignaturePolicyIdentifierType > p );

	// SignatureProductionPlace
	//
	typedef ::xades::SignatureProductionPlace SignatureProductionPlaceType;
	typedef ::xsd::cxx::tree::optional< SignatureProductionPlaceType > SignatureProductionPlaceOptional;
	typedef ::xsd::cxx::tree::traits< SignatureProductionPlaceType, char > SignatureProductionPlaceTraits;

	const SignatureProductionPlaceOptional& signatureProductionPlace() const;

	SignatureProductionPlaceOptional& signatureProductionPlace();

	void signatureProductionPlace( const SignatureProductionPlaceType& x );

	void signatureProductionPlace( const SignatureProductionPlaceOptional& x );

	void signatureProductionPlace( ::std::auto_ptr< SignatureProductionPlaceType > p );

	// SignerRole
	//
	typedef ::xades::SignerRole SignerRoleType;
	typedef ::xsd::cxx::tree::optional< SignerRoleType > SignerRoleOptional;
	typedef ::xsd::cxx::tree::traits< SignerRoleType, char > SignerRoleTraits;

	const SignerRoleOptional& signerRole() const;

	SignerRoleOptional& signerRole();

	void signerRole( const SignerRoleType& x );

	void signerRole( const SignerRoleOptional& x );

	void signerRole( ::std::auto_ptr< SignerRoleType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	SignedSignatureProperties();

	SignedSignatureProperties( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignedSignatureProperties( const SignedSignatureProperties& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignedSignatureProperties* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignedSignatureProperties();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	SigningTimeOptional SigningTime_;
	SigningCertificateOptional SigningCertificate_;
	SignaturePolicyIdentifierOptional SignaturePolicyIdentifier_;
	SignatureProductionPlaceOptional SignatureProductionPlace_;
	SignerRoleOptional SignerRole_;
	IdOptional Id_;
};

class SignedDataObjectProperties: public ::xml_schema::Type
{
public:
	// DataObjectFormat
	//
	typedef ::xades::DataObjectFormat DataObjectFormatType;
	typedef ::xsd::cxx::tree::sequence< DataObjectFormatType > DataObjectFormatSequence;
	typedef DataObjectFormatSequence::iterator DataObjectFormatIterator;
	typedef DataObjectFormatSequence::const_iterator DataObjectFormatConstIterator;
	typedef ::xsd::cxx::tree::traits< DataObjectFormatType, char > DataObjectFormatTraits;

	const DataObjectFormatSequence& dataObjectFormat() const;

	DataObjectFormatSequence& dataObjectFormat();

	void dataObjectFormat( const DataObjectFormatSequence& s );

	// CommitmentTypeIndication
	//
	typedef ::xades::CommitmentTypeIndication CommitmentTypeIndicationType;
	typedef ::xsd::cxx::tree::sequence< CommitmentTypeIndicationType > CommitmentTypeIndicationSequence;
	typedef CommitmentTypeIndicationSequence::iterator CommitmentTypeIndicationIterator;
	typedef CommitmentTypeIndicationSequence::const_iterator CommitmentTypeIndicationConstIterator;
	typedef ::xsd::cxx::tree::traits< CommitmentTypeIndicationType, char > CommitmentTypeIndicationTraits;

	const CommitmentTypeIndicationSequence& commitmentTypeIndication() const;

	CommitmentTypeIndicationSequence& commitmentTypeIndication();

	void commitmentTypeIndication( const CommitmentTypeIndicationSequence& s );

	// AllDataObjectsTimeStamp
	//
	typedef ::xades::XAdESTimeStamp AllDataObjectsTimeStampType;
	typedef ::xsd::cxx::tree::sequence< AllDataObjectsTimeStampType > AllDataObjectsTimeStampSequence;
	typedef AllDataObjectsTimeStampSequence::iterator AllDataObjectsTimeStampIterator;
	typedef AllDataObjectsTimeStampSequence::const_iterator AllDataObjectsTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< AllDataObjectsTimeStampType, char > AllDataObjectsTimeStampTraits;

	const AllDataObjectsTimeStampSequence& allDataObjectsTimeStamp() const;

	AllDataObjectsTimeStampSequence& allDataObjectsTimeStamp();

	void allDataObjectsTimeStamp( const AllDataObjectsTimeStampSequence& s );

	// IndividualDataObjectsTimeStamp
	//
	typedef ::xades::XAdESTimeStamp IndividualDataObjectsTimeStampType;
	typedef ::xsd::cxx::tree::sequence< IndividualDataObjectsTimeStampType > IndividualDataObjectsTimeStampSequence;
	typedef IndividualDataObjectsTimeStampSequence::iterator IndividualDataObjectsTimeStampIterator;
	typedef IndividualDataObjectsTimeStampSequence::const_iterator IndividualDataObjectsTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< IndividualDataObjectsTimeStampType, char > IndividualDataObjectsTimeStampTraits;

	const IndividualDataObjectsTimeStampSequence& individualDataObjectsTimeStamp() const;

	IndividualDataObjectsTimeStampSequence& individualDataObjectsTimeStamp();

	void individualDataObjectsTimeStamp( const IndividualDataObjectsTimeStampSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	SignedDataObjectProperties();

	SignedDataObjectProperties( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignedDataObjectProperties( const SignedDataObjectProperties& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignedDataObjectProperties* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignedDataObjectProperties();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	DataObjectFormatSequence DataObjectFormat_;
	CommitmentTypeIndicationSequence CommitmentTypeIndication_;
	AllDataObjectsTimeStampSequence AllDataObjectsTimeStamp_;
	IndividualDataObjectsTimeStampSequence IndividualDataObjectsTimeStamp_;
	IdOptional Id_;
};

class UnsignedSignatureProperties: public ::xml_schema::Type
{
public:
	// CounterSignature
	//
	typedef ::xades::CounterSignature CounterSignatureType;
	typedef ::xsd::cxx::tree::sequence< CounterSignatureType > CounterSignatureSequence;
	typedef CounterSignatureSequence::iterator CounterSignatureIterator;
	typedef CounterSignatureSequence::const_iterator CounterSignatureConstIterator;
	typedef ::xsd::cxx::tree::traits< CounterSignatureType, char > CounterSignatureTraits;

	const CounterSignatureSequence& counterSignature() const;

	CounterSignatureSequence& counterSignature();

	void counterSignature( const CounterSignatureSequence& s );

	// SignatureTimeStamp
	//
	typedef ::xades::XAdESTimeStamp SignatureTimeStampType;
	typedef ::xsd::cxx::tree::sequence< SignatureTimeStampType > SignatureTimeStampSequence;
	typedef SignatureTimeStampSequence::iterator SignatureTimeStampIterator;
	typedef SignatureTimeStampSequence::const_iterator SignatureTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< SignatureTimeStampType, char > SignatureTimeStampTraits;

	const SignatureTimeStampSequence& signatureTimeStamp() const;

	SignatureTimeStampSequence& signatureTimeStamp();

	void signatureTimeStamp( const SignatureTimeStampSequence& s );

	// CompleteCertificateRefs
	//
	typedef ::xades::CompleteCertificateRefs CompleteCertificateRefsType;
	typedef ::xsd::cxx::tree::sequence< CompleteCertificateRefsType > CompleteCertificateRefsSequence;
	typedef CompleteCertificateRefsSequence::iterator CompleteCertificateRefsIterator;
	typedef CompleteCertificateRefsSequence::const_iterator CompleteCertificateRefsConstIterator;
	typedef ::xsd::cxx::tree::traits< CompleteCertificateRefsType, char > CompleteCertificateRefsTraits;

	const CompleteCertificateRefsSequence& completeCertificateRefs() const;

	CompleteCertificateRefsSequence& completeCertificateRefs();

	void completeCertificateRefs( const CompleteCertificateRefsSequence& s );

	// CompleteRevocationRefs
	//
	typedef ::xades::CompleteRevocationRefs CompleteRevocationRefsType;
	typedef ::xsd::cxx::tree::sequence< CompleteRevocationRefsType > CompleteRevocationRefsSequence;
	typedef CompleteRevocationRefsSequence::iterator CompleteRevocationRefsIterator;
	typedef CompleteRevocationRefsSequence::const_iterator CompleteRevocationRefsConstIterator;
	typedef ::xsd::cxx::tree::traits< CompleteRevocationRefsType, char > CompleteRevocationRefsTraits;

	const CompleteRevocationRefsSequence& completeRevocationRefs() const;

	CompleteRevocationRefsSequence& completeRevocationRefs();

	void completeRevocationRefs( const CompleteRevocationRefsSequence& s );

	// AttributeCertificateRefs
	//
	typedef ::xades::CompleteCertificateRefs AttributeCertificateRefsType;
	typedef ::xsd::cxx::tree::sequence< AttributeCertificateRefsType > AttributeCertificateRefsSequence;
	typedef AttributeCertificateRefsSequence::iterator AttributeCertificateRefsIterator;
	typedef AttributeCertificateRefsSequence::const_iterator AttributeCertificateRefsConstIterator;
	typedef ::xsd::cxx::tree::traits< AttributeCertificateRefsType, char > AttributeCertificateRefsTraits;

	const AttributeCertificateRefsSequence& attributeCertificateRefs() const;

	AttributeCertificateRefsSequence& attributeCertificateRefs();

	void attributeCertificateRefs( const AttributeCertificateRefsSequence& s );

	// AttributeRevocationRefs
	//
	typedef ::xades::CompleteRevocationRefs AttributeRevocationRefsType;
	typedef ::xsd::cxx::tree::sequence< AttributeRevocationRefsType > AttributeRevocationRefsSequence;
	typedef AttributeRevocationRefsSequence::iterator AttributeRevocationRefsIterator;
	typedef AttributeRevocationRefsSequence::const_iterator AttributeRevocationRefsConstIterator;
	typedef ::xsd::cxx::tree::traits< AttributeRevocationRefsType, char > AttributeRevocationRefsTraits;

	const AttributeRevocationRefsSequence& attributeRevocationRefs() const;

	AttributeRevocationRefsSequence& attributeRevocationRefs();

	void attributeRevocationRefs( const AttributeRevocationRefsSequence& s );

	// SigAndRefsTimeStamp
	//
	typedef ::xades::XAdESTimeStamp SigAndRefsTimeStampType;
	typedef ::xsd::cxx::tree::sequence< SigAndRefsTimeStampType > SigAndRefsTimeStampSequence;
	typedef SigAndRefsTimeStampSequence::iterator SigAndRefsTimeStampIterator;
	typedef SigAndRefsTimeStampSequence::const_iterator SigAndRefsTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< SigAndRefsTimeStampType, char > SigAndRefsTimeStampTraits;

	const SigAndRefsTimeStampSequence& sigAndRefsTimeStamp() const;

	SigAndRefsTimeStampSequence& sigAndRefsTimeStamp();

	void sigAndRefsTimeStamp( const SigAndRefsTimeStampSequence& s );

	// RefsOnlyTimeStamp
	//
	typedef ::xades::XAdESTimeStamp RefsOnlyTimeStampType;
	typedef ::xsd::cxx::tree::sequence< RefsOnlyTimeStampType > RefsOnlyTimeStampSequence;
	typedef RefsOnlyTimeStampSequence::iterator RefsOnlyTimeStampIterator;
	typedef RefsOnlyTimeStampSequence::const_iterator RefsOnlyTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< RefsOnlyTimeStampType, char > RefsOnlyTimeStampTraits;

	const RefsOnlyTimeStampSequence& refsOnlyTimeStamp() const;

	RefsOnlyTimeStampSequence& refsOnlyTimeStamp();

	void refsOnlyTimeStamp( const RefsOnlyTimeStampSequence& s );

	// CertificateValues
	//
	typedef ::xades::CertificateValues CertificateValuesType;
	typedef ::xsd::cxx::tree::sequence< CertificateValuesType > CertificateValuesSequence;
	typedef CertificateValuesSequence::iterator CertificateValuesIterator;
	typedef CertificateValuesSequence::const_iterator CertificateValuesConstIterator;
	typedef ::xsd::cxx::tree::traits< CertificateValuesType, char > CertificateValuesTraits;

	const CertificateValuesSequence& certificateValues() const;

	CertificateValuesSequence& certificateValues();

	void certificateValues( const CertificateValuesSequence& s );

	// RevocationValues
	//
	typedef ::xades::RevocationValues RevocationValuesType;
	typedef ::xsd::cxx::tree::sequence< RevocationValuesType > RevocationValuesSequence;
	typedef RevocationValuesSequence::iterator RevocationValuesIterator;
	typedef RevocationValuesSequence::const_iterator RevocationValuesConstIterator;
	typedef ::xsd::cxx::tree::traits< RevocationValuesType, char > RevocationValuesTraits;

	const RevocationValuesSequence& revocationValues() const;

	RevocationValuesSequence& revocationValues();

	void revocationValues( const RevocationValuesSequence& s );

	// AttrAuthoritiesCertValues
	//
	typedef ::xades::CertificateValues AttrAuthoritiesCertValuesType;
	typedef ::xsd::cxx::tree::sequence< AttrAuthoritiesCertValuesType > AttrAuthoritiesCertValuesSequence;
	typedef AttrAuthoritiesCertValuesSequence::iterator AttrAuthoritiesCertValuesIterator;
	typedef AttrAuthoritiesCertValuesSequence::const_iterator AttrAuthoritiesCertValuesConstIterator;
	typedef ::xsd::cxx::tree::traits< AttrAuthoritiesCertValuesType, char > AttrAuthoritiesCertValuesTraits;

	const AttrAuthoritiesCertValuesSequence& attrAuthoritiesCertValues() const;

	AttrAuthoritiesCertValuesSequence& attrAuthoritiesCertValues();

	void attrAuthoritiesCertValues( const AttrAuthoritiesCertValuesSequence& s );

	// AttributeRevocationValues
	//
	typedef ::xades::RevocationValues AttributeRevocationValuesType;
	typedef ::xsd::cxx::tree::sequence< AttributeRevocationValuesType > AttributeRevocationValuesSequence;
	typedef AttributeRevocationValuesSequence::iterator AttributeRevocationValuesIterator;
	typedef AttributeRevocationValuesSequence::const_iterator AttributeRevocationValuesConstIterator;
	typedef ::xsd::cxx::tree::traits< AttributeRevocationValuesType, char > AttributeRevocationValuesTraits;

	const AttributeRevocationValuesSequence& attributeRevocationValues() const;

	AttributeRevocationValuesSequence& attributeRevocationValues();

	void attributeRevocationValues( const AttributeRevocationValuesSequence& s );

	// ArchiveTimeStamp
	//
	typedef ::xades::XAdESTimeStamp ArchiveTimeStampType;
	typedef ::xsd::cxx::tree::sequence< ArchiveTimeStampType > ArchiveTimeStampSequence;
	typedef ArchiveTimeStampSequence::iterator ArchiveTimeStampIterator;
	typedef ArchiveTimeStampSequence::const_iterator ArchiveTimeStampConstIterator;
	typedef ::xsd::cxx::tree::traits< ArchiveTimeStampType, char > ArchiveTimeStampTraits;

	const ArchiveTimeStampSequence& archiveTimeStamp() const;

	ArchiveTimeStampSequence& archiveTimeStamp();

	void archiveTimeStamp( const ArchiveTimeStampSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	UnsignedSignatureProperties();

	UnsignedSignatureProperties( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	UnsignedSignatureProperties( const UnsignedSignatureProperties& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual UnsignedSignatureProperties* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~UnsignedSignatureProperties();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	CounterSignatureSequence CounterSignature_;
	SignatureTimeStampSequence SignatureTimeStamp_;
	CompleteCertificateRefsSequence CompleteCertificateRefs_;
	CompleteRevocationRefsSequence CompleteRevocationRefs_;
	AttributeCertificateRefsSequence AttributeCertificateRefs_;
	AttributeRevocationRefsSequence AttributeRevocationRefs_;
	SigAndRefsTimeStampSequence SigAndRefsTimeStamp_;
	RefsOnlyTimeStampSequence RefsOnlyTimeStamp_;
	CertificateValuesSequence CertificateValues_;
	RevocationValuesSequence RevocationValues_;
	AttrAuthoritiesCertValuesSequence AttrAuthoritiesCertValues_;
	AttributeRevocationValuesSequence AttributeRevocationValues_;
	ArchiveTimeStampSequence ArchiveTimeStamp_;
	IdOptional Id_;
};

class UnsignedDataObjectProperties: public ::xml_schema::Type
{
public:
	// UnsignedDataObjectProperty
	//
	typedef ::xades::Any UnsignedDataObjectPropertyType;
	typedef ::xsd::cxx::tree::sequence< UnsignedDataObjectPropertyType > UnsignedDataObjectPropertySequence;
	typedef UnsignedDataObjectPropertySequence::iterator UnsignedDataObjectPropertyIterator;
	typedef UnsignedDataObjectPropertySequence::const_iterator UnsignedDataObjectPropertyConstIterator;
	typedef ::xsd::cxx::tree::traits< UnsignedDataObjectPropertyType, char > UnsignedDataObjectPropertyTraits;

	const UnsignedDataObjectPropertySequence& unsignedDataObjectProperty() const;

	UnsignedDataObjectPropertySequence& unsignedDataObjectProperty();

	void unsignedDataObjectProperty( const UnsignedDataObjectPropertySequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	UnsignedDataObjectProperties();

	UnsignedDataObjectProperties( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	UnsignedDataObjectProperties( const UnsignedDataObjectProperties& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual UnsignedDataObjectProperties* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~UnsignedDataObjectProperties();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	UnsignedDataObjectPropertySequence UnsignedDataObjectProperty_;
	IdOptional Id_;
};

class QualifyingPropertiesReference: public ::xml_schema::Type
{
public:
	// URI
	//
	typedef ::xml_schema::Uri URIType;
	typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

	const URIType& uRI() const;

	URIType& uRI();

	void uRI( const URIType& x );

	void uRI( ::std::auto_ptr< URIType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	QualifyingPropertiesReference( const URIType& );

	QualifyingPropertiesReference( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	QualifyingPropertiesReference( const QualifyingPropertiesReference& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual QualifyingPropertiesReference* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~QualifyingPropertiesReference();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< URIType > URI_;
	IdOptional Id_;
};

class CertIDList: public ::xml_schema::Type
{
public:
	// Cert
	//
	typedef ::xades::CertID CertType;
	typedef ::xsd::cxx::tree::sequence< CertType > CertSequence;
	typedef CertSequence::iterator CertIterator;
	typedef CertSequence::const_iterator CertConstIterator;
	typedef ::xsd::cxx::tree::traits< CertType, char > CertTraits;

	const CertSequence& cert() const;

	CertSequence& cert();

	void cert( const CertSequence& s );

	// Constructors.
	//
	CertIDList();

	CertIDList( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CertIDList( const CertIDList& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CertIDList* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CertIDList();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	CertSequence Cert_;
};

class CertID: public ::xml_schema::Type
{
public:
	// CertDigest
	//
	typedef ::xades::DigestAlgAndValue CertDigestType;
	typedef ::xsd::cxx::tree::traits< CertDigestType, char > CertDigestTraits;

	const CertDigestType& certDigest() const;

	CertDigestType& certDigest();

	void certDigest( const CertDigestType& x );

	void certDigest( ::std::auto_ptr< CertDigestType > p );

	// IssuerSerial
	//
	typedef ::ds::X509IssuerSerial IssuerSerialType;
	typedef ::xsd::cxx::tree::traits< IssuerSerialType, char > IssuerSerialTraits;

	const IssuerSerialType& issuerSerial() const;

	IssuerSerialType& issuerSerial();

	void issuerSerial( const IssuerSerialType& x );

	void issuerSerial( ::std::auto_ptr< IssuerSerialType > p );

	// URI
	//
	typedef ::xml_schema::Uri URIType;
	typedef ::xsd::cxx::tree::optional< URIType > URIOptional;
	typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

	const URIOptional& uRI() const;

	URIOptional& uRI();

	void uRI( const URIType& x );

	void uRI( const URIOptional& x );

	void uRI( ::std::auto_ptr< URIType > p );

	// Constructors.
	//
	CertID( const CertDigestType&, const IssuerSerialType& );

	CertID( ::std::auto_ptr< CertDigestType >&, ::std::auto_ptr< IssuerSerialType >& );

	CertID( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CertID( const CertID& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CertID* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CertID();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< CertDigestType > CertDigest_;
	::xsd::cxx::tree::one< IssuerSerialType > IssuerSerial_;
	URIOptional URI_;
};

class DigestAlgAndValue: public ::xml_schema::Type
{
public:
	// DigestMethod
	//
	typedef ::ds::DigestMethod DigestMethodType;
	typedef ::xsd::cxx::tree::traits< DigestMethodType, char > DigestMethodTraits;

	const DigestMethodType& digestMethod() const;

	DigestMethodType& digestMethod();

	void digestMethod( const DigestMethodType& x );

	void digestMethod( ::std::auto_ptr< DigestMethodType > p );

	// DigestValue
	//
	typedef ::ds::DigestValue DigestValueType;
	typedef ::xsd::cxx::tree::traits< DigestValueType, char > DigestValueTraits;

	const DigestValueType& digestValue() const;

	DigestValueType& digestValue();

	void digestValue( const DigestValueType& x );

	void digestValue( ::std::auto_ptr< DigestValueType > p );

	// Constructors.
	//
	DigestAlgAndValue( const DigestMethodType&, const DigestValueType& );

	DigestAlgAndValue( ::std::auto_ptr< DigestMethodType >&, const DigestValueType& );

	DigestAlgAndValue( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	DigestAlgAndValue( const DigestAlgAndValue& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual DigestAlgAndValue* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~DigestAlgAndValue();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< DigestMethodType > DigestMethod_;
	::xsd::cxx::tree::one< DigestValueType > DigestValue_;
};

class SignaturePolicyIdentifier: public ::xml_schema::Type
{
public:
	// SignaturePolicyId
	//
	typedef ::xades::SignaturePolicyId SignaturePolicyIdType;
	typedef ::xsd::cxx::tree::optional< SignaturePolicyIdType > SignaturePolicyIdOptional;
	typedef ::xsd::cxx::tree::traits< SignaturePolicyIdType, char > SignaturePolicyIdTraits;

	const SignaturePolicyIdOptional& signaturePolicyId() const;

	SignaturePolicyIdOptional& signaturePolicyId();

	void signaturePolicyId( const SignaturePolicyIdType& x );

	void signaturePolicyId( const SignaturePolicyIdOptional& x );

	void signaturePolicyId( ::std::auto_ptr< SignaturePolicyIdType > p );

	// SignaturePolicyImplied
	//
	typedef ::xml_schema::Type SignaturePolicyImpliedType;
	typedef ::xsd::cxx::tree::optional< SignaturePolicyImpliedType > SignaturePolicyImpliedOptional;
	typedef ::xsd::cxx::tree::traits< SignaturePolicyImpliedType, char > SignaturePolicyImpliedTraits;

	const SignaturePolicyImpliedOptional& signaturePolicyImplied() const;

	SignaturePolicyImpliedOptional& signaturePolicyImplied();

	void signaturePolicyImplied( const SignaturePolicyImpliedType& x );

	void signaturePolicyImplied( const SignaturePolicyImpliedOptional& x );

	void signaturePolicyImplied( ::std::auto_ptr< SignaturePolicyImpliedType > p );

	// Constructors.
	//
	SignaturePolicyIdentifier();

	SignaturePolicyIdentifier( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignaturePolicyIdentifier( const SignaturePolicyIdentifier& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignaturePolicyIdentifier* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignaturePolicyIdentifier();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	SignaturePolicyIdOptional SignaturePolicyId_;
	SignaturePolicyImpliedOptional SignaturePolicyImplied_;
};

class SignaturePolicyId: public ::xml_schema::Type
{
public:
	// SigPolicyId
	//
	typedef ::xades::ObjectIdentifier SigPolicyIdType;
	typedef ::xsd::cxx::tree::traits< SigPolicyIdType, char > SigPolicyIdTraits;

	const SigPolicyIdType& sigPolicyId() const;

	SigPolicyIdType& sigPolicyId();

	void sigPolicyId( const SigPolicyIdType& x );

	void sigPolicyId( ::std::auto_ptr< SigPolicyIdType > p );

	// Transforms
	//
	typedef ::ds::Transforms TransformsType;
	typedef ::xsd::cxx::tree::optional< TransformsType > TransformsOptional;
	typedef ::xsd::cxx::tree::traits< TransformsType, char > TransformsTraits;

	const TransformsOptional& transforms() const;

	TransformsOptional& transforms();

	void transforms( const TransformsType& x );

	void transforms( const TransformsOptional& x );

	void transforms( ::std::auto_ptr< TransformsType > p );

	// SigPolicyHash
	//
	typedef ::xades::DigestAlgAndValue SigPolicyHashType;
	typedef ::xsd::cxx::tree::traits< SigPolicyHashType, char > SigPolicyHashTraits;

	const SigPolicyHashType& sigPolicyHash() const;

	SigPolicyHashType& sigPolicyHash();

	void sigPolicyHash( const SigPolicyHashType& x );

	void sigPolicyHash( ::std::auto_ptr< SigPolicyHashType > p );

	// SigPolicyQualifiers
	//
	typedef ::xades::SigPolicyQualifiersList SigPolicyQualifiersType;
	typedef ::xsd::cxx::tree::optional< SigPolicyQualifiersType > SigPolicyQualifiersOptional;
	typedef ::xsd::cxx::tree::traits< SigPolicyQualifiersType, char > SigPolicyQualifiersTraits;

	const SigPolicyQualifiersOptional& sigPolicyQualifiers() const;

	SigPolicyQualifiersOptional& sigPolicyQualifiers();

	void sigPolicyQualifiers( const SigPolicyQualifiersType& x );

	void sigPolicyQualifiers( const SigPolicyQualifiersOptional& x );

	void sigPolicyQualifiers( ::std::auto_ptr< SigPolicyQualifiersType > p );

	// Constructors.
	//
	SignaturePolicyId( const SigPolicyIdType&, const SigPolicyHashType& );

	SignaturePolicyId( ::std::auto_ptr< SigPolicyIdType >&, ::std::auto_ptr< SigPolicyHashType >& );

	SignaturePolicyId( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignaturePolicyId( const SignaturePolicyId& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignaturePolicyId* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignaturePolicyId();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< SigPolicyIdType > SigPolicyId_;
	TransformsOptional Transforms_;
	::xsd::cxx::tree::one< SigPolicyHashType > SigPolicyHash_;
	SigPolicyQualifiersOptional SigPolicyQualifiers_;
};

class SigPolicyQualifiersList: public ::xml_schema::Type
{
public:
	// SigPolicyQualifier
	//
	typedef ::xades::Any SigPolicyQualifierType;
	typedef ::xsd::cxx::tree::sequence< SigPolicyQualifierType > SigPolicyQualifierSequence;
	typedef SigPolicyQualifierSequence::iterator SigPolicyQualifierIterator;
	typedef SigPolicyQualifierSequence::const_iterator SigPolicyQualifierConstIterator;
	typedef ::xsd::cxx::tree::traits< SigPolicyQualifierType, char > SigPolicyQualifierTraits;

	const SigPolicyQualifierSequence& sigPolicyQualifier() const;

	SigPolicyQualifierSequence& sigPolicyQualifier();

	void sigPolicyQualifier( const SigPolicyQualifierSequence& s );

	// Constructors.
	//
	SigPolicyQualifiersList();

	SigPolicyQualifiersList( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SigPolicyQualifiersList( const SigPolicyQualifiersList& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SigPolicyQualifiersList* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SigPolicyQualifiersList();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	SigPolicyQualifierSequence SigPolicyQualifier_;
};

class SPUserNotice: public ::xml_schema::Type
{
public:
	// NoticeRef
	//
	typedef ::xades::NoticeReference NoticeRefType;
	typedef ::xsd::cxx::tree::optional< NoticeRefType > NoticeRefOptional;
	typedef ::xsd::cxx::tree::traits< NoticeRefType, char > NoticeRefTraits;

	const NoticeRefOptional& noticeRef() const;

	NoticeRefOptional& noticeRef();

	void noticeRef( const NoticeRefType& x );

	void noticeRef( const NoticeRefOptional& x );

	void noticeRef( ::std::auto_ptr< NoticeRefType > p );

	// ExplicitText
	//
	typedef ::xml_schema::String ExplicitTextType;
	typedef ::xsd::cxx::tree::optional< ExplicitTextType > ExplicitTextOptional;
	typedef ::xsd::cxx::tree::traits< ExplicitTextType, char > ExplicitTextTraits;

	const ExplicitTextOptional& explicitText() const;

	ExplicitTextOptional& explicitText();

	void explicitText( const ExplicitTextType& x );

	void explicitText( const ExplicitTextOptional& x );

	void explicitText( ::std::auto_ptr< ExplicitTextType > p );

	// Constructors.
	//
	SPUserNotice();

	SPUserNotice( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SPUserNotice( const SPUserNotice& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SPUserNotice* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SPUserNotice();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	NoticeRefOptional NoticeRef_;
	ExplicitTextOptional ExplicitText_;
};

class NoticeReference: public ::xml_schema::Type
{
public:
	// Organization
	//
	typedef ::xml_schema::String OrganizationType;
	typedef ::xsd::cxx::tree::traits< OrganizationType, char > OrganizationTraits;

	const OrganizationType& organization() const;

	OrganizationType& organization();

	void organization( const OrganizationType& x );

	void organization( ::std::auto_ptr< OrganizationType > p );

	// NoticeNumbers
	//
	typedef ::xades::IntegerList NoticeNumbersType;
	typedef ::xsd::cxx::tree::traits< NoticeNumbersType, char > NoticeNumbersTraits;

	const NoticeNumbersType& noticeNumbers() const;

	NoticeNumbersType& noticeNumbers();

	void noticeNumbers( const NoticeNumbersType& x );

	void noticeNumbers( ::std::auto_ptr< NoticeNumbersType > p );

	// Constructors.
	//
	NoticeReference( const OrganizationType&, const NoticeNumbersType& );

	NoticeReference( const OrganizationType&, ::std::auto_ptr< NoticeNumbersType >& );

	NoticeReference( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	NoticeReference( const NoticeReference& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual NoticeReference* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~NoticeReference();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< OrganizationType > Organization_;
	::xsd::cxx::tree::one< NoticeNumbersType > NoticeNumbers_;
};

class IntegerList: public ::xml_schema::Type
{
public:
	// int
	//
	typedef ::xml_schema::Integer IntType;
	typedef ::xsd::cxx::tree::sequence< IntType > IntSequence;
	typedef IntSequence::iterator IntIterator;
	typedef IntSequence::const_iterator IntConstIterator;
	typedef ::xsd::cxx::tree::traits< IntType, char > IntTraits;

	const IntSequence& int_() const;

	IntSequence& int_();

	void int_( const IntSequence& s );

	// Constructors.
	//
	IntegerList();

	IntegerList( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	IntegerList( const IntegerList& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual IntegerList* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~IntegerList();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	IntSequence int__;
};

class CounterSignature: public ::xml_schema::Type
{
public:
	// Signature
	//
	typedef ::ds::Signature SignatureType;
	typedef ::xsd::cxx::tree::traits< SignatureType, char > SignatureTraits;

	const SignatureType& signature() const;

	SignatureType& signature();

	void signature( const SignatureType& x );

	void signature( ::std::auto_ptr< SignatureType > p );

	// Constructors.
	//
	CounterSignature( const SignatureType& );

	CounterSignature( ::std::auto_ptr< SignatureType >& );

	CounterSignature( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CounterSignature( const CounterSignature& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CounterSignature* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CounterSignature();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< SignatureType > Signature_;
};

class DataObjectFormat: public ::xml_schema::Type
{
public:
	// Description
	//
	typedef ::xml_schema::String DescriptionType;
	typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;
	typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

	const DescriptionOptional& description() const;

	DescriptionOptional& description();

	void description( const DescriptionType& x );

	void description( const DescriptionOptional& x );

	void description( ::std::auto_ptr< DescriptionType > p );

	// ObjectIdentifier
	//
	typedef ::xades::ObjectIdentifier ObjectIdentifierType;
	typedef ::xsd::cxx::tree::optional< ObjectIdentifierType > ObjectIdentifierOptional;
	typedef ::xsd::cxx::tree::traits< ObjectIdentifierType, char > ObjectIdentifierTraits;

	const ObjectIdentifierOptional& objectIdentifier() const;

	ObjectIdentifierOptional& objectIdentifier();

	void objectIdentifier( const ObjectIdentifierType& x );

	void objectIdentifier( const ObjectIdentifierOptional& x );

	void objectIdentifier( ::std::auto_ptr< ObjectIdentifierType > p );

	// MimeType
	//
	typedef ::xml_schema::String MimeTypeType;
	typedef ::xsd::cxx::tree::optional< MimeTypeType > MimeTypeOptional;
	typedef ::xsd::cxx::tree::traits< MimeTypeType, char > MimeTypeTraits;

	const MimeTypeOptional& mimeType() const;

	MimeTypeOptional& mimeType();

	void mimeType( const MimeTypeType& x );

	void mimeType( const MimeTypeOptional& x );

	void mimeType( ::std::auto_ptr< MimeTypeType > p );

	// Encoding
	//
	typedef ::xml_schema::Uri EncodingType;
	typedef ::xsd::cxx::tree::optional< EncodingType > EncodingOptional;
	typedef ::xsd::cxx::tree::traits< EncodingType, char > EncodingTraits;

	const EncodingOptional& encoding() const;

	EncodingOptional& encoding();

	void encoding( const EncodingType& x );

	void encoding( const EncodingOptional& x );

	void encoding( ::std::auto_ptr< EncodingType > p );

	// ObjectReference
	//
	typedef ::xml_schema::Uri ObjectReferenceType;
	typedef ::xsd::cxx::tree::traits< ObjectReferenceType, char > ObjectReferenceTraits;

	const ObjectReferenceType& objectReference() const;

	ObjectReferenceType& objectReference();

	void objectReference( const ObjectReferenceType& x );

	void objectReference( ::std::auto_ptr< ObjectReferenceType > p );

	// Constructors.
	//
	DataObjectFormat( const ObjectReferenceType& );

	DataObjectFormat( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	DataObjectFormat( const DataObjectFormat& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual DataObjectFormat* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~DataObjectFormat();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	DescriptionOptional Description_;
	ObjectIdentifierOptional ObjectIdentifier_;
	MimeTypeOptional MimeType_;
	EncodingOptional Encoding_;
	::xsd::cxx::tree::one< ObjectReferenceType > ObjectReference_;
};

class CommitmentTypeIndication: public ::xml_schema::Type
{
public:
	// CommitmentTypeId
	//
	typedef ::xades::ObjectIdentifier CommitmentTypeIdType;
	typedef ::xsd::cxx::tree::traits< CommitmentTypeIdType, char > CommitmentTypeIdTraits;

	const CommitmentTypeIdType& commitmentTypeId() const;

	CommitmentTypeIdType& commitmentTypeId();

	void commitmentTypeId( const CommitmentTypeIdType& x );

	void commitmentTypeId( ::std::auto_ptr< CommitmentTypeIdType > p );

	// ObjectReference
	//
	typedef ::xml_schema::Uri ObjectReferenceType;
	typedef ::xsd::cxx::tree::sequence< ObjectReferenceType > ObjectReferenceSequence;
	typedef ObjectReferenceSequence::iterator ObjectReferenceIterator;
	typedef ObjectReferenceSequence::const_iterator ObjectReferenceConstIterator;
	typedef ::xsd::cxx::tree::traits< ObjectReferenceType, char > ObjectReferenceTraits;

	const ObjectReferenceSequence& objectReference() const;

	ObjectReferenceSequence& objectReference();

	void objectReference( const ObjectReferenceSequence& s );

	// AllSignedDataObjects
	//
	typedef ::xml_schema::Type AllSignedDataObjectsType;
	typedef ::xsd::cxx::tree::optional< AllSignedDataObjectsType > AllSignedDataObjectsOptional;
	typedef ::xsd::cxx::tree::traits< AllSignedDataObjectsType, char > AllSignedDataObjectsTraits;

	const AllSignedDataObjectsOptional& allSignedDataObjects() const;

	AllSignedDataObjectsOptional& allSignedDataObjects();

	void allSignedDataObjects( const AllSignedDataObjectsType& x );

	void allSignedDataObjects( const AllSignedDataObjectsOptional& x );

	void allSignedDataObjects( ::std::auto_ptr< AllSignedDataObjectsType > p );

	// CommitmentTypeQualifiers
	//
	typedef ::xades::CommitmentTypeQualifiersList CommitmentTypeQualifiersType;
	typedef ::xsd::cxx::tree::optional< CommitmentTypeQualifiersType > CommitmentTypeQualifiersOptional;
	typedef ::xsd::cxx::tree::traits< CommitmentTypeQualifiersType, char > CommitmentTypeQualifiersTraits;

	const CommitmentTypeQualifiersOptional& commitmentTypeQualifiers() const;

	CommitmentTypeQualifiersOptional& commitmentTypeQualifiers();

	void commitmentTypeQualifiers( const CommitmentTypeQualifiersType& x );

	void commitmentTypeQualifiers( const CommitmentTypeQualifiersOptional& x );

	void commitmentTypeQualifiers( ::std::auto_ptr< CommitmentTypeQualifiersType > p );

	// Constructors.
	//
	CommitmentTypeIndication( const CommitmentTypeIdType& );

	CommitmentTypeIndication( ::std::auto_ptr< CommitmentTypeIdType >& );

	CommitmentTypeIndication( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CommitmentTypeIndication( const CommitmentTypeIndication& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CommitmentTypeIndication* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CommitmentTypeIndication();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	::xsd::cxx::tree::one< CommitmentTypeIdType > CommitmentTypeId_;
	ObjectReferenceSequence ObjectReference_;
	AllSignedDataObjectsOptional AllSignedDataObjects_;
	CommitmentTypeQualifiersOptional CommitmentTypeQualifiers_;
};

class CommitmentTypeQualifiersList: public ::xml_schema::Type
{
public:
	// CommitmentTypeQualifier
	//
	typedef ::xades::Any CommitmentTypeQualifierType;
	typedef ::xsd::cxx::tree::sequence< CommitmentTypeQualifierType > CommitmentTypeQualifierSequence;
	typedef CommitmentTypeQualifierSequence::iterator CommitmentTypeQualifierIterator;
	typedef CommitmentTypeQualifierSequence::const_iterator CommitmentTypeQualifierConstIterator;
	typedef ::xsd::cxx::tree::traits< CommitmentTypeQualifierType, char > CommitmentTypeQualifierTraits;

	const CommitmentTypeQualifierSequence& commitmentTypeQualifier() const;

	CommitmentTypeQualifierSequence& commitmentTypeQualifier();

	void commitmentTypeQualifier( const CommitmentTypeQualifierSequence& s );

	// Constructors.
	//
	CommitmentTypeQualifiersList();

	CommitmentTypeQualifiersList( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CommitmentTypeQualifiersList( const CommitmentTypeQualifiersList& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CommitmentTypeQualifiersList* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CommitmentTypeQualifiersList();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	CommitmentTypeQualifierSequence CommitmentTypeQualifier_;
};

class SignatureProductionPlace: public ::xml_schema::Type
{
public:
	// City
	//
	typedef ::xml_schema::String CityType;
	typedef ::xsd::cxx::tree::optional< CityType > CityOptional;
	typedef ::xsd::cxx::tree::traits< CityType, char > CityTraits;

	const CityOptional& city() const;

	CityOptional& city();

	void city( const CityType& x );

	void city( const CityOptional& x );

	void city( ::std::auto_ptr< CityType > p );

	// StateOrProvince
	//
	typedef ::xml_schema::String StateOrProvinceType;
	typedef ::xsd::cxx::tree::optional< StateOrProvinceType > StateOrProvinceOptional;
	typedef ::xsd::cxx::tree::traits< StateOrProvinceType, char > StateOrProvinceTraits;

	const StateOrProvinceOptional& stateOrProvince() const;

	StateOrProvinceOptional& stateOrProvince();

	void stateOrProvince( const StateOrProvinceType& x );

	void stateOrProvince( const StateOrProvinceOptional& x );

	void stateOrProvince( ::std::auto_ptr< StateOrProvinceType > p );

	// PostalCode
	//
	typedef ::xml_schema::String PostalCodeType;
	typedef ::xsd::cxx::tree::optional< PostalCodeType > PostalCodeOptional;
	typedef ::xsd::cxx::tree::traits< PostalCodeType, char > PostalCodeTraits;

	const PostalCodeOptional& postalCode() const;

	PostalCodeOptional& postalCode();

	void postalCode( const PostalCodeType& x );

	void postalCode( const PostalCodeOptional& x );

	void postalCode( ::std::auto_ptr< PostalCodeType > p );

	// CountryName
	//
	typedef ::xml_schema::String CountryNameType;
	typedef ::xsd::cxx::tree::optional< CountryNameType > CountryNameOptional;
	typedef ::xsd::cxx::tree::traits< CountryNameType, char > CountryNameTraits;

	const CountryNameOptional& countryName() const;

	CountryNameOptional& countryName();

	void countryName( const CountryNameType& x );

	void countryName( const CountryNameOptional& x );

	void countryName( ::std::auto_ptr< CountryNameType > p );

	// Constructors.
	//
	SignatureProductionPlace();

	SignatureProductionPlace( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignatureProductionPlace( const SignatureProductionPlace& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignatureProductionPlace* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignatureProductionPlace();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	CityOptional City_;
	StateOrProvinceOptional StateOrProvince_;
	PostalCodeOptional PostalCode_;
	CountryNameOptional CountryName_;
};

class SignerRole: public ::xml_schema::Type
{
public:
	// ClaimedRoles
	//
	typedef ::xades::ClaimedRolesList ClaimedRolesType;
	typedef ::xsd::cxx::tree::optional< ClaimedRolesType > ClaimedRolesOptional;
	typedef ::xsd::cxx::tree::traits< ClaimedRolesType, char > ClaimedRolesTraits;

	const ClaimedRolesOptional& claimedRoles() const;

	ClaimedRolesOptional& claimedRoles();

	void claimedRoles( const ClaimedRolesType& x );

	void claimedRoles( const ClaimedRolesOptional& x );

	void claimedRoles( ::std::auto_ptr< ClaimedRolesType > p );

	// CertifiedRoles
	//
	typedef ::xades::CertifiedRolesList CertifiedRolesType;
	typedef ::xsd::cxx::tree::optional< CertifiedRolesType > CertifiedRolesOptional;
	typedef ::xsd::cxx::tree::traits< CertifiedRolesType, char > CertifiedRolesTraits;

	const CertifiedRolesOptional& certifiedRoles() const;

	CertifiedRolesOptional& certifiedRoles();

	void certifiedRoles( const CertifiedRolesType& x );

	void certifiedRoles( const CertifiedRolesOptional& x );

	void certifiedRoles( ::std::auto_ptr< CertifiedRolesType > p );

	// Constructors.
	//
	SignerRole();

	SignerRole( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	SignerRole( const SignerRole& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual SignerRole* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~SignerRole();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

private:
	ClaimedRolesOptional ClaimedRoles_;
	CertifiedRolesOptional CertifiedRoles_;
};

class ClaimedRolesList: public ::xml_schema::Type
{
public:
	// ClaimedRole
	//
	typedef ::xades::Any ClaimedRoleType;
	typedef ::xsd::cxx::tree::sequence< ClaimedRoleType > ClaimedRoleSequence;
	typedef ClaimedRoleSequence::iterator ClaimedRoleIterator;
	typedef ClaimedRoleSequence::const_iterator ClaimedRoleConstIterator;
	typedef ::xsd::cxx::tree::traits< ClaimedRoleType, char > ClaimedRoleTraits;

	const ClaimedRoleSequence& claimedRole() const;

	ClaimedRoleSequence& claimedRole();

	void claimedRole( const ClaimedRoleSequence& s );

	// Constructors.
	//
	ClaimedRolesList();

	ClaimedRolesList( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	ClaimedRolesList( const ClaimedRolesList& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual ClaimedRolesList* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~ClaimedRolesList();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	ClaimedRoleSequence ClaimedRole_;
};

class CertifiedRolesList: public ::xml_schema::Type
{
public:
	// CertifiedRole
	//
	typedef ::xades::EncapsulatedPKIData CertifiedRoleType;
	typedef ::xsd::cxx::tree::sequence< CertifiedRoleType > CertifiedRoleSequence;
	typedef CertifiedRoleSequence::iterator CertifiedRoleIterator;
	typedef CertifiedRoleSequence::const_iterator CertifiedRoleConstIterator;
	typedef ::xsd::cxx::tree::traits< CertifiedRoleType, char > CertifiedRoleTraits;

	const CertifiedRoleSequence& certifiedRole() const;

	CertifiedRoleSequence& certifiedRole();

	void certifiedRole( const CertifiedRoleSequence& s );

	// Constructors.
	//
	CertifiedRolesList();

	CertifiedRolesList( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CertifiedRolesList( const CertifiedRolesList& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CertifiedRolesList* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CertifiedRolesList();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	CertifiedRoleSequence CertifiedRole_;
};

class CompleteCertificateRefs: public ::xml_schema::Type
{
public:
	// CertRefs
	//
	typedef ::xades::CertIDList CertRefsType;
	typedef ::xsd::cxx::tree::traits< CertRefsType, char > CertRefsTraits;

	const CertRefsType& certRefs() const;

	CertRefsType& certRefs();

	void certRefs( const CertRefsType& x );

	void certRefs( ::std::auto_ptr< CertRefsType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	CompleteCertificateRefs( const CertRefsType& );

	CompleteCertificateRefs( ::std::auto_ptr< CertRefsType >& );

	CompleteCertificateRefs( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CompleteCertificateRefs( const CompleteCertificateRefs& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CompleteCertificateRefs* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CompleteCertificateRefs();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< CertRefsType > CertRefs_;
	IdOptional Id_;
};

class CompleteRevocationRefs: public ::xml_schema::Type
{
public:
	// CRLRefs
	//
	typedef ::xades::CRLRefs CRLRefsType;
	typedef ::xsd::cxx::tree::optional< CRLRefsType > CRLRefsOptional;
	typedef ::xsd::cxx::tree::traits< CRLRefsType, char > CRLRefsTraits;

	const CRLRefsOptional& cRLRefs() const;

	CRLRefsOptional& cRLRefs();

	void cRLRefs( const CRLRefsType& x );

	void cRLRefs( const CRLRefsOptional& x );

	void cRLRefs( ::std::auto_ptr< CRLRefsType > p );

	// OCSPRefs
	//
	typedef ::xades::OCSPRefs OCSPRefsType;
	typedef ::xsd::cxx::tree::optional< OCSPRefsType > OCSPRefsOptional;
	typedef ::xsd::cxx::tree::traits< OCSPRefsType, char > OCSPRefsTraits;

	const OCSPRefsOptional& oCSPRefs() const;

	OCSPRefsOptional& oCSPRefs();

	void oCSPRefs( const OCSPRefsType& x );

	void oCSPRefs( const OCSPRefsOptional& x );

	void oCSPRefs( ::std::auto_ptr< OCSPRefsType > p );

	// OtherRefs
	//
	typedef ::xades::OtherCertStatusRefs OtherRefsType;
	typedef ::xsd::cxx::tree::optional< OtherRefsType > OtherRefsOptional;
	typedef ::xsd::cxx::tree::traits< OtherRefsType, char > OtherRefsTraits;

	const OtherRefsOptional& otherRefs() const;

	OtherRefsOptional& otherRefs();

	void otherRefs( const OtherRefsType& x );

	void otherRefs( const OtherRefsOptional& x );

	void otherRefs( ::std::auto_ptr< OtherRefsType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	CompleteRevocationRefs();

	CompleteRevocationRefs( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CompleteRevocationRefs( const CompleteRevocationRefs& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CompleteRevocationRefs* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CompleteRevocationRefs();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	CRLRefsOptional CRLRefs_;
	OCSPRefsOptional OCSPRefs_;
	OtherRefsOptional OtherRefs_;
	IdOptional Id_;
};

class CRLRefs: public ::xml_schema::Type
{
public:
	// CRLRef
	//
	typedef ::xades::CRLRef CRLRefType;
	typedef ::xsd::cxx::tree::sequence< CRLRefType > CRLRefSequence;
	typedef CRLRefSequence::iterator CRLRefIterator;
	typedef CRLRefSequence::const_iterator CRLRefConstIterator;
	typedef ::xsd::cxx::tree::traits< CRLRefType, char > CRLRefTraits;

	const CRLRefSequence& cRLRef() const;

	CRLRefSequence& cRLRef();

	void cRLRef( const CRLRefSequence& s );

	// Constructors.
	//
	CRLRefs();

	CRLRefs( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CRLRefs( const CRLRefs& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CRLRefs* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CRLRefs();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	CRLRefSequence CRLRef_;
};

class CRLRef: public ::xml_schema::Type
{
public:
	// DigestAlgAndValue
	//
	typedef ::xades::DigestAlgAndValue DigestAlgAndValueType;
	typedef ::xsd::cxx::tree::traits< DigestAlgAndValueType, char > DigestAlgAndValueTraits;

	const DigestAlgAndValueType& digestAlgAndValue() const;

	DigestAlgAndValueType& digestAlgAndValue();

	void digestAlgAndValue( const DigestAlgAndValueType& x );

	void digestAlgAndValue( ::std::auto_ptr< DigestAlgAndValueType > p );

	// CRLIdentifier
	//
	typedef ::xades::CRLIdentifier CRLIdentifierType;
	typedef ::xsd::cxx::tree::optional< CRLIdentifierType > CRLIdentifierOptional;
	typedef ::xsd::cxx::tree::traits< CRLIdentifierType, char > CRLIdentifierTraits;

	const CRLIdentifierOptional& cRLIdentifier() const;

	CRLIdentifierOptional& cRLIdentifier();

	void cRLIdentifier( const CRLIdentifierType& x );

	void cRLIdentifier( const CRLIdentifierOptional& x );

	void cRLIdentifier( ::std::auto_ptr< CRLIdentifierType > p );

	// Constructors.
	//
	CRLRef( const DigestAlgAndValueType& );

	CRLRef( ::std::auto_ptr< DigestAlgAndValueType >& );

	CRLRef( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CRLRef( const CRLRef& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CRLRef* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CRLRef();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< DigestAlgAndValueType > DigestAlgAndValue_;
	CRLIdentifierOptional CRLIdentifier_;
};

class CRLIdentifier: public ::xml_schema::Type
{
public:
	// Issuer
	//
	typedef ::xml_schema::String IssuerType;
	typedef ::xsd::cxx::tree::traits< IssuerType, char > IssuerTraits;

	const IssuerType& issuer() const;

	IssuerType& issuer();

	void issuer( const IssuerType& x );

	void issuer( ::std::auto_ptr< IssuerType > p );

	// IssueTime
	//
	typedef ::xml_schema::DateTime IssueTimeType;
	typedef ::xsd::cxx::tree::traits< IssueTimeType, char > IssueTimeTraits;

	const IssueTimeType& issueTime() const;

	IssueTimeType& issueTime();

	void issueTime( const IssueTimeType& x );

	void issueTime( ::std::auto_ptr< IssueTimeType > p );

	// Number
	//
	typedef ::xml_schema::Integer NumberType;
	typedef ::xsd::cxx::tree::optional< NumberType > NumberOptional;
	typedef ::xsd::cxx::tree::traits< NumberType, char > NumberTraits;

	const NumberOptional& number() const;

	NumberOptional& number();

	void number( const NumberType& x );

	void number( const NumberOptional& x );

	// URI
	//
	typedef ::xml_schema::Uri URIType;
	typedef ::xsd::cxx::tree::optional< URIType > URIOptional;
	typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

	const URIOptional& uRI() const;

	URIOptional& uRI();

	void uRI( const URIType& x );

	void uRI( const URIOptional& x );

	void uRI( ::std::auto_ptr< URIType > p );

	// Constructors.
	//
	CRLIdentifier( const IssuerType&, const IssueTimeType& );

	CRLIdentifier( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CRLIdentifier( const CRLIdentifier& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CRLIdentifier* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CRLIdentifier();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< IssuerType > Issuer_;
	::xsd::cxx::tree::one< IssueTimeType > IssueTime_;
	NumberOptional Number_;
	URIOptional URI_;
};

class OCSPRefs: public ::xml_schema::Type
{
public:
	// OCSPRef
	//
	typedef ::xades::OCSPRef OCSPRefType;
	typedef ::xsd::cxx::tree::sequence< OCSPRefType > OCSPRefSequence;
	typedef OCSPRefSequence::iterator OCSPRefIterator;
	typedef OCSPRefSequence::const_iterator OCSPRefConstIterator;
	typedef ::xsd::cxx::tree::traits< OCSPRefType, char > OCSPRefTraits;

	const OCSPRefSequence& oCSPRef() const;

	OCSPRefSequence& oCSPRef();

	void oCSPRef( const OCSPRefSequence& s );

	// Constructors.
	//
	OCSPRefs();

	OCSPRefs( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	OCSPRefs( const OCSPRefs& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual OCSPRefs* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~OCSPRefs();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	OCSPRefSequence OCSPRef_;
};

class OCSPRef: public ::xml_schema::Type
{
public:
	// OCSPIdentifier
	//
	typedef ::xades::OCSPIdentifier OCSPIdentifierType;
	typedef ::xsd::cxx::tree::traits< OCSPIdentifierType, char > OCSPIdentifierTraits;

	const OCSPIdentifierType& oCSPIdentifier() const;

	OCSPIdentifierType& oCSPIdentifier();

	void oCSPIdentifier( const OCSPIdentifierType& x );

	void oCSPIdentifier( ::std::auto_ptr< OCSPIdentifierType > p );

	// DigestAlgAndValue
	//
	typedef ::xades::DigestAlgAndValue DigestAlgAndValueType;
	typedef ::xsd::cxx::tree::optional< DigestAlgAndValueType > DigestAlgAndValueOptional;
	typedef ::xsd::cxx::tree::traits< DigestAlgAndValueType, char > DigestAlgAndValueTraits;

	const DigestAlgAndValueOptional& digestAlgAndValue() const;

	DigestAlgAndValueOptional& digestAlgAndValue();

	void digestAlgAndValue( const DigestAlgAndValueType& x );

	void digestAlgAndValue( const DigestAlgAndValueOptional& x );

	void digestAlgAndValue( ::std::auto_ptr< DigestAlgAndValueType > p );

	// Constructors.
	//
	OCSPRef( const OCSPIdentifierType& );

	OCSPRef( ::std::auto_ptr< OCSPIdentifierType >& );

	OCSPRef( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	OCSPRef( const OCSPRef& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual OCSPRef* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~OCSPRef();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< OCSPIdentifierType > OCSPIdentifier_;
	DigestAlgAndValueOptional DigestAlgAndValue_;
};

class ResponderID: public ::xml_schema::Type
{
public:
	// ByName
	//
	typedef ::xml_schema::String ByNameType;
	typedef ::xsd::cxx::tree::optional< ByNameType > ByNameOptional;
	typedef ::xsd::cxx::tree::traits< ByNameType, char > ByNameTraits;

	const ByNameOptional& byName() const;

	ByNameOptional& byName();

	void byName( const ByNameType& x );

	void byName( const ByNameOptional& x );

	void byName( ::std::auto_ptr< ByNameType > p );

	// ByKey
	//
	typedef ::xml_schema::Base64Binary ByKeyType;
	typedef ::xsd::cxx::tree::optional< ByKeyType > ByKeyOptional;
	typedef ::xsd::cxx::tree::traits< ByKeyType, char > ByKeyTraits;

	const ByKeyOptional& byKey() const;

	ByKeyOptional& byKey();

	void byKey( const ByKeyType& x );

	void byKey( const ByKeyOptional& x );

	void byKey( ::std::auto_ptr< ByKeyType > p );

	// Constructors.
	//
	ResponderID();

	ResponderID( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	ResponderID( const ResponderID& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual ResponderID* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~ResponderID();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	ByNameOptional ByName_;
	ByKeyOptional ByKey_;
};

class OCSPIdentifier: public ::xml_schema::Type
{
public:
	// ResponderID
	//
	typedef ::xades::ResponderID ResponderIDType;
	typedef ::xsd::cxx::tree::traits< ResponderIDType, char > ResponderIDTraits;

	const ResponderIDType& responderID() const;

	ResponderIDType& responderID();

	void responderID( const ResponderIDType& x );

	void responderID( ::std::auto_ptr< ResponderIDType > p );

	// ProducedAt
	//
	typedef ::xml_schema::DateTime ProducedAtType;
	typedef ::xsd::cxx::tree::traits< ProducedAtType, char > ProducedAtTraits;

	const ProducedAtType& producedAt() const;

	ProducedAtType& producedAt();

	void producedAt( const ProducedAtType& x );

	void producedAt( ::std::auto_ptr< ProducedAtType > p );

	// URI
	//
	typedef ::xml_schema::Uri URIType;
	typedef ::xsd::cxx::tree::optional< URIType > URIOptional;
	typedef ::xsd::cxx::tree::traits< URIType, char > URITraits;

	const URIOptional& uRI() const;

	URIOptional& uRI();

	void uRI( const URIType& x );

	void uRI( const URIOptional& x );

	void uRI( ::std::auto_ptr< URIType > p );

	// Constructors.
	//
	OCSPIdentifier( const ResponderIDType&, const ProducedAtType& );

	OCSPIdentifier( ::std::auto_ptr< ResponderIDType >&, const ProducedAtType& );

	OCSPIdentifier( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	OCSPIdentifier( const OCSPIdentifier& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual OCSPIdentifier* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~OCSPIdentifier();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	::xsd::cxx::tree::one< ResponderIDType > ResponderID_;
	::xsd::cxx::tree::one< ProducedAtType > ProducedAt_;
	URIOptional URI_;
};

class OtherCertStatusRefs: public ::xml_schema::Type
{
public:
	// OtherRef
	//
	typedef ::xades::Any OtherRefType;
	typedef ::xsd::cxx::tree::sequence< OtherRefType > OtherRefSequence;
	typedef OtherRefSequence::iterator OtherRefIterator;
	typedef OtherRefSequence::const_iterator OtherRefConstIterator;
	typedef ::xsd::cxx::tree::traits< OtherRefType, char > OtherRefTraits;

	const OtherRefSequence& otherRef() const;

	OtherRefSequence& otherRef();

	void otherRef( const OtherRefSequence& s );

	// Constructors.
	//
	OtherCertStatusRefs();

	OtherCertStatusRefs( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	OtherCertStatusRefs( const OtherCertStatusRefs& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual OtherCertStatusRefs* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~OtherCertStatusRefs();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	OtherRefSequence OtherRef_;
};

class CertificateValues: public ::xml_schema::Type
{
public:
	// EncapsulatedX509Certificate
	//
	typedef ::xades::EncapsulatedPKIData EncapsulatedX509CertificateType;
	typedef ::xsd::cxx::tree::sequence< EncapsulatedX509CertificateType > EncapsulatedX509CertificateSequence;
	typedef EncapsulatedX509CertificateSequence::iterator EncapsulatedX509CertificateIterator;
	typedef EncapsulatedX509CertificateSequence::const_iterator EncapsulatedX509CertificateConstIterator;
	typedef ::xsd::cxx::tree::traits< EncapsulatedX509CertificateType, char > EncapsulatedX509CertificateTraits;

	const EncapsulatedX509CertificateSequence& encapsulatedX509Certificate() const;

	EncapsulatedX509CertificateSequence& encapsulatedX509Certificate();

	void encapsulatedX509Certificate( const EncapsulatedX509CertificateSequence& s );

	// OtherCertificate
	//
	typedef ::xades::Any OtherCertificateType;
	typedef ::xsd::cxx::tree::sequence< OtherCertificateType > OtherCertificateSequence;
	typedef OtherCertificateSequence::iterator OtherCertificateIterator;
	typedef OtherCertificateSequence::const_iterator OtherCertificateConstIterator;
	typedef ::xsd::cxx::tree::traits< OtherCertificateType, char > OtherCertificateTraits;

	const OtherCertificateSequence& otherCertificate() const;

	OtherCertificateSequence& otherCertificate();

	void otherCertificate( const OtherCertificateSequence& s );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	CertificateValues();

	CertificateValues( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CertificateValues( const CertificateValues& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CertificateValues* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CertificateValues();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	EncapsulatedX509CertificateSequence EncapsulatedX509Certificate_;
	OtherCertificateSequence OtherCertificate_;
	IdOptional Id_;
};

class RevocationValues: public ::xml_schema::Type
{
public:
	// CRLValues
	//
	typedef ::xades::CRLValues CRLValuesType;
	typedef ::xsd::cxx::tree::optional< CRLValuesType > CRLValuesOptional;
	typedef ::xsd::cxx::tree::traits< CRLValuesType, char > CRLValuesTraits;

	const CRLValuesOptional& cRLValues() const;

	CRLValuesOptional& cRLValues();

	void cRLValues( const CRLValuesType& x );

	void cRLValues( const CRLValuesOptional& x );

	void cRLValues( ::std::auto_ptr< CRLValuesType > p );

	// OCSPValues
	//
	typedef ::xades::OCSPValues OCSPValuesType;
	typedef ::xsd::cxx::tree::optional< OCSPValuesType > OCSPValuesOptional;
	typedef ::xsd::cxx::tree::traits< OCSPValuesType, char > OCSPValuesTraits;

	const OCSPValuesOptional& oCSPValues() const;

	OCSPValuesOptional& oCSPValues();

	void oCSPValues( const OCSPValuesType& x );

	void oCSPValues( const OCSPValuesOptional& x );

	void oCSPValues( ::std::auto_ptr< OCSPValuesType > p );

	// OtherValues
	//
	typedef ::xades::OtherCertStatusValues OtherValuesType;
	typedef ::xsd::cxx::tree::optional< OtherValuesType > OtherValuesOptional;
	typedef ::xsd::cxx::tree::traits< OtherValuesType, char > OtherValuesTraits;

	const OtherValuesOptional& otherValues() const;

	OtherValuesOptional& otherValues();

	void otherValues( const OtherValuesType& x );

	void otherValues( const OtherValuesOptional& x );

	void otherValues( ::std::auto_ptr< OtherValuesType > p );

	// Id
	//
	typedef ::xml_schema::Id IdType;
	typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
	typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

	const IdOptional& id() const;

	IdOptional& id();

	void id( const IdType& x );

	void id( const IdOptional& x );

	void id( ::std::auto_ptr< IdType > p );

	// Constructors.
	//
	RevocationValues();

	RevocationValues( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	RevocationValues( const RevocationValues& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual RevocationValues* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~RevocationValues();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	CRLValuesOptional CRLValues_;
	OCSPValuesOptional OCSPValues_;
	OtherValuesOptional OtherValues_;
	IdOptional Id_;
};

class CRLValues: public ::xml_schema::Type
{
public:
	// EncapsulatedCRLValue
	//
	typedef ::xades::EncapsulatedPKIData EncapsulatedCRLValueType;
	typedef ::xsd::cxx::tree::sequence< EncapsulatedCRLValueType > EncapsulatedCRLValueSequence;
	typedef EncapsulatedCRLValueSequence::iterator EncapsulatedCRLValueIterator;
	typedef EncapsulatedCRLValueSequence::const_iterator EncapsulatedCRLValueConstIterator;
	typedef ::xsd::cxx::tree::traits< EncapsulatedCRLValueType, char > EncapsulatedCRLValueTraits;

	const EncapsulatedCRLValueSequence& encapsulatedCRLValue() const;

	EncapsulatedCRLValueSequence& encapsulatedCRLValue();

	void encapsulatedCRLValue( const EncapsulatedCRLValueSequence& s );

	// Constructors.
	//
	CRLValues();

	CRLValues( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	CRLValues( const CRLValues& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual CRLValues* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~CRLValues();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	EncapsulatedCRLValueSequence EncapsulatedCRLValue_;
};

class OCSPValues: public ::xml_schema::Type
{
public:
	// EncapsulatedOCSPValue
	//
	typedef ::xades::EncapsulatedPKIData EncapsulatedOCSPValueType;
	typedef ::xsd::cxx::tree::sequence< EncapsulatedOCSPValueType > EncapsulatedOCSPValueSequence;
	typedef EncapsulatedOCSPValueSequence::iterator EncapsulatedOCSPValueIterator;
	typedef EncapsulatedOCSPValueSequence::const_iterator EncapsulatedOCSPValueConstIterator;
	typedef ::xsd::cxx::tree::traits< EncapsulatedOCSPValueType, char > EncapsulatedOCSPValueTraits;

	const EncapsulatedOCSPValueSequence& encapsulatedOCSPValue() const;

	EncapsulatedOCSPValueSequence& encapsulatedOCSPValue();

	void encapsulatedOCSPValue( const EncapsulatedOCSPValueSequence& s );

	// Constructors.
	//
	OCSPValues();

	OCSPValues( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	OCSPValues( const OCSPValues& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual OCSPValues* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~OCSPValues();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	EncapsulatedOCSPValueSequence EncapsulatedOCSPValue_;
};

class OtherCertStatusValues: public ::xml_schema::Type
{
public:
	// OtherValue
	//
	typedef ::xades::Any OtherValueType;
	typedef ::xsd::cxx::tree::sequence< OtherValueType > OtherValueSequence;
	typedef OtherValueSequence::iterator OtherValueIterator;
	typedef OtherValueSequence::const_iterator OtherValueConstIterator;
	typedef ::xsd::cxx::tree::traits< OtherValueType, char > OtherValueTraits;

	const OtherValueSequence& otherValue() const;

	OtherValueSequence& otherValue();

	void otherValue( const OtherValueSequence& s );

	// Constructors.
	//
	OtherCertStatusValues();

	OtherCertStatusValues( const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	OtherCertStatusValues( const OtherCertStatusValues& x, ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 );

	virtual OtherCertStatusValues* _clone( ::xml_schema::Flags f = 0, ::xml_schema::Container* c = 0 ) const;

	virtual ~OtherCertStatusValues();

	// Implementation.
	//
private:
	void parse( ::xsd::cxx::xml::dom::parser< char >&, ::xml_schema::Flags );

	OtherValueSequence OtherValue_;
};
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xades
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xades
{
void operator<< ( ::xercesc::DOMElement&, const Any& );

void operator<< ( ::xercesc::DOMElement&, const ObjectIdentifier& );

void operator<< ( ::xercesc::DOMElement&, const Identifier& );

void operator<< ( ::xercesc::DOMElement&, const Qualifier& );

void operator<< ( ::xercesc::DOMAttr&, const Qualifier& );

void operator<< ( ::xml_schema::ListStream&, const Qualifier& );

void operator<< ( ::xercesc::DOMElement&, const DocumentationReferences& );

void operator<< ( ::xercesc::DOMElement&, const EncapsulatedPKIData& );

void operator<< ( ::xercesc::DOMElement&, const Include& );

void operator<< ( ::xercesc::DOMElement&, const ReferenceInfo& );

void operator<< ( ::xercesc::DOMElement&, const GenericTimeStamp& );

void operator<< ( ::xercesc::DOMElement&, const XAdESTimeStamp& );

void operator<< ( ::xercesc::DOMElement&, const OtherTimeStamp& );

void operator<< ( ::xercesc::DOMElement&, const QualifyingProperties& );

void operator<< ( ::xercesc::DOMElement&, const SignedProperties& );

void operator<< ( ::xercesc::DOMElement&, const UnsignedProperties& );

void operator<< ( ::xercesc::DOMElement&, const SignedSignatureProperties& );

void operator<< ( ::xercesc::DOMElement&, const SignedDataObjectProperties& );

void operator<< ( ::xercesc::DOMElement&, const UnsignedSignatureProperties& );

void operator<< ( ::xercesc::DOMElement&, const UnsignedDataObjectProperties& );

void operator<< ( ::xercesc::DOMElement&, const QualifyingPropertiesReference& );

void operator<< ( ::xercesc::DOMElement&, const CertIDList& );

void operator<< ( ::xercesc::DOMElement&, const CertID& );

void operator<< ( ::xercesc::DOMElement&, const DigestAlgAndValue& );

void operator<< ( ::xercesc::DOMElement&, const SignaturePolicyIdentifier& );

void operator<< ( ::xercesc::DOMElement&, const SignaturePolicyId& );

void operator<< ( ::xercesc::DOMElement&, const SigPolicyQualifiersList& );

void operator<< ( ::xercesc::DOMElement&, const SPUserNotice& );

void operator<< ( ::xercesc::DOMElement&, const NoticeReference& );

void operator<< ( ::xercesc::DOMElement&, const IntegerList& );

void operator<< ( ::xercesc::DOMElement&, const CounterSignature& );

void operator<< ( ::xercesc::DOMElement&, const DataObjectFormat& );

void operator<< ( ::xercesc::DOMElement&, const CommitmentTypeIndication& );

void operator<< ( ::xercesc::DOMElement&, const CommitmentTypeQualifiersList& );

void operator<< ( ::xercesc::DOMElement&, const SignatureProductionPlace& );

void operator<< ( ::xercesc::DOMElement&, const SignerRole& );

void operator<< ( ::xercesc::DOMElement&, const ClaimedRolesList& );

void operator<< ( ::xercesc::DOMElement&, const CertifiedRolesList& );

void operator<< ( ::xercesc::DOMElement&, const CompleteCertificateRefs& );

void operator<< ( ::xercesc::DOMElement&, const CompleteRevocationRefs& );

void operator<< ( ::xercesc::DOMElement&, const CRLRefs& );

void operator<< ( ::xercesc::DOMElement&, const CRLRef& );

void operator<< ( ::xercesc::DOMElement&, const CRLIdentifier& );

void operator<< ( ::xercesc::DOMElement&, const OCSPRefs& );

void operator<< ( ::xercesc::DOMElement&, const OCSPRef& );

void operator<< ( ::xercesc::DOMElement&, const ResponderID& );

void operator<< ( ::xercesc::DOMElement&, const OCSPIdentifier& );

void operator<< ( ::xercesc::DOMElement&, const OtherCertStatusRefs& );

void operator<< ( ::xercesc::DOMElement&, const CertificateValues& );

void operator<< ( ::xercesc::DOMElement&, const RevocationValues& );

void operator<< ( ::xercesc::DOMElement&, const CRLValues& );

void operator<< ( ::xercesc::DOMElement&, const OCSPValues& );

void operator<< ( ::xercesc::DOMElement&, const OtherCertStatusValues& );
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XAD_ES_HXX
