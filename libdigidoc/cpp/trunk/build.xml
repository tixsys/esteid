<project name="libdigidoc" default="build" basedir=".">
    <!-- Properties from files -->
    <loadproperties srcFile="build.properties"/>
    
    <!-- Define cpp tasks -->
    <taskdef resource="cpptasks.tasks" classpath="${path.cpptasks.jar}"/>
    <typedef resource="cpptasks.types" classpath="${path.cpptasks.jar}"/>
    
     <!-- Visual C++ compiler -->
            <compiler id="VisualC++" name="msvc" if="windows">
                <compilerarg value="/nologo"/>
                <compilerarg value="/MD"/>
                <!-- Display all warnings -->
                <compilerarg value="/W3"/>
                <compilerarg value="/EHsc"/>
                <compilerarg value="/w44290"/>
                <compilerarg value="/w44996"/>
                <compilerarg value="/Gm" if="debug"/>
                <compilerarg value="/Zi" if="debug"/>
                <compilerarg value="/Od"/>
                <includepath path="${dir.include}"/>
                <defineset>
                    <define name="WIN32"/>
                    <define name="_DEBUG" if="debug"/>
                    <define name="NDEBUG" unless="debug"/>
                    <define name="_MBCS"/>
                    <define name="_USRDLL"/>
                    <define name="XSEC_NO_XALAN"/>
                </defineset>
                <compilerarg value="/FD"/>
                <compilerarg value="/c"/>
                <compilerarg value="/Zc:wchar_t"/>
                <compilerarg value="/Zc:forScope"/>
                <compilerarg value="/GR"/>
                
                <includepath path="C:\_projects\BDocLib\xerces-c-src_2_8_0\src\"/>
                <includepath path="C:\_projects\BDocLib\zlib-1.2.3\contrib\minizip"/>
                <includepath path="C:\_projects\BDocLib\zlib-1.2.3"/>
                <includepath path="C:\OpenSSL\include"/>
                <!--includepath path="C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\PlatformSDK\Include"/-->
                <includepath path="C:\Program Files\Microsoft SDKs\Windows\v6.1\Include"/>
                <!-- Create include directory by opening xsec.sln and running build xsec_lib -->
                <includepath path="C:\_projects\BDocLib\xml-security-c-1.3.1\include"/>
                <includepath path="C:\_projects\BDocLib\libp11-0.2.3\src"/>
                <includepath path="C:\Program Files\CodeSynthesis XSD 3.2\include"/>
                <includepath path="C:\_projects\DigidocCpp\lib\cppunit-1.12.1\include"/>
                
            </compiler>
    
            <!-- gcc compile for Linux -->
            <compiler id="Linuxgcc" name="g++" if="linux">
                <compilerarg value="-g" if="debug"/>
                <compilerarg value="-Wall"/>
                <compilerarg value="-fPIC"/>
            	<compilerarg value="-xc++"/>
                <compilerarg value="-O2" unless="debug"/>
                <!--compilerarg value="-Wshadow"/-->
                
                <!--defineset>
                    <define name="NOCRYPT"/>
                    <define name="NOUNCRYPT"/>
                </defineset-->
                <!--includepath path="${dir.include}"/-->
                <!--includepath path="${dir.lib}/zlib-1.2.3/contrib/minizip"/-->
            </compiler>
            
        <!-- Visual C++ linker -->
		<linker id="VisualC++Linker" name="msvc" if="windows">
			<!--linkerarg value="${basedir}/build/version.res"/-->
			<linkerarg value="/debug" if="debug"/>
			<linkerarg value="/machine:I386"/>
			<linkerarg value="/nologo"/>
		    <!--libset libs="stdc++ xerces-c xml-security-c crypto p11 minizip" dir="${dir.lib}/win32"/-->
		    <libset dir="C:\_projects\BDocLib" libs="stdc++ xerces-c_2 xsec_1 ssleay32 libeay32 libp11 ltdl zlib minizip_library"/>
		    <!--libset dir="C:\Program Files\CodeSynthesis XSD 3.2\lib\vc-8.0" libs="xerces-c"/-->
		    <syslibset libs="uuid" dir="C:\Program Files\Microsoft SDKs\Windows\v6.1\Lib"/>
		    <syslibset libs="msvcrt" dir="C:\Program Files\Microsoft Visual Studio 8\VC\lib"/>
		</linker>

		<!-- Linux linker -->
		<linker id="LinuxLinker" name="g++" if="linux" libtool="true">
			<linkerarg value="-shared"/>
            <linkerarg value="-g" if="debug"/>
            <!--linkerarg value="-O3" unless="debug"/-->
            <linkerarg value="-Wall"/>
            <linkerarg value="-fPIC"/>
            <linkerarg value="-L/usr/lib/debug/usr/lib/" if="debug"/>
            <!--linkerarg value="-L../../${dir.lib}/{zlib}/contrib/minizip"/-->
            <!--libset libs="stdc++ xerces-c xml-security-c crypto minizip ltdl"/-->
			<libset libs="stdc++ xerces-c xml-security-c crypto ltdl z"/>
		</linker>

            
            

    
    
    
    <!-- Info -->
    <target name="info" depends="pre-init">
        <echo message="Building ${ant.project.name} project using java (${java.runtime.version}) with ${ant.version} linux=${linux} windows=${windows}"/>
        
    </target>
    
    <!-- Clean -->
    <target name="clean">
        <delete quiet="yes" dir="${dir.build}"/>
    </target>
    
    <target name="pre-init">
	  <condition property="windows">
        <os family="windows"/>
	  </condition>
	  <condition property="linux">
		<os name="Linux"/>
	  </condition>
	  <condition property="lib.outputtype" value="shared">
		<os name="Linux"/>
	  </condition>
	  <condition property="lib.outputtype" value="static">
		<os family="windows"/>
	  </condition>
    </target>
    
    <!-- Init -->
    <target name="init" depends="pre-init">
    
        <mkdir dir="${dir.obj}"/>
        <mkdir dir="${dir.dist}"/>
    </target>
    
    <!-- Build libdigidoc.so -->
    <target name="build-libdigidoc.so" depends="info,init, build-minizip">
		<!-- build static under win and shared under linux lib.outputtype is set in pre-init -->
		<cc outfile="${dir.dist}/libdigidoc" objdir="${dir.obj}" outtype="${lib.outputtype}">
			<compiler refid="Linuxgcc"/>
            <compiler refid="VisualC++"/>
            
            <fileset dir="${dir.src}">
                <include name="**/*.cpp"/>
                <include name="**/*.cxx"/>
                <exclude name="main_*.cpp"/>
                <exclude name="**/*bdoc_ref.cpp"/>
            	
            </fileset>
            
            <linker refid="VisualC++Linker"/>
            <linker refid="LinuxLinker"/>
        </cc>
    </target>
	
	<target name="build-minizip" depends="info, init">
		<cc objdir="${dir.obj}" >
			<compiler name="g++" if="${linux}"><!-- build with gcc instead of g++ -->
				<compilerarg value="-xc"/><!-- tell g++ to threat files as C files -->
			</compiler>
            <compiler refid="VisualC++"/>
            
			<fileset dir="${dir.src}">
				<include name="minizip/ioapi.c" />
				<include name="minizip/zip.c"/>
				<include name="minizip/unzip.c" />
            	<include name="minizip/iowin32.c" if="${windows}"/>
	        </fileset>
        </cc>
	</target>
    
    <!-- Build demo -->
    <target name="build-demo" depends="build-libdigidoc.so">
        <cc outfile="${dir.dist}/demo" objdir="${dir.obj}" subsystem="console">
            <compiler refid="Linuxgcc"/>
            <compiler refid="VisualC++"/>
                
            <fileset dir="${dir.src}">
	            <include name="main_demo.cpp"/>
	        </fileset>

	        <linker refid="VisualC++Linker"/>
		    <linker refid="LinuxLinker"/>
		    
		    <libset libs="libdigidoc" dir="${dir.dist}"/>
        </cc>
    </target>
	
	<target name="build-tool" depends="build-libdigidoc.so">
	        <cc outfile="${dir.dist}/tool" objdir="${dir.obj}" subsystem="console">
                <compiler refid="Linuxgcc"/>
                <compiler refid="VisualC++"/>
                
                <fileset dir="${dir.src}">
	               <include name="bdoc_ref.cpp"/>
	            </fileset>

	            <linker refid="VisualC++Linker"/>
		        <linker refid="LinuxLinker"/>
		        
		        <libset libs="libdigidoc" dir="${dir.dist}"/>
	        </cc>
	    </target>

    
    <!-- Build test -->
    <target name="build-test" depends="build-libdigidoc.so">
        <cc outfile="${dir.dist}/test" objdir="${dir.obj}">
            <compiler refid="Linuxgcc"/>
            <compiler refid="VisualC++"/>
                
            <fileset dir="${dir.src}">
	            <include name="main_test-1.cpp"/>
	        </fileset>

	        <linker refid="VisualC++Linker"/>
		    <linker refid="LinuxLinker"/>
		    
		    <libset libs="libdigidoc" dir="${dir.dist}"/>
            
        </cc>
    </target>
	
    <!-- Build unittests -->
    <target name="build-unittests" depends="build-libdigidoc.so">
        <cc outfile="${dir.dist}/unittests" objdir="${dir.obj}" subsystem="console" outtype="executable">
            <compiler refid="Linuxgcc"/>
            <compiler refid="VisualC++"/>
                
            <fileset dir="${dir.test}/src">
                    <include name="**/*.cpp"/>
            </fileset>
            <includepath path="${dir.src}"/>

	        <linker refid="VisualC++Linker"/>
		    <linker refid="LinuxLinker"/>
		    
		    <libset libs="libdigidoc cppunit" dir="${dir.dist}"/>
		    <libset libs="cppunit" dir="C:\_projects\BDocLib" if="windows"/>
        </cc>
    </target>
    
    <!-- Run demo list application -->
    <target name="run-demo-list">
        <exec executable="${dir.dist}/demo">
            <env key="LD_LIBRARY_PATH" path="${dir.dist}"/>
            <arg value="list"/>
            <arg value="--validateOnline"/>
            <arg value="digidoc-bes.bdoc"/>
        </exec>
    </target>
    
    <!-- Run demo create application -->
    <target name="run-demo-create">
        <exec executable="${dir.dist}/demo">
            <env key="LD_LIBRARY_PATH" path="${dir.dist}"/>
            <arg value="create"/>
            <arg value="--file=file1.txt"/>
            <arg value="--file=file2.txt"/>
            <arg value="--file=file3.txt"/>
            <arg value="--profile=TM"/>
            <arg value="digidoc-bes.bdoc"/>
        </exec>
    </target>
    
    <!-- Run test application -->
    <target name="run-test" depends="build-unittests, build-tool, build-demo">
        <exec executable="python">
            <!--env key="LD_LIBRARY_PATH" path="${dir.dist}"/-->
            <arg value="test/test.py"/>
        </exec>
    </target>
	
	<target name="test" depends="run-test"/>
	
    <!-- Run unittests -->
    <target name="run-unittests" depends="build-unittests">
        <exec executable="${dir.dist}/unittests">
            <env key="LD_LIBRARY_PATH" path="${dir.dist}"/>
        </exec>
    </target>
    
    <!-- Build -->
    <target name="build" depends="build-demo, build-tool, build-unittests"/>
	<target name="all" depends="build"/>
    
</project>
