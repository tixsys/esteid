BDoc Cpp LIB

BDoc C++ lib is library for creating and validating BDOC-1.0 documents [1]. 
Older Digidoc formats(DIGIDOC-XML) are not supported. Difference between 
DDoc, EDoc and BDoc are described in [2]. BDoc signatures should be XAdES [3]
compliant, but some XAdES signatures may be uncompliant with BDoc. Currently 
BDoc-1.0 BES and TM profiles are supported.

Signatures can be given using EstEID Card (id-kaart) and RSA certificates 
with private keys.

Currently lib is still unstable, run tests for more information.


[1] http://www.signature.lt/-TOOLS/BDoc-1.0.pdf
[2] http://www.id.ee/public/ID_arendajate_seminar_Urmo_Keskel.ppt
[3] http://www.w3.org/TR/XAdES/

REQUISITES

Libary dependencies

* zlib 1.2.3 
* libp11 0.2.4
* xerces-c 2.8.0
* xml-security-c 1.3.1
* openssl 0.9.8g
* libopensc2 (runtime PKCS#15 driver)

On Ubuntu you can install the libs by running:
sudo apt-get install libopensc2 libp11-dev libssl-dev libxerces28-dev libxml-security-c-dev

Tools

* cmake 2.6
* python 2.5 or 2.6 for running tests
* Codesynthesis xsd 3.2.0 for XML tree generation

Install xsd tools and library from Code Synthesis:

  1. Install required libraries
     The following section is for Debian distribution, other distributions may have different package names.
     NOTE: Hope that all the needed libraries are listed here.
     a) Install Xerces-C++
        'apt-get install libxerces-c28 libxerces-c2-dev'
  2. dowload binary version of xsd from following URL: http://www.codesynthesis.com/products/xsd/download.xhtml
     For example for i686 arch debian download binary with command:
     'wget http://www.codesynthesis.com/download/xsd/3.2/linux-gnu/i686/xsd_3.2.0-1_i386.deb'
  3. install xsd tools and library with command:
     'dpkg -i xsd_3.2.0-1_i386.deb'

BUILDING

If all required libs are installed you should be able to build the lib by
running

cmake . -G "Unix Makefiles"
make
python test/test.py

or 

make -f Makefile.linux tool

CONFIGURATION

BDoc lib needs configuration file that defines trusted CA certificates, OCSP 
responder certificate, PKCS11 driver location, XML schemas and so.

Example configuration and example directory structure is provided in etc 
directory. Also test/test.py tries to generate configuration file for your
environment.

Configuration file is first searched from environment variable 
BDOCLIB_CONF_XML. If not defined, it searches for file bdoc.conf from
running directory.

DOCUMENTATION

generate documentation by running 

make doxygen

see src/main_demo.cpp and src/ref_tool.cpp for examples




