cmake_minimum_required(VERSION 2.6)
project(qesteidutil)

# Custom cmake modules
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")

include(InstallSettings)

if(PKCS11_MODULE)
    add_definitions(-DPKCS11_MODULE="${PKCS11_MODULE}")
endif(PKCS11_MODULE)

find_package(Qt4 REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(OpenSSLCrypto REQUIRED)
find_package(LibP11 REQUIRED)
if(UNIX AND NOT APPLE)
    find_package(PCSCLite REQUIRED)
endif(UNIX AND NOT APPLE)

set(qesteidutil_MOC_HDRS
    common/CertificateWidget.h
    src/DiagnosticsDialog.h
    src/Settings.h
    src/SettingsDialog.h
    src/jscardmanager.h
    src/jscertdata.h
    src/jsesteidcard.h
    src/jsextender.h
    src/mainwindow.h
    src/sslConnect.h
)

set(qesteidutil_HDRS
    common/SslCertificate.h
    src/version.h
)

set(cardlib_SRCS
    cardlib/CardBase.cpp
    cardlib/CTAPIManager.cpp
    cardlib/DynamicLibrary.cpp
    cardlib/EstEidCard.cpp
    cardlib/PCSCManager.cpp
    cardlib/SCError.cpp
    cardlib/SmartCardManager.cpp
)

set(qesteidutil_SRCS
    common/CertificateWidget.cpp
    common/SslCertificate.cpp
    src/DiagnosticsDialog.cpp
    src/SettingsDialog.cpp
    src/jscardmanager.cpp
    src/jscertdata.cpp
    src/jsesteidcard.cpp
    src/jsextender.cpp
    src/main.cpp
    src/mainwindow.cpp
    src/sslConnect.cpp
)

set( UIS
    common/ui/CertificateWidget.ui
    src/ui/DiagnosticsDialog.ui
    src/ui/SettingsDialog.ui
)

set(qesteidutil_RCS src/qesteidutil.qrc)

set(QT_MIN_VERSION 4.4.0)
set(QT_USE_QTNETWORK true)
set(QT_USE_QTWEBKIT true)
set(QT_USE_QTXML true)

include(${QT_USE_FILE})

find_package(Subversion)
if (Subversion_FOUND)
  if (EXISTS ${PROJECT_SOURCE_DIR}/.svn)
      Subversion_WC_INFO(${PROJECT_SOURCE_DIR} PROJECT)
      message(STATUS "Current SVN revision is ${PROJECT_WC_REVISION}")
	  add_definitions(-DBUILD_VER=${PROJECT_WC_REVISION})
      set(SVN_BUILD ${PROJECT_WC_REVISION})
  else (EXISTS ${PROJECT_SOURCE_DIR}/.svn)
      add_definitions(-DBUILD_VER=0)
  endif (EXISTS ${PROJECT_SOURCE_DIR}/.svn)
else (Subversion_FOUND)
  add_definitions(-DBUILD_VER=0)
endif (Subversion_FOUND)

include_directories(
    ${CMAKE_SOURCE_DIR}
    ${CMAKE_BINARY_DIR}
    ${PCSCLITE_INCLUDE_DIR}
    ${OPENSSL_INCLUDE_DIR}
    ${LIBP11_INCLUDE_DIR}
)

if(APPLE)
    set(APP_CONTENTS_DIR "${CMAKE_SOURCE_DIR}/mac")
    set(LIBQJPEG_FILE "${QT_PLUGINS_DIR}/imageformats/libqjpeg.dylib")
    
    # xCode hacks
    include_directories(/usr/local/include/../include)
    
    # Bundle resources
    file(GLOB_RECURSE RESOURCE_FILES ${APP_CONTENTS_DIR}/Resources/*.icns ${APP_CONTENTS_DIR}/Resources/**/*.strings)
    
    foreach(_file ${RESOURCE_FILES})
        get_filename_component(_file_dir ${_file} PATH)
        file(RELATIVE_PATH _file_dir ${APP_CONTENTS_DIR}/Resources ${_file_dir})
        set_source_files_properties(${_file} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/${_file_dir}" )
    endforeach(_file)
    
    # Qt jpeg plugin
    set(RESOURCE_FILES ${RESOURCE_FILES} ${LIBQJPEG_FILE})
    set_source_files_properties(${LIBQJPEG_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION "MacOS/imageformats" )
endif(APPLE)

QT4_ADD_RESOURCES(qesteidutil_RCC_SRCS ${qesteidutil_RCS})
QT4_WRAP_UI( UI_HEADERS ${UIS} )
QT4_WRAP_CPP(qesteidutil_MOC_SRCS ${qesteidutil_MOC_HDRS})

IF(WIN32)
    SET(qesteidutil_SRCS ${qesteidutil_SRCS} src/qesteidutil.rc)
ENDIF(WIN32)
    
add_executable(qesteidutil WIN32 MACOSX_BUNDLE
    ${cardlib_SRCS}
    ${qesteidutil_SRCS}
    ${qesteidutil_HDRS}
    ${qesteidutil_MOC_SRCS}
    ${qesteidutil_RCC_SRCS}
    ${qesteidutil_MOC_HDRS}
    ${UI_HEADERS}
    ${RESOURCE_FILES}
)

if(APPLE)
    configure_file(
        ${APP_CONTENTS_DIR}/Info.plist.cmake
        ${APP_CONTENTS_DIR}/Info.plist
        @ONLY)
    
    set_target_properties(qesteidutil
    	PROPERTIES
    	MACOSX_BUNDLE_INFO_PLIST ${APP_CONTENTS_DIR}/Info.plist
   )
endif(APPLE)

target_link_libraries(qesteidutil
    ${QT_QTMAIN_LIBRARY}
    ${QT_LIBRARIES}
    ${OPENSSL_LIBRARIES}
    ${OPENSSLCRYPTO_LIBRARIES}
    ${LIBP11_LIBRARY}
)

if(UNIX AND NOT APPLE)
    INSTALL(FILES qesteidutil.desktop DESTINATION ${SHARE_INSTALL_PREFIX}/applications)

    # Install icons
    foreach(RES 16x16 32x32 48x48)
        install(
            FILES src/html/images/id_icon_${RES}.png
            DESTINATION ${SHARE_INSTALL_PREFIX}/icons/hicolor/${RES}/apps/
            RENAME qesteidutil.png
        )
    endforeach(RES)
endif(UNIX AND NOT APPLE)

install(TARGETS qesteidutil DESTINATION ${BIN_INSTALL_DIR})
