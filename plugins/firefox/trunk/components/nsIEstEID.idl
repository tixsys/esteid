#include "nsISupports.idl"
#include "nsISecurityCheckedComponent.idl"

/**
 * Event handler callback for card events
 */
[scriptable, function, uuid(eb95ed00-e27e-4b20-937c-511e085c1854)]
interface nsIEstEIDListener : nsISupports {
  /** Handle card event.
    * @param reader
    *        id of the reader that triggered the event.
    */
  void handleEvent(in unsigned short reader);
};

/**
 * Certificate object.
 * Provides a Subset of X509 certificate fields.
 */
[scriptable, uuid(cb06122f-0f2b-4665-8063-76a05ced742a)]
interface nsIEstEIDCertificate : nsISupports {
  /** Subject CN */
  readonly attribute AString CN;
  /** Date and time in format dd.mm.yyyy hh:mm:ss */
  readonly attribute AString validFrom;
  /** Date and time in format dd.mm.yyyy hh:mm:ss */
  readonly attribute AString validTo;
  /** Issuer CN */
  readonly attribute AString issuerCN;
  /** security, Non-Repudiation, digital signing etc. */
  readonly attribute AString keyUsage;
  /** Certificate in PEM format */
  readonly attribute ACString cert;
  /** A unique serial number for this certificate */ 
  readonly attribute AString serial;
};

/**
 * This is the public interface for accessing Estonian ID-card.
 */
[scriptable, uuid(fc4a799c-04e6-11de-b3d7-72c955d89593)]
interface nsIEstEID : nsISupports
{
  /** get plugin version 
    * @returns string version number
    */
  ACString getVersion();

  /** register callback for card events.
   * @param type Event to listen for.
   *        - OnCardInserted
   *        - OnCardRemoved
   *        - OnReadersChanged
   * @param listener Event handler function
   */
  void addEventListener(in string type, in nsIEstEIDListener listener);

  /** remove callback for card events.
   * @param type
   * @param listener function pointer
   */
  void removeEventListener(in string type, in nsIEstEIDListener listener);

  /** get SmartCard reader name
   * @param reader index of the reader
   */
   /*
   string getReaderName(in unsigned short reader);
   void selectReader(in unsigned short reader);
   attribute unsigned short readerCount;
   */

  /** Sign hash with digital signature certificate
   * Browser will automatically prompt for PIN2
   * @param hash HEX encoded document hash to sign
   * @param url an URL to the document itself
   */
  string sign(in string hash, in string url);
  
  /** Certificates */
  readonly attribute nsIEstEIDCertificate authCert;
  readonly attribute nsIEstEIDCertificate signCert;

  /** Personal data file attributes */
  readonly attribute ACString lastName;
  readonly attribute ACString firstName;
  readonly attribute ACString middleName;
  readonly attribute ACString sex;
  readonly attribute ACString citizenship;
  readonly attribute ACString birthDate;
  readonly attribute ACString personalID;
  readonly attribute ACString documentID;
  readonly attribute ACString expiryDate;
  readonly attribute ACString placeOfBirth;
  readonly attribute ACString issuedDate;
  readonly attribute ACString residencePermit;
  readonly attribute ACString comment1;
  readonly attribute ACString comment2;
  readonly attribute ACString comment3;
  readonly attribute ACString comment4;
  
  /** Error code
   * Will be set after a function or property read throws
   * This allows you to detect what type of error occurred
   * and handle it intelligently.
   * 0 - Success (No Error)
   * 1 - Operation canceled (by user)
   * 2 - No card available
   * 3 - No readers available
   * 4 - Invalid argument
   * 5 - Card error
   * 6 - Manager error
   * 7 - Unknown error
   */
  /* readonly attribute int errorCode; */
  /** Error message  */
  /* readonly attribute AString errorMessage; */ 
};

%{C++

#define NS_ESTEID_CONTRACTID "@id.eesti.ee/esteid;1"

%}
